<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configurations on Ross A. Baker</title>
    <link>https://rossabaker.com/configs/</link>
    <description>Recent content in Configurations on Ross A. Baker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Sep 2022 23:48:00 +0000</lastBuildDate>
    <atom:link href="https://rossabaker.com/configs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continuous integration with Forgejo Actions and Nix</title>
      <link>https://rossabaker.com/configs/forgejo-actions/</link>
      <pubDate>Sun, 07 Jan 2024 10:40:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/forgejo-actions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://forgejo.org/docs/v1.20/user/actions/&#34;&gt;Forgejo Actions&lt;/a&gt; is a continuous integration service, vaguely&#xA;compatible with GitHub Actions.  Builds require local runners,&#xA;typically containers.  Here, we create minimalistic containers geared&#xA;toward running Nix builds, so projects supply their logic and Actions&#xA;provides the compute.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Opengist: a self-hosted pastebin with NixOS</title>
      <link>https://rossabaker.com/configs/opengist/</link>
      <pubDate>Sat, 23 Dec 2023 22:07:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/opengist/</guid>
      <description>Opengist is a self-hosted pastebin. There is not yet support in Forgejo, so Opengist makes an excellent companion for those snippets that don&amp;rsquo;t quite merit their own repository.&#xA;My pastebin is hosted at paste.rossabaker.com.&#xA;Nix package # Opengist needs its frontend assets compiled with NPM, and then embeds them into a Go application. The compiled assets are added as an input to the upstream source.&#xA;MIT&#xA;{ pkgs, lib, src, .</description>
    </item>
    <item>
      <title>Decentralized avatars with Nginx and Libravatar</title>
      <link>https://rossabaker.com/configs/libravatar/</link>
      <pubDate>Fri, 08 Dec 2023 09:10:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/libravatar/</guid>
      <description>Libravatar is a decentralized alternative to Gravatar for displaying a profile picture. There are several implementations, but self-hosting can be as simple as a couple DNS records and a small Nginx configuration.&#xA;Deriving the images in advance # Avatar images can be prepared in advance. For any high-res image source, we need to accomplish three things:&#xA;Scale the image. The maximum size is 128x128. This is done with ImageMagick. Calculate an MD5 sum of the lowercased e-mail address.</description>
    </item>
    <item>
      <title>Forwarding email with pobox.com</title>
      <link>https://rossabaker.com/configs/email/</link>
      <pubDate>Sun, 03 Dec 2023 23:59:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/email/</guid>
      <description>I would love to self-host Email, but the oligopoly has won. I switched to Pobox when my forwarder became insufficient. This requires a handful of DNS records to route mail to our domain and fight spam.&#xA;DNS # CC-BY-SA-4.0&#xA;{ ... }: { imports = [ ./mx.nix ./spf.nix ./dkim.nix ]; } MX records # To deliver mail to my domain via Pobox, these MX records are required. It&amp;rsquo;s neat that they can be generated from Nix.</description>
    </item>
    <item>
      <title>Declarative DNS with NixOS-DNS, OctoDNS, and Hetzner</title>
      <link>https://rossabaker.com/configs/dns/</link>
      <pubDate>Sun, 03 Dec 2023 21:26:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/dns/</guid>
      <description>The services hosted at rossabaker.com require multiple DNS entries. They are declared in various parts of the Nix flake with NixOS-DNS, and synchronized to the name server with OctoDNS.&#xA;Choosing a host # rossabaker.com is registered with Namecheap, who has been a fine registrar and hosted the DNS for years. However, I don&amp;rsquo;t meet their requirements for API access. This was a frustrating discovery after getting their sandbox working, but I digress.</description>
    </item>
    <item>
      <title>Automated certificate management with ACME</title>
      <link>https://rossabaker.com/configs/acme/</link>
      <pubDate>Sat, 02 Dec 2023 16:26:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/acme/</guid>
      <description>The deeper one gets into self-hosting, the more subdomains need to be managed, usually with a certificate. abbr(Automatic Certificate Management Environment and NixOS combine to streamline this process to a few lines of code.&#xA;NixOS module # The configuration is almost straight out of the NixOS manual.&#xA;MIT&#xA;{ security.acme = { acceptTerms = true; defaults.email = &amp;#34;ross@rossabaker.com&amp;#34;; }; } Flake module # All Cromulent outputs are packaged as flake parts for consistent composition.</description>
    </item>
    <item>
      <title>A self-hosted static site with NixOS and Nginx</title>
      <link>https://rossabaker.com/configs/webserver/</link>
      <pubDate>Sat, 02 Dec 2023 11:41:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/webserver/</guid>
      <description>CC-BY-SA-4.0&#xA;Defines an HTTP server with Nginx, both for a static web site and reverse proxies for various services. I cut my teeth on Apache httpd, but nobody gets fired in the 2020s for picking Nginx. The needs are simple:&#xA;Host this static website Reverse proxies for various services Manage our certificates General configuration # The www user is used by CI to rsync the website content.&#xA;CC-BY-SA-4.0&#xA;{ config, .</description>
    </item>
    <item>
      <title>Self-hosted Git with Forgejo</title>
      <link>https://rossabaker.com/configs/forgejo/</link>
      <pubDate>Fri, 01 Dec 2023 18:25:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/forgejo/</guid>
      <description>Forgejo is a self-hosted git forge. More to say later.&#xA;NixOS module # MIT&#xA;{ config, ... }: let domain = &amp;#34;git.rossabaker.com&amp;#34;; in { services.forgejo = { enable = true; settings = { service = { DISABLE_REGISTRATION = true; }; server = { ROOT_URL = &amp;#34;https://${domain}/&amp;#34;; LANDING_PAGE = &amp;#34;explore&amp;#34;; }; }; }; services.nginx = { appendHttpConfig = &amp;#39;&amp;#39; map $uri $forgejo_access_log { default 1; /api/actions/runner.v1.RunnerService/FetchTask 0; } &amp;#39;&amp;#39;; }; services.nginx.virtualHosts.${domain} = { enableACME = true; forceSSL = true; locations.</description>
    </item>
    <item>
      <title>Monitoring a NixOS server with Netdata Cloud</title>
      <link>https://rossabaker.com/configs/netdata/</link>
      <pubDate>Thu, 23 Nov 2023 22:45:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/netdata/</guid>
      <description>&lt;p&gt;Now that I&amp;rsquo;m self-hosting several services, responsibility falls on me&#xA;to monitor them myself.  An easy way to cover the important bases on a&#xA;NixOS server is &lt;dfn&gt;Netdata&lt;/dfn&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix binary caches</title>
      <link>https://rossabaker.com/configs/nix-binary-caches/</link>
      <pubDate>Tue, 03 Oct 2023 21:51:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/nix-binary-caches/</guid>
      <description>Nix sits in a sweet spot between source and binary distribution. For esoterica, like personal projects or a patched versions of more popular application, source builds give us full control of our system. But most builds are not novel the world over, and we&amp;rsquo;d rather quickly fetch a binary than reminisce over our Gentoo days while glibc recompiles.&#xA;To realize a derivation, which is roughly Nixian for &amp;ldquo;build a package,&amp;rdquo; we:</description>
    </item>
    <item>
      <title>Cachix</title>
      <link>https://rossabaker.com/configs/cachix/</link>
      <pubDate>Tue, 19 Sep 2023 00:21:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/cachix/</guid>
      <description>Cachix is a binary cache for Nix. Three Cachix instances are of particular interest to Cromulent users1.&#xA;Cromulent&amp;rsquo;s GitHub Actions publish Linux binaries to rossabaker.cachix.org. I help maintain Typelevel Nix, which publishes to typelevel.cachix.org. A handful of our flake dependencies publish to nix-community.cachix.org. Nix module # This module may be mixed into a NixOS, Nix-Darwin, or Home Manager configuration.&#xA;CC0-1.0&#xA;{ config, lib, ... }: let cfg = config.cromulent.cache.cachix; in { imports = [ .</description>
    </item>
    <item>
      <title>Keyboard</title>
      <link>https://rossabaker.com/configs/keyboard/</link>
      <pubDate>Mon, 18 Sep 2023 23:53:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/keyboard/</guid>
      <description>The Indiana University Computer Science Department used to be housed in Lindley Hall. In the basement was a cluster of machines called &amp;ldquo;The Burrow&amp;rdquo;. There were SparcStations, if memory serves with Sun Type 5 keyboards. In any case, they taught me that the good Lord intended Control to be to the immediate left of A.&#xA;MacOS # CC0-1.0&#xA;{ flake.darwinModules.keyboard = { system.keyboard = { enableKeyMapping = true; remapCapsLockToControl = true; }; }; } </description>
    </item>
    <item>
      <title>PostgreSQL</title>
      <link>https://rossabaker.com/configs/postgresql/</link>
      <pubDate>Sat, 16 Sep 2023 23:13:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/postgresql/</guid>
      <description>Running PostgreSQL on Darwin is not as smooth an experience as the NixOS module:&#xA;The nix-darwin module doesn&amp;rsquo;t create a dedicated postgres system user. Everything runs as the local user. It doesn&amp;rsquo;t create the data directory. It doesn&amp;rsquo;t set up the logs. The initdb call doesn&amp;rsquo;t work out of the box. It creates a postgres superuser, but because it&amp;rsquo;s peer authenticated and there&amp;rsquo;s no postgres system user. We fix all of those here.</description>
    </item>
    <item>
      <title>Podman</title>
      <link>https://rossabaker.com/configs/podman/</link>
      <pubDate>Sat, 16 Sep 2023 22:51:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/podman/</guid>
      <description>I don&amp;rsquo;t have enough interest nor expertise in containers to add much to the Podman vs. Docker debate. I chose Podman for two reasons:&#xA;Podman is configurable with Nix-Darwin. Podman&amp;rsquo;s daemonless architecture is one less running root. NixOS # Enabling Podman on NixOS can be reduced to a one-liner. The default storage is overlay.&#xA;CC-BY-SA-4.0&#xA;{ flake.nixosModules.podman = { virtualisation.podman.enable = true; }; } Nix-Darwin # There&amp;rsquo;s no Docker virtualization in Nix-Darwin 1, nor is there any virtualisation config at all.</description>
    </item>
    <item>
      <title>Hyperlink</title>
      <link>https://rossabaker.com/configs/hyperlink/</link>
      <pubDate>Wed, 13 Sep 2023 23:36:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/hyperlink/</guid>
      <description>Hyperlink is a command-line link checker. It is quite fast, and is used to test the generation of this web site.&#xA;This package has been a merged to nixpkgs and is no longer maintained in Cromulent.&#xA;GitHub Actions # </description>
    </item>
    <item>
      <title>Home Manager</title>
      <link>https://rossabaker.com/configs/home-manager/</link>
      <pubDate>Fri, 08 Sep 2023 16:59:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/home-manager/</guid>
      <description>We prefer to keep a robust user environment along with a lean configurations for NixOS and nix-darwin. This keeps our environment maximally portable between those operating systems, as well as any other hosts that support the Nix package manager (e.g., Debian).&#xA;Base configuration # This is imported from preliterate times and should be broken up further.&#xA;MIT&#xA;{ moduleWithSystem, ... }: { flake.homeModules.base = moduleWithSystem( perSystem@{ pkgs, inputs&amp;#39; }: { # Curiously not a default of home-manager, but required once we # start configuring Nix otherwise.</description>
    </item>
    <item>
      <title>Python home-manager module</title>
      <link>https://rossabaker.com/configs/python/</link>
      <pubDate>Fri, 28 Jul 2023 21:51:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/python/</guid>
      <description>I have dabbled with Python for years, but have little production experience. I am used to not knowing what I&amp;rsquo;m doing, but the feeling is stronger in this module.&#xA;Package management # I am fighting hard to use Nix to manage my Python packages, but I don&amp;rsquo;t have time for a side quest while I&amp;rsquo;m getting comfortable with the language.&#xA;Micromamba # Micromamba is an alternative to Anaconda and Miniconda, neither of which installs cleanly on my Mac.</description>
    </item>
    <item>
      <title>Garnix</title>
      <link>https://rossabaker.com/configs/garnix/</link>
      <pubDate>Fri, 23 Jun 2023 00:26:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/garnix/</guid>
      <description>This integration is paused while we await alternatives to GitHub.&#xA;I have an Apple M1 for work, which is not yet supported by GitHub Actions. That&amp;rsquo;s okay, because Garnix is a great alternative.&#xA;Continuous integration # On each push to GitHub, Garnix is triggered to build:&#xA;Our default dev shell Our default nix-darwin configuration Our default Home Manager configuration At this time, we only build for aarch64-darwin with Garnix.</description>
    </item>
    <item>
      <title>Scala configuration</title>
      <link>https://rossabaker.com/configs/scala/</link>
      <pubDate>Tue, 09 May 2023 09:27:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/scala/</guid>
      <description>This configuration provides a module to Home Manager. It sets up a global SBT, a few plugins, and some gitignores relevant to Scala.&#xA;Sonatype credentials # This tells sbt where to look for our Sonatype credentials.&#xA;CC0-1.0&#xA;credentials += Credentials(Path.userHome / &amp;#34;.sbt&amp;#34; / &amp;#34;sonatype-credentials.properties&amp;#34;) Code Snippet 1: ~/.sbt/1.0/sonatype.sbt This will not work until a credentials file is added:&#xA;realm=Sonatype Nexus Repository Manager host=oss.sonatype.org user=&amp;lt;&amp;lt;username&amp;gt;&amp;gt; password=&amp;lt;&amp;lt;password&amp;gt;&amp;gt; Code Snippet 1: ~/.sbt/sonatype-credentials.properties This file contains a secret, and is not installed by our Nix derivation!</description>
    </item>
    <item>
      <title>Nix Flake</title>
      <link>https://rossabaker.com/configs/nix-flake/</link>
      <pubDate>Sun, 25 Dec 2022 22:14:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/nix-flake/</guid>
      <description>The Nix flake is the central nervous system of these configurations. It declaratively manages:&#xA;installed packages, on Linux and Darwin services, on Linux and Darwin user packages, including dot files, on Linux and Darwin custom software packages to run anywhere development environments for various projects DNS entries modules for building your own flakes Viewing the contents of the flake # The nix flake show command shows all the outputs of a flake:</description>
    </item>
    <item>
      <title>WebFinger</title>
      <link>https://rossabaker.com/configs/webfinger/</link>
      <pubDate>Tue, 22 Nov 2022 00:14:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/webfinger/</guid>
      <description>WebFinger, specified by RFC7033, is a discovery protocol over secure HTTP. It is used by Mastodon to map account identifiers to actor IDs.&#xA;This protocol is not to be confused with Finger.&#xA;The WebFinger query # To look up a Mastodon account, an HTTP GET request is constructed from the account ID. For account @ross@rossabaker.com, the WebFinger URI is https://rossabaker.com/.well-known/webfinger?resource=acct%3Aross%40rossabaker.com:&#xA;https:// always a secure HTTP request rossabaker.com the domain of the account /.</description>
    </item>
    <item>
      <title>Self-hosting a Matrix home server with Synapse</title>
      <link>https://rossabaker.com/configs/matrix/</link>
      <pubDate>Mon, 21 Nov 2022 21:03:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/matrix/</guid>
      <description>Matrix is a decentralized communication protocol. It is capable of many things, but I primarily use it for public chats on Open Source projects or private, end-to-end encrypted messaging.&#xA;Self-hosting # I am hosting Matrix on my dedicated Hetzner server. Requirements will vary by usage, but my Synapse server, a Python process, currently consumes about 350MB of RAM. Add on PostgreSQL and a reverse Nginx proxy, either of which might be shared with other services.</description>
    </item>
    <item>
      <title>Web Key Directory</title>
      <link>https://rossabaker.com/configs/web-key-directory/</link>
      <pubDate>Wed, 02 Nov 2022 23:39:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/web-key-directory/</guid>
      <description>Web Key Directory (WKD) is a standard to map email addresses to PGP public keys over HTTPS. In this guide, we&amp;rsquo;ll configure WKD for our domain.&#xA;Motivation # Independence # Public keys are traditionally submitted to one or more public key servers. Some, like pgp.mit.edu, are federated1. Others, like keys.openpgp.org, are not2. In neither case can I control whether they&amp;rsquo;re here tomorrow.&#xA;Consistent with Indieweb principles, WKD lets us self-host our identity.</description>
    </item>
    <item>
      <title>Configuring Git for literate programming</title>
      <link>https://rossabaker.com/configs/git-repository/</link>
      <pubDate>Wed, 24 Aug 2022 15:04:00 +0000</pubDate>
      <guid>https://rossabaker.com/configs/git-repository/</guid>
      <description>My personal Git repository, Cromulent, contains the source for various projects, such as configurations and the contents of this website.&#xA;Due to literate programming, much of the source code &amp;ldquo;weaves&amp;rdquo; code and documentation in Org. Most tools aren&amp;rsquo;t Org interpreters, so the Org must be &amp;ldquo;tangled&amp;rdquo; 1 back into separate files for general consumption. This process requires a bit of extra care around Git.&#xA;Three types of files # Original sources # Original sources are the minimal set of files that can&amp;rsquo;t be derived from other sources as part of the build process.</description>
    </item>
  </channel>
</rss>
