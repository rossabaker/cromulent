#+title: Matrix home server
#+description: Documentation for the Matrix home server at rossabaker.com
#+date: <2022-05-05 Thu 17:27>
#+lastmod: <2022-11-15 Tue 19:37>
#+filetags: Matrix Synapse

I run my [[https://matrix.to/#/@ross:rossabaker.com][Matrix presence]] on a personal Synapse server in Google Cloud.
Everything described here runs in the free tier, but I am not
responsible if you run this and get a bill.

#+begin_warning
  <2022-06-02 Thu>: I got charged $0.02 for storage last month.
#+end_warning

#+begin_info
  <2022-11-15 Tue 19:15>: I plan to move this to Hetzner Cloud.
#+end_info

* Terraform

~20.03~ is disappointingly old, but it's the newest one I can find
publicly. I upgraded this on the instance after it was created. It
would be good to get a fresher image on GCS, but it'll cost a few
pennies.

#+begin_src terraform /*:tangle main.tf*/
  module "nixos_image" {
    source = "github.com/tweag/terraform-nixos/google_image_nixos"
    nixos_version = "20.03"
  }
#+end_src

I created this project manually.  To create a project directly, we'd
need another "admin" project to bootstrap things.  The
~"rossabaker-348417"~ is repeated frequently and belongs in a
variable.

#+begin_src terraform /*:tangle main.tf*/
  provider "google" {
    project = "rossabaker-348417"
    region  = "us-central1"
    zone    = "us-central1-c"
  }
#+end_src

These APIs need to be enabled for subsequent calls to work.

#+begin_src terraform /*:tangle main.tf*/
  resource "google_project_service" "compute" {
    project = "rossabaker-348417"
    service = "compute.googleapis.com"
  }

  resource "google_project_service" "oslogin" {
    project = "rossabaker-348417"
    service = "oslogin.googleapis.com"
  }
#+end_src

~enable-oslogin~ lets us log into the machine as our Google identity.
The ~nix-configuration~ is a handy way to expose the NixOS
configuration, since we don't have a custom image to bake it into.

#+begin_src terraform /*:tangle main.tf*/
  resource "google_compute_instance" "vm_instance" {
    name         = "abe"
    machine_type = "e2-micro"

    boot_disk {
      initialize_params {
        image = module.nixos_image.self_link
        size  = 10
      }
    }

    metadata = {
      enable-oslogin = "TRUE"
      nix-configuration = file("configuration.nix")
    }

    network_interface {
      # A default network is created for all GCP projects
      network = "default"
      access_config {
      }
    }

    tags = ["http-server"]
  }
#+end_src

To refresh the configuration on the instance, we can run:

#+begin_src sh
  curl "http://metadata.google.internal/computeMetadata/v1/instance/attributes/nix-configuration" -H "Metadata-Flavor: Google" | sudo tee /etc/nixos/configuration.nix && sudo nixos-rebuild --upgrade switch
#+end_src

The ~http-server~ tag links it up with the VM instance above so the
firewall rules apply.  In hindsight, port ~443~ probably would have
been sufficient here.

#+begin_src terraform /*:tangle main.tf*/
  resource "google_compute_firewall" "http-server" {
    name    = "http-server"
    network = "default"

    allow {
      protocol = "tcp"
      ports    = ["80", "443"]
    }

    source_ranges = ["0.0.0.0/0"]
    target_tags   = ["http-server"]
  }
#+end_src

Make ourselves an admin:

#+begin_src terraform /*:tangle main.tf*/
  resource "google_project_iam_binding" "os-login-admin-users" {
    project = "rossabaker-348417"
    role = "roles/compute.osAdminLogin"

    members = [
      "user:rossabaker@gmail.com"
    ]
  }
#+end_src

Finally, lock our dependencies:

#+begin_src hcl /*:tangle .terraform.lock.hcl*/
  provider "registry.terraform.io/hashicorp/google" {
    version = "4.19.0"
    hashes = [
      "h1:Qom1Evv0g66L2+oEiDzc3vgSKD2kUkpGcQt3R1m2Kdc=",
      "zh:17aa6d222e00259bcf08a664a3a617ed1e41a6ab3428316be3b1aa997baa3642",
      "zh:3e357ff59d6e75eef4b488db2a13105b7aa8a2bf71e27cb7fdcabfb30e6da5d7",
      "zh:8af83e35bdda0df0f004c6294edc1d4119e457fab6eb7a73606529e245d8ae31",
      "zh:9047896a8c7d3a9d749acdecaa7e5bc5589b2cbe54afeb30466a21597440d38f",
      "zh:90dc3dbb28c368e76504f370c5f2d6887284369b072e4b74d0ad49eb87225ec8",
      "zh:b3918565d747c92db62be37a91bdcd0a330334b25843746b85fe8279f7aa6c0b",
      "zh:da845ee82ce4639bf348e9ac6e8f6a229c413a7e3d6a2e67a50c49561901d5ce",
      "zh:db856e3830052ecc6b6ee5874bc9f7e97dcbbd9aaea6fc65e536121158cde630",
      "zh:dc28a6f24a2aea6f7ddbfa4e69bc31796ceff88f0fefec99af2d1ee0f043af6c",
      "zh:e5c05fee01c4c22077073155f0718c44e70983b865c6705e5e3d0f84df21fd8b",
      "zh:fa7625309c9ed9df92657a3e398c827874415a885e52b13c4d6451265f5de485",
    ]
  }
#+end_src

*** Nix

Most of this configuration comes from the [[https://nixos.org/manual/nixos/stable/index.html#module-services-matrix-synapse][Synapse Homeserver]] section
of the NixOS manual.

#+begin_src nix /*:tangle default.nix*/
  { pkgs, lib, modulesPath, ... }:
  {
    imports = [
      "${toString modulesPath}/virtualisation/google-compute-image.nix"
    ];

    networking = {
      hostName = "abe";
      domain = "gcp.rossabaker.com";
    };
    networking.firewall.allowedTCPPorts = [ 80 443 ];

    security.acme.email = "ross@rossabaker.com";
    security.acme.acceptTerms = true;

    services.postgresql.enable = true;
    services.postgresql.initialScript = pkgs.writeText "synapse-init.sql" ''
      CREATE ROLE "matrix-synapse" WITH LOGIN PASSWORD 'synapse';
      CREATE DATABASE "matrix-synapse" WITH OWNER "matrix-synapse"
        TEMPLATE template0
        LC_COLLATE = "C"
        LC_CTYPE = "C";
    '';

    services.nginx = {
      enable = true;
      # only recommendedProxySettings and recommendedGzipSettings are strictly required,
      # but the rest make sense as well
      recommendedTlsSettings = true;
      recommendedOptimisation = true;
      recommendedGzipSettings = true;
      recommendedProxySettings = true;

      virtualHosts = {
        # Reverse proxy for Matrix client-server and server-server communication
        "matrix.rossabaker.com" = {
          enableACME = true;
          forceSSL = true;

          # Or do a redirect instead of the 404, or whatever is appropriate for you.
          # But do not put a Matrix Web client here! See the Element web section below.
          locations."/".extraConfig = ''
            return 404;
          '';

          # forward all Matrix API calls to the synapse Matrix homeserver
          locations."/_matrix" = {
            proxyPass = "http://[::1]:8008"; # without a trailing /
          };
        };
      };
    };
    services.matrix-synapse = {
      enable = true;
      settings = {
        server_name = "rossabaker.com";
        listeners = [
          {
            port = 8008;
            bind_addresses = [ "::1" ];
            type = "http";
            tls = false;
            x_forwarded = true;
            resources = [
              {
                names = [ "client" "federation" ];
                compress = false;
              }
            ];
          }
        ];
      };
    };
  }
#+end_src

The password in ~initialScript~ is gross, but NixOS' PostgreSQL
defaults to peer authentication for domain sockets, and we don't
expose Postgres outside the localhost.  Just to be extra safe, I
manually ran:

#+begin_src sql
  ALTER ROLE "matrix-synapse" PASSWORD null;
#+end_src

* Federation

Federation is configured via the ~.well-known~ directory.  All we need
are two static files:

*** ~/.well-known/matrix/server~

#+begin_src json :tangle (expand-file-name ".well-known/matrix/server" ross-www/public-html-directory) :eval no :mkdirp yes
  {
    "m.server": "matrix.rossabaker.com:443"
  }
#+end_src

*** ~/.well-known/matrix/client~

#+begin_src json :tangle (expand-file-name ".well-known/matrix/client" ross-www/public-html-directory) :eval no :mkdirp yes
  {
    "m.homeserver" = {
      "base_url" = "https://matrix.rossabaker.com"
    },
    "m.identity_server" = {
       "base_url" = "https://vector.im"
    }
  }
#+end_src
