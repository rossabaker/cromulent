#+title: Experimenting with ox-publish
#+PROPERTY: header-args      :results silent
#+PROPERTY: header-args:nix  :eval no
#+LAST_MODIFIED: <2023-05-25 Thu 14:21>

#+begin_warning
This is an experiment.  It might replace ox-hugo.  It might not.  It's
not live yet.
#+end_warning

* Nix build

The website is a package within our flake.  To avoid [[https://nixos.wiki/wiki/Import_From_Derivation][Import From
Derivation]], this Nix expression needs to be [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] into the Git
repository.

The build loads this document and runs ~org-babel-execute-buffer~.
While we are porting from the old ox-hugo site, this renders a
Hugo site to =tmp/hugo=.  We then run Hugo to create the site.

The generated HTML is validated with [[https://github.com/svenkreiss/html5validator][html5validator]] in a check phase.

Finally, the =public/= directory rendered by Hugo is copied to the
derivation output.

#+begin_src nix :tangle ../../../gen/website/default.nix
  { src, emacs29, gnupg, hugo, html5validator, stdenv }:

  let
    siteEmacs = emacs29.pkgs.withPackages (epkgs: [
      epkgs.dash
      epkgs.esxml
      epkgs.ox-hugo
    ]);
  in
  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    nativeBuildInputs = [
      siteEmacs
      gnupg
      hugo
      html5validator
    ];
    buildPhase = ''
      cd ..
      export PATH=${gnupg}/bin:$PATH
      # https://emacs.stackexchange.com/a/70847
      ${siteEmacs}/bin/emacs --batch -l ob -l ob-shell --eval "
	(let ((org-confirm-babel-evaluate nil))
	  (with-current-buffer (find-file-noselect \"src/org/configs/website.org\")
	    (org-babel-execute-buffer)
	    (save-buffer)))
      "
      ${hugo}/bin/hugo --config tmp/hugo/config.toml
    '';

    doCheck = true;
    checkPhase = ''
      html5validator --log INFO --root tmp/hugo/static
    '';

    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

** Try it locally

To build the site locally into ~./result~, run:

#+begin_src sh :tangle no
  nix build .#website
#+end_src

* Setup

This document defines an Emacs script that generates =rossabaker.com=.
We'll need a few libraries.

#+begin_src emacs-lisp
  (require 'dash)
  (require 'ox)
  (require 'esxml)
#+end_src

* Template

Lisp is a delightful templating language for HTML:

- S-expressions naturally translate into HTML.
- It's a real coding language for logic
- The macro system makes it trivial to interweave markup and logic.

We use the [[https://github.com/tali713/esxml][esxml]] library.

** Base template

#+begin_src emacs-lisp
  (defun rab/html-template (contents info)
    (let ((title (org-export-data (plist-get info :title) info)))
      (concat
       "<!DOCTYPE html>\n"
       (esxml-to-xml
	`(html ()
	  (head ()
	   (title () ,title))
	  (body ()
	   ,(rab/site-header)
	   (main () (raw-string ,contents))
	   ,(rab/site-footer)))))))
#+end_src

** Site header

#+begin_src emacs-lisp
  (defun rab/site-header ()
    `(header ()
      (strong () (a ((href . "/")) "rossabaker"))
      (p () "A perfectly cromulent developer.")
      (nav ()
       (ul ()
	,@(mapcar (lambda (entry)
		    (let ((href (car entry))
			  (body (cdr entry)))
		     `(li () (a ((href . ,href)) ,body))))
	   '(("/configs" . "Configs")))))))
#+end_src

** Site footer

#+begin_src emacs-lisp
  (defun rab/site-footer ()
    '(footer ()
      (address ((class . "h-card vcard"))
       ;; (img ((class . "u-photo")
       ;; 	   (alt . "Profile photo of Ross A. Baker")
       ;; 	   (src . "/img/profile.jpg")))
       (a ((class . "u-url u-uid p-name")
	   (href . "https://rossabaker.com/"))
	(span ((class . "p-given-name")) "Ross")
	" "
	(span ((class . "p-additional-name")) (abbr () "A."))
	" "
	(span ((class . "p-family-name")) "Baker"))
       " "
       (small () (span ((class . "u-pronoun")) "(he/him)"))
       (br)
       (ul ()
	(li () (a ((href . "mailto:ross@rossabaker.com"))
		(span ((class . "fa fa-envelope-o")) "Email")))
	(li () (a ((href . "https://github.com/rossabaker") (rel . "me"))
		(span ((class . "fa fa-github")) "GitHub")))
	(li () (a ((href . "https://matrix.to/#/@ross:rossabaker.com") (rel . "me"))
		(span ((class . "fa fa-matrix-org")) "Matrix")))
	(li () (a ((href . "https://social.rossabaker.com") (rel . "me"))
		(span ((class . "fa fa-mastodon")) "Fediverse")))))))
#+end_src

* Backend

** Derived from ox-html

Org Mode exports require a backend.  We dervice from the stock [[https://orgmode.org/manual/HTML-Export.html][ox-html]]
backend, overriding components as necessary to inject our own templates.

#+begin_src emacs-lisp
  (org-export-define-derived-backend 'rab/html 'html
    :translate-alist
    '((template . rab/html-template)))
#+end_src

** Pretty URLs

"Pretty URLs" (e.g., ~/configs/website/~ instead of
~/configs/website.html~) require a bit of jiggery pokery unless we
want all our files named ~index.org~.

We need to locally redefine =org-export-output-file-name= to turn the
file's base name into a directory and inject the =index= name.

#+begin_src emacs-lisp
  (defun rab/publish-to-html (plist filename pub-dir)
    (let ((output-dir (concat pub-dir
			      (->> filename
				   file-name-nondirectory
				   file-name-sans-extension
				   file-name-as-directory))))
      (cl-letf (((symbol-function 'org-export-output-file-name)
		 (lambda (extension &optional subtreep pub-dir)
		   (concat output-dir "index" extension))))
	(org-publish-org-to 'rab/html filename
			    (concat (when (> (length org-html-extension) 0) ".")
				    (or (plist-get plist :html-extension)
					org-html-extension
					"html"))
			    plist
			    output-dir))))
#+end_src

* Publishing

** Legacy ox-hugo build

As mentioned earlier, we're migrating from an [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] setup.  We need
export all the pages from that document before our own export.

#+begin_src emacs-lisp
  (require 'ox-hugo)
  (require 'ob-shell)
  (with-current-buffer (find-file-noselect "../rossabaker.org")
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)
      (org-hugo-export-wim-to-md t)))
#+end_src

** ox-html setup

This will be the main build moving forward.

#+begin_src emacs-lisp
  (setq-local user-full-name "Ross A. Baker"
	      org-publish-timestamp-directory "../../../tmp/org-timestamps")

  (setq org-publish-project-alist
	`(("org"
	   :base-directory "../"
	   :recursive t
	   :exclude ,(rx (or (seq (or "config" "img" "talks" "tmp") "/" (* nonl)) "rossabaker.org"))
	   :publishing-function rab/publish-to-html
	   :publishing-directory "../../../tmp/hugo/static")))

  (org-publish-all)
#+end_src

* Credits

This process is heavily inspired by the [[https://systemcrafters.net/live-streams/may-12-2023/][System Crafters]] redesign.

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
