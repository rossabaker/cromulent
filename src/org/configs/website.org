#+title: Website generator with Org and Nix
#+PROPERTY: header-args      :results silent
#+PROPERTY: header-args:nix  :eval no
#+LAST_MODIFIED: [2023-06-11 Sun 15:12 EDT]

* Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:

This document defines an Emacs script that generates =rossabaker.com=.
We'll need a few libraries.

#+begin_src emacs-lisp
  (require 'dash)
  (require 'esxml)
  (require 'git-link)
  (require 'htmlize)
  (require 'ob-shell)
  (require 'ox)
#+end_src

It's also helpful to know the root, whether we're in Nix or an
interactive session.

#+begin_src emacs-lisp
  (defvar rab/site--root (or (getenv "NIX_BUILD_TOP")
			     (project-root (project-current))
			     "../"))
  (defun rab/site-root (name)
    "Expands NAME relative to the project root.  Works in Nix or
  interactively."
    (expand-file-name name rab/site--root))
#+end_src

* Pretty URLs
:PROPERTIES:
:CUSTOM_ID: pretty-urls
:END:

"Pretty URLs" (e.g., ~/configs/website/~ instead of
~/configs/website.html~) require a bit of jiggery pokery unless we
want all our files named ~index.org~.

First, we need a way to convert a source filename to a directory
relative to where we publish.

#+begin_src emacs-lisp
  (defun rab/site-pretty-url-output-dir (filename pub-dir)
    (if (string= "index.org" (file-name-nondirectory filename))
	pub-dir
      (concat pub-dir
	      (->> filename
		   file-name-nondirectory
		   file-name-sans-extension
		   file-name-as-directory))))
#+end_src

When publishing, we need to locally redefine
=org-export-output-file-name= to inject =index= into the filename.

#+begin_src emacs-lisp
  (defun rab/site-publish (plist filename pub-dir)
    (let ((output-dir (rab/site-pretty-url-output-dir filename pub-dir)))
      (cl-letf (((symbol-function 'org-export-output-file-name)
		 (lambda (extension &optional subtreep pub-dir)
		   (concat output-dir "index" extension))))
	(org-publish-org-to 'rab/site filename
			    (concat (when (> (length org-html-extension) 0) ".")
				    (or (plist-get plist :html-extension)
					org-html-extension
					"html"))
			    plist
			    output-dir))))
#+end_src

The jiggery pokery also changes how we render links.  For links to
local org files, we need to prepend ~../~ to get out of the artificial
~index.html~ we're in, and then strip the ~.org~ extension from the
target to point at the ~index.html~ _that_ will be in.

#+begin_src emacs-lisp
  (defun rab/site-link (link contents info)
    "If LINK is an org file reference, strip the extension from the
  path so it points to the exported index.html."
    (when (and (string= 'file (org-element-property :type link))
	       (string= "org" (file-name-extension (org-element-property :path link))))
      (let ((prefix (if (string= "index.org" (file-name-nondirectory (buffer-file-name)))
			""
		      "../")))
	(org-element-put-property
	 link :path
	 (->> link
	      (org-element-property :path)
	      file-name-sans-extension
	      (replace-regexp-in-string (rx (or bos "/") "index" eos) "")
	      (format "%s%s/" prefix)))))
    (org-export-with-backend 'html link contents info))
#+end_src

* Stable anchors
:PROPERTIES:
:CUSTOM_ID: stable-anchors
:END:

Org generates non-deterministic anchors for headers, but respects the
~CUSTOM_ID~ property.  Instead of something like ~#orgae149c8~, we'd
like this section to have a "slug" id, like ~stable-anchors~.

#+begin_src emacs-lisp
  (defun rab/site-slug (title)
    "Converts TITLE to a 'slug' appropriate for URI anchors."
    (->> title
	 s-downcase
	 (replace-regexp-in-string (rx (not (in word space ?- ?_))) "")
	 (replace-regexp-in-string (rx (one-or-more (in space ?_ ?-))) "-")
	 (replace-regexp-in-string (rx bos (one-or-more ?-)) "")
	 (replace-regexp-in-string (rx (one-or-more ?-) eos) "")))
#+end_src

We only want to generate a slug for headlines that have no ~CUSTOM_ID~.

#+begin_src emacs-lisp
  (defun rab/site-put-slug-as-custom-id ()
    "Puts a CUSTOM_ID from a slug of the current headline, unless
  already present.  This is useful for stable URI anchors."
    (unless (org-entry-get nil "CUSTOM_ID")
      (->> (org-heading-components)
	   (nth 4)
	   rab/site-slug
	   (org-entry-put nil "CUSTOM_ID"))))
#+end_src

We want a convenient way to generate them for the entire document.

#+begin_src emacs-lisp
  (defun rab/site-put-slugs-as-custom-id ()
    "Puts a CUSTOM_ID from a slug of the current headline, unless
  already present.  This is useful for stable URI anchors."
    (interactive)
    (org-map-entries (lambda () (rab/site-put-slug-as-custom-id))))
#+end_src

* Sitemaps
:PROPERTIES:
:CUSTOM_ID: sitemaps
:END:

Org has [[https://orgmode.org/manual/Site-map.html][built-in sitemap support]].  The problem is, it generates source
in the same directory, when Org is perfectly capable of calculating it
on the fly!

#+name: project-sitemap
#+begin_src emacs-lisp :eval no
  (let* ((file-name (buffer-file-name))
	 (file-dir (file-name-directory file-name))
	 (project (org-publish-get-project-from-filename (buffer-file-name) 'up))
	 (pages (org-publish-get-base-files project)))
    (mapcar (lambda (page)
	      (let ((title (org-publish-find-title page project)))
		(org-link-make-string (concat "./" (file-relative-name page file-dir)) title)))
	    (->> pages
		 (remove file-name)
		 (seq-filter (lambda (f)
			       (let ((tags (org-publish-find-property f :filetags 'rab/site)))
				 (not (member "deprecated" tags))))))))
#+end_src

To include it in an index page:

#+begin_src org :eval no
  ,#+call: path/to/website.org:project-sitemap()
#+end_src

* Templates
:PROPERTIES:
:CUSTOM_ID: templates
:END:

Lisp is a delightful templating language for HTML:

- S-expressions naturally translate into HTML.
- It's a real coding language for logic
- The macro system makes it trivial to interweave markup and logic.

We use the [[https://github.com/tali713/esxml][esxml]] library.

** Base template
:PROPERTIES:
:CUSTOM_ID: base-template
:END:

#+begin_src emacs-lisp
  (defun rab/site-html-template (contents info)
    (let* ((title (org-export-data (plist-get info :title) info)))
      (concat
       "<!DOCTYPE html>\n"
       (esxml-to-xml
	`(html ()
	  (head ()
	   ,@(mapcar (lambda (css)
		       `(link ((rel . "stylesheet")
			       (type . "text/css")
			       (href . ,(format "/css/%s.css" css)))))
	      '("baseline" "htmlize"))
	   ;; The default meta tags rendering is ... fine
	   (raw-string ,(org-html--build-meta-info info)))
	  (body ()
	   ,(rab/site-header)
	   (raw-string ,contents)
	   ,(rab/site-footer)))))))
#+end_src

** Site header
:PROPERTIES:
:CUSTOM_ID: site-header
:END:

#+begin_src emacs-lisp
  (defun rab/site-header ()
    `(header ()
      (strong () (a ((href . "/")) "rossabaker"))
      (p () "A perfectly cromulent developer.")
      (nav ()
       (ul ()
	,@(mapcar (lambda (entry)
		    (let ((href (car entry))
			  (body (cdr entry)))
		     `(li () (a ((href . ,href)) ,body))))
	   '(("/configs" . "Configs")))))))
#+end_src

** Main
:PROPERTIES:
:CUSTOM_ID: main
:END:

#+begin_src emacs-lisp
  (defun rab/site-inner-html-template (contents info)
    (esxml-to-xml (rab/site-main contents info)))

  (defun rab/site-main (contents info)
    (let ((title (org-export-data (plist-get info :title) info)))
      `(main ()
	,(cl-list* 'article ()
	  (delq nil
	   (list
	    `(header ()
	      (h1 () ,title))
	    (when-let* ((depth (plist-get info :with-toc))
			(toc (org-html-toc depth info)))
	     `(details ()
	       (summary () "Table of Contents")
	       (raw-string ,toc)))
	    `(raw-string ,contents)
	    (when-let (footnotes (org-html-footnote-section info))
	     `(footer ()
	       (raw-string ,footnotes)))))))))
#+end_src

** Site footer
:PROPERTIES:
:CUSTOM_ID: site-footer
:END:

=git-link= is close to what we want, except it:
- Appends to the kill-ring instead of returning a value
- Doesn't know about edit

This is hardcoded to GitHub, but, alas, aren't we all?

#+begin_src emacs-lisp
  (defun rab/site-github-edit-link ()
    "Return a link to edit this file on GitHub."
    (let ((filename (git-link--relative-filename))
	  (branch (git-link--branch)))
      (format "https://github.com/rossabaker/cromulent/edit/%s/%s"
	      branch
	      (url-hexify-string filename (url--allowed-chars (cons ?/ url-unreserved-chars))))))
#+end_src

#+begin_src emacs-lisp
  (defun rab/site-footer ()
    `(footer ()
      (address ((class . "h-card vcard"))
       ;; (img ((class . "u-photo")
       ;; 	   (alt . "Profile photo of Ross A. Baker")
       ;; 	   (src . "/img/profile.jpg")))
       (a ((class . "u-url u-uid p-name")
	   (href . "https://rossabaker.com/"))
	(span ((class . "p-given-name")) "Ross")
	" "
	(span ((class . "p-additional-name")) (abbr () "A."))
	" "
	(span ((class . "p-family-name")) "Baker"))
       " "
       (small () (span ((class . "u-pronoun")) "(he/him)"))
       (ul ()
	(li () (a ((href . "mailto:ross@rossabaker.com"))
		(span ((class . "fa fa-envelope-o")) "Email")))
	(li () (a ((href . "https://github.com/rossabaker") (rel . "me"))
		(span ((class . "fa fa-github")) "GitHub")))
	(li () (a ((href . "https://matrix.to/#/@ross:rossabaker.com") (rel . "me"))
		(span ((class . "fa fa-matrix-org")) "Matrix")))
	(li () (a ((href . "https://social.rossabaker.com") (rel . "me"))
		(span ((class . "fa fa-mastodon")) "Fediverse"))))
       (a ((href . ,(rab/site-github-edit-link))) "Edit on GitHub"))))
#+end_src

* Style
:PROPERTIES:
:CUSTOM_ID: style
:END:

Much of our styling comes from the [[file:css.org][CSS baseline]].  Some specific
branding and tweaks specific to this site follow.

** Code highlighting
:PROPERTIES:
:CUSTOM_ID: code-highlighting
:END:

We use [[https://github.com/hniksic/emacs-htmlize][htmlize]] for code highlighting.  It's nicer to render CSS classes
and externalize the style.

#+begin_src emacs-lisp
  (setq org-html-htmlize-output-type 'css)
#+end_src

Extract all the fonts known to Emacs into a stylesheet.  This couples
the website to the Emacs theme, but it's my site and my choice of
theme, so neener neener.

#+begin_aside
This should run as part of the site build, but the text properties of
the faces disappear in batch mode.  It doesn't change that often, so
we grudgingly check it in.
#+end_aside

#+begin_src emacs-lisp
  (defun rab/site-generate-htmlize-css ()
    (interactive)
    (org-html-htmlize-generate-css)
    (with-current-buffer "*html*"
      (let ((file (rab/site-root "src/hugo/static/css/htmlize.css")))
	(save-excursion
	  (goto-char (point-min))
	  (when-let ((end (search-forward "<!--")))
	    (delete-region (point-min) end))
	  (goto-char (point-max))
	  (when-let ((start (search-backward "-->")))
	    (delete-region start (point-max)))
	  (goto-char (point-min))
	  (cl-flet ((delete-css-rule (name)
		      (when-let ((start (and (search-forward (format " %s {" name))
					     (progn (beginning-of-line) (point))))
				 (end (progn (end-of-line)
					     (backward-up-list)
					     (forward-sexp)
					     (point))))
			(delete-region start end))))
	    (delete-css-rule "a")
	    (delete-css-rule "a:hover"))
	  (mkdir (file-name-directory file) t)
	  (write-file file)))))
#+end_src

* Tags
:PROPERTIES:
:CUSTOM_ID: tags
:END:
* Backend
:PROPERTIES:
:CUSTOM_ID: backend
:END:

To hook our templates into Org export, we derive from the stock
[[https://orgmode.org/manual/HTML-Export.html][ox-html]] backend.

#+begin_src emacs-lisp
  (org-export-define-derived-backend 'rab/site 'html
    :translate-alist
    '((template . rab/site-html-template)
      (link . rab/site-link)
      (inner-template . rab/site-inner-html-template))
    :options-alist
    '((:filetags "FILETAGS" nil nil split)))
#+end_src

* Publishing
:PROPERTIES:
:CUSTOM_ID: publishing
:END:

** Legacy ox-hugo build
:PROPERTIES:
:CUSTOM_ID: legacy-ox-hugo-build
:END:

As mentioned earlier, we're migrating from an [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] setup.  We need
export all the pages from that document before our own export.

#+begin_src emacs-lisp
  (require 'ox-hugo)
  (require 'ob-shell)
  (with-current-buffer (find-file-noselect (rab/site-root "src/org/rossabaker.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)
      (org-hugo-export-wim-to-md t)))
#+end_src

** ox-html setup
:PROPERTIES:
:CUSTOM_ID: ox-html-setup
:END:

This will be the main build moving forward.

#+begin_src emacs-lisp
  (setq-local user-full-name "Ross A. Baker"
	      org-publish-timestamp-directory (rab/site-root "tmp/org-timestamps"))

  (setq org-publish-project-alist
	`(("rossabaker.com:configs"
	   :base-directory ,(rab/site-root "src/org/configs")
	   :recursive t
	   :exclude ,(rx (or (seq (or "config" "img" "talks" "tmp") "/" (* nonl)) "rossabaker.org"))
	   :publishing-function rab/site-publish
	   :publishing-directory ,(rab/site-root "tmp/hugo/static/configs")
	   :html-doctype "html5"
	   :html-html5-fancy t
	   :html-container "section")))

  (org-publish-all t)
#+end_src

* Nix build
:PROPERTIES:
:CUSTOM_ID: nix-build
:END:

The website is just another package within our flake.  The derivation
loads this document and runs ~org-babel-execute-buffer~.  While we are
porting from the old ox-hugo site, this renders a Hugo site to
=tmp/hugo=.  We then run Hugo to create the site.

We run [[https://github.com/svenkreiss/html5validator][html5validator]] and [[https://github.com/lycheeverse/lychee][lychee]] to validate HTML and links in the
check phase.

Finally, the =public/= directory rendered by Hugo is copied to the
derivation output.

#+begin_src nix :tangle `,(rab/site-root "gen/website/default.nix")
  { src, emacs29, gnupg, hugo, html5validator, lychee, stdenv }:

  let
    siteEmacs = emacs29.pkgs.withPackages (epkgs: [
      epkgs.dash
      epkgs.esxml
      epkgs.git-link
      epkgs.htmlize
      epkgs.ox-hugo
    ]);
  in
  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    nativeBuildInputs = [
      siteEmacs
      gnupg
      hugo
      html5validator
      lychee
    ];
    buildPhase = ''
      cd ..
      export PATH=${gnupg}/bin:$PATH

      # https://emacs.stackexchange.com/a/70847
      ${siteEmacs}/bin/emacs --batch -l ob -l ob-shell --eval "
	(let ((org-confirm-babel-evaluate nil))
	  (with-current-buffer (find-file-noselect \"src/org/configs/website.org\")
	    (org-babel-execute-buffer)
	    (save-buffer)))
      "
      ${hugo}/bin/hugo --config tmp/hugo/config.toml
    '';

    doCheck = true;
    checkPhase = ''
      html5validator --log INFO --root tmp/hugo/static
      lychee --offline tmp/hugo/static
    '';

    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

To avoid [[https://nixos.wiki/wiki/Import_From_Derivation][Import From Derivation]], this Nix expression is [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] and
[[file:git-repository.org::#committed-generated-sources][committed as generated source]].

** Try it locally
:PROPERTIES:
:CUSTOM_ID: try-it-locally
:END:

To build the site locally into ~./result~, run:

#+begin_src sh :tangle no
  nix build .#website
#+end_src

* Credits
:PROPERTIES:
:CUSTOM_ID: credits
:END:

This process is heavily inspired by the [[https://systemcrafters.net/live-streams/may-12-2023/][System Crafters]] redesign.

* TODO Outstanding work                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: outstanding-work
:END:

- [ ] RSS feed
- [ ] Minimize HTML
- [ ] Cache busting

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
