#+TITLE: Git Repository
#+PROPERTY: header-args:gitignore :tangle ../../../.gitignore
#+PROPERTY: header-args:gitattributes :tangle ../../../.gitattributes
#+LAST_MODIFIED: <2023-05-25 Thu 23:54>

My [[https://github.com/rossabaker/cromulent][personal Git repository]] hosts my configurations and this web site.
Most of it is sourced from Org Mode, but most tools don't read Org
directly.  We therefore need to commit some [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] sources to
interoperate with various tools.  We must deal with three sorts of
files.

*** Original sources
:PROPERTIES:
:CUSTOM_ID: original-sources
:END:

This is the minimal set of files from which all other files can be
derived.  As much as possible, we keep them in ~src/~.

*** Ephemeral files
:PROPERTIES:
:CUSTOM_ID: ephemeral-files
:END:

Ephemeral files can be tangled on demand and disposed of at will.
Development processes may need them, but they can be comfortably
recreated from the original sources.  An example of these are the Hugo
outputs when [[file:website.org::#try-it-locally][locally building the site]].

We put as many of them as we can in ~tmp/~ for organization.  The best
way to handle them is with a [[https://git-scm.com/docs/gitignore][gitignore]].

#+begin_src gitignore
  /tmp/
#+end_src

Nix builds create a ~result~ symlink by default that should also be
ignored.

#+begin_src gitignore
  /result
#+end_src

*** Committed, generated sources
:PROPERTIES:
:CUSTOM_ID: committed-generated-sources
:END:

There are files that are neither original, nor can they be generated
on demand from originals.  This class of files is generally to be
avoided, but with the right mitigation, we can live with it and still
live in our Org Mode bubble within a world that isn't ready for it.

**** Location
:PROPERTIES:
:CUSTOM_ID: location
:END:

Some files must be tangled to specific locations in the repository to
be loaded by other tools.  For example, Git looks for ~.gitignore~ and
in the project root.

Other files need to be tangled for non-Org tooling, but are imported
by something else, like the [[file:website.org::#nix-build][Nix package for our website]], which is
imported into ~flake.nix~.  We stow all such files we can in the
~gen/~ directory.

**** Problems and mitigation
:PROPERTIES:
:CUSTOM_ID: problems-and-mitigation
:END:

***** Desycnhronization
:PROPERTIES:
:CUSTOM_ID: desycnhronization
:END:

The tangled source may be desynchronized with the Org Mode source.  We
could check for this with a GitHub workflow, but don't yet.

***** Bloated diffs
:PROPERTIES:
:CUSTOM_ID: bloated-diffs
:END:

When we commit tangled sources, each hunk of the diff may be
duplicated between the original source and the tangled source.  This
is distracting in review.  We can set a gitattribute of [[https://git-scm.com/docs/gitattributes#_diff][=-diff=]], which
treats the specified file as binary.  It's a little white lie, but
it prevents repeating each hunk.

A second problem is that a larger diff has a larger surface area for
merge conflicts.  [[https://git-scm.com/docs/gitattributes#_merge][=-merge=]] avoids 3-way merges, but still flags the
file as a conflict.  Typically the file needs to be regenerated
in these cases.

Finally, setting [[https://github.com/github/linguist/blob/97bc889ce840208652bf09b45f3b7859de43fe8e/docs/overrides.md#generated-code][=linguist-generated=]] suppresses these files from
rendered diffs.  It also excludes them from GitHub language stats.

We set all these gitattributes for all tangled sources.  The
~.gitattributes~ file itself gets gitattributes set on it!

#+begin_src gitattributes
  gen/**          -diff -merge linguist-generated=true
  .gitignore      -diff -merge linguist-generated=true
  .gitattributes  -diff -merge linguist-generated=true
  flake.nix       -diff -merge linguist-generated=true
  flake.lock      -diff -merge linguist-generated=true
  garnix.yaml     -diff -merge linguist-generated=true
#+end_src
