#+TITLE: Ross A. Baker's Emacs Configuration
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: html-toc:th

#+TOC: headlines 2

* Preface

** Structure

Configuration of the built-ins more or less follows the structure of
the Emacs manual.  Some concessions are made to bootstrapping packages
critical to the configuration, or getting things to run early.

** Inspirations

*** Rational Emacs

I have been following the [[https://www.youtube.com/c/systemcrafters][System Crafters]] YouTube channel.  They have
started the [[https://github.com/SystemCrafters/rational-emacs][Rational Emacs]] base configuration.  I have experimented
with and eschewed various starter kits over the years, and don't
particularly want the dependency here, but I like their style.

* Startup

** Early init

From preliterate times.  Note that [[*General][~general-setq~]] is not yet
available.

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)

;; All our packages come from Nix
(setq package-enable-at-startup nil
      package-archives nil)

(provide 'early-init)
;;; early-init.el ends here
#+end_src

** Packages

*** Ensuring packages

Most of this config is broken down into [[https://github.com/jwiegley/use-package][~use-package~]] stanzas.  All
dependencies are managed by [[https://nixos.org/][Nix]].  Any package with a true ~:ensure~
keyword is found by [[https://github.com/nix-community/emacs-overlay#extra-library-functionality][~emacsWithPackagesFromUsePackage~]] to generate
the set of Emacs packages to install with Nix.

In the brutish non-Nix world, ~:ensure~ triggers Emacs' own package
manager with willy nilly downloads.  To prevent this, we tell
~use-package~ to assume the package is there and merely look for its
autoloads.

#+begin_src emacs-lisp
(defun ross/use-package-ensure-already-installed
    (name _ensure state &optional _context)
  "Value for `use-package-ensure-function` that assumes the package
  is already installed.  This is true in our Nix environment."
  (let ((autoloads-file-name (format "%s-autoloads" name)))
    (with-demoted-errors "Error loading autoloads: %s"
      (load autoloads-file-name t t))))

(setq use-package-ensure-function #'ross/use-package-ensure-already-installed)
#+end_src

*** Hook naming

~use-package~ also by default appends ~"-hook"~ to all its hooks.
This impairs ripgreppability.  Let's be explicit:

#+begin_src emacs-lisp
(setq use-package-hook-name-suffix nil)
#+end_src

*** Load it

~use-package~ doesn't use itself.  (Well, I think it could, but this
is the recommended approach...)

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
#+end_src

** Helpers

*** Delight

[[https://savannah.nongnu.org/projects/delight][Delight]] removes uninteresting indicators from the mode line. It
enables the use of ~:delight~ in ~use-package~ stanzas.

#+begin_src emacs-lisp
(use-package delight :ensure)
#+end_src

*** General

[[https://github.com/noctuid/general.el][General]] is known for keybindings, particularly among [[https://github.com/emacs-evil/evil][the evil]].  A
lesser known feature is [[https://github.com/noctuid/general.el#settings][~general-setq~]], which understands the ~:set~
hooks of custom variables.  [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=21695][#21695]] raged on for a half decade without
a consensus, and I find this solution as tidy as any,

#+begin_src emacs-lisp
(use-package general :ensure)
#+end_src

* Personalization

These are used by a handful of packages.  Do not copy unless your name
is also Ross A. Baker and we share an e-mail address.

#+begin_src emacs-lisp
(general-setq user-full-name "Ross A. Baker"
              user-mail-address "ross@rossabaker.com")
#+end_src

* Minibuffer

** History

~savehist~ persists the history of the minibuffer across sessions.

#+begin_src emacs-lisp
(use-package savehist
  :config
  (savehist-mode))
#+end_src

* Completion

** Hippie Expand

~hippie-expand~ is a more powerful replacement for ~dabbrev~. Mickey
Petersen [[https://www.masteringemacs.org/article/text-expansion-hippie-expand][wrote about it]].

#+begin_src emacs-lisp
(use-package hippie-expand
  :general
  ([remap dabbrev-expand] 'hippie-expand))
#+end_src

* Help

** Helpful

The integrated help in Emacs is superb, but the presentation is less
so. We introduce [[https://github.com/Wilfred/helpful][Helpful]] as an alternative. We introduce it primarily
by rebinding the built-in ~describe-*~ functions.

#+begin_src emacs-lisp
(use-package helpful
  :ensure
  :bind
  ([remap describe- command] . helpful-command)
  ([remap describe-function] . helpful-callable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap Info-goto-emacs-command-node] . helpful-function)
  ("C-h (" . helpful-macro))
#+end_src

* Editing

** Killing

Don't add _consecutive_ duplicates to the kill ring.

#+begin_src emacs-lisp
(use-package simple
  :custom
  (kill-do-not-save-duplicates t))
#+end_src

** Undo

[[https://github.com/casouri/vundo][Vundo]] displays the undo history as a tree. Unlike [[https://www.dr-qubit.org/undo-tree.html][undo-tree]], it
doesn't replace the built-in undo commands.

#+begin_src emacs-lisp
(use-package vundo
  :ensure
  :custom
  (vundo-glyph-alist vundo-unicode-symbols))
#+end_src

* Display

** Scrolling

Emacs' default scrolling behavior feels a bit janky in the 2020s.

- ~scroll-conservatively~ has a magic number of ~100~. Greater than
  this scrolls just enough to get the point back on screen without
  recentering.

- ~scroll-margin~ specifies how many lines of context to keep above
  and below the point.

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (frame-inhibit-implied-resize t)
  (scroll-conservatively 101)
  (scroll-margin 2)
  (scroll-preserve-screen-position t))
#+end_src

*** Pulse

Flash whenever we scroll, recenter, or switch windows.
Credit: [[https://karthinks.com/software/batteries-included-with-emacs/][Karthik Chikmagalur]].

#+begin_src emacs-lisp
(use-package pulse
  :config
  (defun ross/pulse-line (&rest _)
    "Pulse the current line."
    (pulse-momentary-highlight-one-line (point)))
  (dolist (command '(scroll-up-command scroll-down-command
                                       recenter-top-bottom other-window))
    (advice-add command :after #'ross/pulse-line)))
#+end_src

** Line numbers

~display-line-numbers~ is a more performant replacement for the
venerable old ~linum~.  We turn it on for program and configuration
modes.

#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom
  (display-line-numbers-widen t)
  :hook
  ((prog-mode-hook conf-mode-hook) . display-line-numbers-mode))
#+end_src

* Files

** Autorevert

Automatically revert all buffers with no unsaved changes.
~global-auto-revert-non-file-buffers~ includes buffers like Dired.

#+begin_src emacs-lisp
(use-package autorevert
  :custom
  (global-auto-revert-non-file-buffers t)
  :config
  (global-auto-revert-mode))
#+end_src

** Recent files

Enable tracking of recently owned files. Sadly, this doesn't integrate
with the operating system.  Happily, we don't leave Emacs very often.

#+begin_src emacs-lisp
(use-package recentf
  :config
  (recentf-mode))
#+end_src

** Executable

If a file starts with a [[https://en.wikipedia.org/wiki/Shebang_(Unix)][shebang]], and is not already executable, make
it so on save.

#+begin_src emacs-lisp
(use-package executable
  :hook
  (after-save-hook . executable-make-buffer-file-executable-if-script-p))
#+end_src

** Notifications

On MacOS, I periodically run into "too many open files". This [[https://www.blogbyben.com/2022/05/gotcha-emacs-on-mac-os-too-many-files.html][solution]]
from Ben Simon worked for me:

#+begin_src emacs-lisp
(defun ross/file-notify-rm-all-watches ()
  "Remove all existing file notification watches from Emacs."
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))
#+end_src

The function exists [[https://github.com/emacs-mirror/emacs/blob/master/lisp/filenotify.el#L483-L489][upstream]], so we should be able to remove it
someday.

* Indentation

Tabs are the Devil's whitespace.

#+begin_src emacs-lisp
(customize-set-variable 'indent-tabs-mode nil)
#+end_src

* Text

** Helpers

A handy function by [[http://mbork.pl/2022-05-23_Copying_code_snippets][Marcin Borkowski]] to copy code unindented. This
deserves a keybinding.

#+begin_src emacs-lisp
(defun ross/copy-region-deindented (begin end)
  "Copy region, untabifying and removing indentation."
  (interactive "r")
  (let ((orig-tab-width tab-width)
	(region (buffer-substring-no-properties begin end)))
    (with-temp-buffer
      (setq tab-width orig-tab-width)
      (insert region)
      (untabify (point-min) (point-max))
      (org-do-remove-indentation)
      (kill-new (buffer-string)))))
#+end_src

** Translate

The [[https://github.com/atykhonov/google-translate][google-translate package]] is a frontend to [[https://translate.google.com/][Google Translate]]. It
doesn't work very well out of the box.

- We need to tell it about ~popup~, despite [[https://github.com/atykhonov/google-translate/commit/264143362a63ff820b9753c107e07327804ae6a4][this fix]].
- We get an error related to "tkk" without [[https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888][this folderol]].

#+begin_src emacs-lisp
(use-package google-translate
  :ensure
  :init
  (use-package popup :ensure t)
  :custom
  (google-translate-backend-method 'curl)
  :config
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  (require 'google-translate-default-ui))
#+end_src

* Building

** Compilation

[[https://codeberg.org/ideasman42/emacs-fancy-compilation][fancy-compilation]] colorizes the compilation buffer, shows progress
lines, and improves some scrolling behavior out of the box.

#+begin_src emacs-lisp
(use-package fancy-compilation
  :ensure
  :custom
  (fancy-compilation-override-colors nil)
  (fancy-compilation-term "xterm-256color")
  :config
  (fancy-compilation-mode))
#+end_src

* Customization

** Theme

I use the [[https://protesilaos.com/emacs/modus-themes#][modus-themes]]. They're built into Emacs starting with 28.1,
but we ~:ensure~ them to get the latest from MELPA.

#+begin_src emacs-lisp
(use-package modus-themes
  :ensure
  :demand t
  :init
  :custom
  (modus-themes-bold-constructs t)
  (modus-themes-syntax '(faint yellow-comments))
  (modus-themes-links '(neutral-underline))
  (modus-themes-box-buttons '(flat))
  (modus-themes-prompts '(bold))
  (modus-themes-mode-line '(borderless (padding . 4) accented))
  (modus-themes-completions '((matches . (extrabold background intense))
                              (selection . (semibold accented intense))
                              (popup . (accented))))
  (modus-themes-paren-match '(bold intense))
  (modus-themes-region '(accented))
  (modus-themes-diffs 'desaturated)
  (modus-themes-org-blocks 'tinted-background)
  (modus-themes-fringes 'subtle)
  (modus-themes-scale-headings t)
  :config
  (general-setq modus-themes-headings
                (mapcar (lambda (level)
                          (list level (expt 1.25 (- 4 level))))
                        '(1 2 3)))
  (load-theme 'modus-operandi t)
  :bind
  ("C-c T t" . modus-themes-toggle))
#+end_src

* Lossage

** Long lines

Turn off some bells and whistles when lines are so long they slow down
Emacs.

#+begin_src emacs-lisp
(use-package so-long
  :config
  (global-so-long-mode))
#+end_src

* Environment

** Paths

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] ensures that our paths are always loaded from our
shell, even when Emacs is launched from a GUI.  This is particularly a
problem on MacOS.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Languages

** Emacs Lisp

*** File variables

I use local variables in this config to keep the code from indenting
two spaces and help preserve the git history from pre-Org days.
Without this, we get prompted the first time we read this file:

#+begin_src emacs-lisp
(dolist (pair '((org-src-preserve-indentation . t) (org-src-tab-acts-natively . t)))
  (add-to-list 'safe-local-variable-values pair))
#+end_src

** HTML

*** web-mode

[[https://web-mode.org/][web-mode.el]] understands the Go templates we use in our ox-hugo site.

#+begin_src emacs-lisp
(use-package web-mode
  :ensure)
#+end_src

** Scala support

[[https://github.com/zwild/ob-ammonite][ob-ammonite]] is archived, but it's the only thing I've found to
evalulate Scala blocks in org mode.

Because this is a custom package, we have to be explicit about its
pdependencies to get our Nix machinery to pick it up.  This would be
better handled in Nix.

#+begin_src emacs-lisp
(use-package ob-ammonite
  :ensure
  :init
  (use-package ammonite-term-repl :ensure)
  (use-package xterm-color :ensure))
#+end_src

Problem: evaluating an ~amm~ source block hangs the first time and
needs to be ~C-g~'ed. After that, it works.

** Jenkins

[[Jenkins][Jenkins]] is a CI/CD server.  The configuration is a dialect of Groovy.  The
[[https://github.com/john2x/jenkinsfile-mode][jenkinsfile-mode]] gives us enhanced highlighting and completions.

#+begin_src emacs-lisp
(use-package jenkinsfile-mode :ensure)
#+end_src

** R

[[https://ess.r-project.org/][Emacs Speaks Statistics]] supports multiple languages, but I'm in it for [[https://www.r-project.org/][R]].

#+begin_src emacs-lisp
(use-package ess :ensure)
#+end_src

** Stan

[[https://github.com/stan-dev/stan-mode][stan-mode]] supports [[https://mc-stan.org/][Stan]], which I use for various Bayesian inference
problems.

Temporarily disabled due to a hash mismatch.

#+begin_src emacs-lisp
;; (use-package stan-mode :ensure)
#+end_src

** Terraform

[[https://github.com/emacsorphanage/terraform-mode][terraform-mode]] is a major mode for [[http://www.terraform.io/][Terraform]].

#+begin_src emacs-lisp
(use-package terraform-mode :ensure)
#+end_src

* Tools

** REST client

[[https://github.com/pashky/restclient.el/][restclient.el]] provides a convenient HTTP worksheet.

#+begin_src emacs-lisp
(use-package restclient :ensure)
#+end_src

*** jq

It also integrates with [[https://stedolan.github.io/jq/][jq]].

#+begin_src emacs-lisp
(use-package restclient-jq
  :ensure t
  :after restclient)
#+end_src

* Unorganized territory

This is the vestige of my old init.el.  It is gradually being made literate.

#+begin_src emacs-lisp :tangle init.el
;;; Core

(use-package emacs
  :no-require
  :custom
  (create-lockfiles nil)
  (echo-keystrokes 0.01)
  (load-prefer-newer t)
  :config
  (defun ross/show-trailing-whitespace ()
    (general-setq show-trailing-whitespace t))
  (defun ross/scratch ()
    "Pop to the scratch buffer, receating it if necessary."
    (interactive)
    (pop-to-buffer (get-buffer-create "*scratch*")))
  :hook
  ((prog-mode-hook text-mode-hook conf-mode-hook) . ross/show-trailing-whitespace)
  :bind
  ("C-c b x" . ross/scratch))

(use-package advice
  :custom
  (ad-redefinition-action 'accept))

(use-package auth-source
  :custom
  ;; .gpg suffix encrypts it.  The default uses plaintext ~/.authinfo.  Yuck!
  (auth-sources (list (expand-file-name "authinfo.gpg" no-littering-etc-directory))))

(use-package comint
  :custom
  (comint-prompt-read-only t))

(use-package compile
  :custom
  (compilation-always-kill t))

(use-package cus-edit
  :custom
  (custom-file null-device))

(use-package delsel
  :config
  (delete-selection-mode))

(use-package editorconfig
  :ensure
  :delight
  :custom
  (editorconfig-trim-whitespaces-mode 'ws-butler-mode)
  :config
  (require 'editorconfig-core)		;unclear why this isn't happening for free
  (editorconfig-mode))

(use-package fill-sentences-correctly
  ;; I'm a double spacer.  It works better with abbreviations.  It
  ;; looks better in monospace.  It collapses by default in most
  ;; proportional contexts.  And the rest of the world just doesn't
  ;; get it.  Ergo...
  :ensure
  :delight
  :config
  (fill-sentences-correctly-mode))

(use-package ffap
  :init
  (general-setq ffap-machine-p-known 'reject)	;default slows load and sounds terrifying
  )

(use-package files
  :custom
  (confirm-kill-emacs 'yes-or-no-p))

(use-package gcmh
  :ensure
  :delight
  :hook
  (after-init-hook . gcmh-mode))

(use-package hydra
  :ensure)

(use-package menu-bar
  :bind
  ("C-x k" . kill-this-buffer))

(use-package minibuf-eldef
  :config
  (minibuffer-electric-default-mode))

(use-package mouse
  :custom
  (mouse-yank-at-point t))

(use-package simple
  :requires cl-lib
  :custom
  (save-interprogram-paste-before-kill t)
  :config
  (defun ross/ad-keyboard-escape-quit (fun &rest args)
    (cl-letf (((symbol-function 'one-window-p) (lambda (&rest _) t)))
      (apply fun args)))
  (advice-add 'keyboard-escape-quit :around #'ross/ad-keyboard-escape-quit)
  :bind
  ("<escape>" . keyboard-escape-quit))

(use-package string-inflection
  ;; This deserves some keybindings
  :ensure)

(use-package subword
  :delight)

(use-package unmodified-buffer
  :ensure
  :config
  (unmodified-buffer-mode))

(use-package wgrep
  :ensure)

(use-package whole-line-or-region
  :ensure
  :delight whole-line-or-region-local-mode
  :config
  (whole-line-or-region-global-mode))

;;; UI

(use-package emacs
  :no-require
  :custom
  (frame-resize-pixelwise t)
  (use-dialog-box nil)
  (window-combination-resize t))

(use-package ansi-color
  :custom
  (ansi-color-for-comint-mode t))

(use-package default-text-scale
  :ensure
  :config
  (default-text-scale-mode))

(use-package frame
  :bind
  ("C-z" . nil)				; Previously suspend-frame
  )

(use-package hl-line
  :config
  (defvar ross/hl-line-restore nil)
  (defun ross/hl-line-activate-mark-h ()
    (when hl-line-mode
      (general-setq ross/hl-line-restore t)
                    hl-line-mode nil))
  (defun ross/hl-line-deactivate-mark-h ()
    (when ross/hl-line-restore
      (general-setq hl-line-mode t)))
  :hook
  (activate-mark-hook . ross/hl-line-activate-mark-h)
  (deactivate-mark-hook . ross/hl-line-deactivate-mark-h)
  ;; We don't use global-hl-line-mode, because it doesn't control hl-line-mode!
  ((prog-mode-hook text-mode-hook conf-mode-hook) . hl-line-mode))

(use-package hl-todo
  :ensure
  :hook
  ((prog-mode-hook conf-mode-hook) . hl-todo-mode))

(use-package minibuf
  :no-require
  :custom
  (minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
  :hook
  (minibuffer-setup-hook . cursor-intangible-mode))

(use-package paren
  :custom
  (show-paren-delay 0)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t))

(use-package projectile
  :ensure
  :custom
  (projectile-project-search-path '("~/src"))
  :config
  (projectile-mode)
  :bind
  (:map projectile-mode-map
	("C-c p" . projectile-command-map))
  (:map projectile-command-map
	("s" . projectile-ripgrep))
  :hook
  (after-init-hook . projectile-discover-projects-in-search-path))

(use-package simple
  :no-require
  :config
  (column-number-mode)
  (size-indication-mode))

(use-package startup
  :no-require
  :custom
  (inhibit-startup-echo-area-message t)
  (inhibit-startup-screen t))

(use-package tooltip
  :config
  (tooltip-mode -1))

;;; Completion

(use-package consult
  :ensure
  :custom
  (consult-narrow-key (kbd "C-+"))
  (consult-project-root-function #'projectile-project-root)
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  :config
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  :bind
  ([remap switch-to-buffer] . consult-buffer)
  ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
  ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
  ([remap yank-pop] . consult-yank-pop)
  ([remap goto-line] . consult-goto-line)
  ([remap repeat-complex-command] . consult-history)
  ([remap apropros] . consult-apropos)
  ([remap man] . consult-man)
  ([remap isearch-edit-string] . consult-isearch-history)
  ([remap projectile-ripgrep] . consult-ripgrep))

(use-package embark
  :ensure
  :custom
  (prefix-help-command #'embark-prefix-help-command)
  :bind
  ("C-." . embark-act)
  ("M-." . embark-dwim)
  ([remap describe-bindings] . embark-bindings))

(use-package embark-consult
  :ensure
  :after (embark consult)
  :demand t)

(use-package marginalia
  :ensure
  :config
  (marginalia-mode))

(use-package orderless
  :ensure
  :custom
  (completion-styles '(orderless)))

(use-package vertico
  :ensure
  :config
  (vertico-mode)
  (use-package vertico-directory
    :disabled
    :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		;; I don't like vertico-directory-delete-char
		("M-DEL" . vertico-directory-delete-word))
    ;; I don't know what this does, but it's recommended
    :hook
    (rfn-eshadow-update-overlay-hook . vertico-directory-tidy))
  (use-package vertico-indexed
    :disabled
    :config
    (vertico-indexed-mode)))

(use-package which-key
  :ensure
  :delight
  :custom
  (which-key-show-early-on-C-h t)
  (which-key-idle-delay 1.0)
  (which-key-idle-secondary-delay 0.05)
  (which-key-sort-order 'which-key-key-order-alpha)
  :config
  (which-key-mode))

;;; Tools

(use-package ox-hugo
  :ensure)

(use-package ox-reveal
  :ensure)

(use-package htmlize
  :ensure)

(use-package flycheck
  :ensure
  :custom
  (flycheck-emacs-lisp-initialize-packages nil)
  :config
  (global-flycheck-mode))

(use-package smerge-mode
  :config
  (defhydra ross/hydra-smerge
    ;; Credit: https://github.com/kaushalmodi/.emacs.d
    (:color pink
     :hint nil
     :pre (smerge-mode 1)
     ;; Disable `smerge-mode' when quitting hydra if no merge
     ;; conflicts remain.
     :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("q" nil "cancel" :color blue))
  :bind
  ("C-c g m" . ross/hydra-smerge/body))

(use-package simple-httpd
  :ensure)

(use-package esxml
  :ensure)

;;; Languages

;;;; Emacs Lisp

(use-package eldoc
  :delight)

;;;; Git

(use-package git-modes
  :ensure)

;;;; Groovy

(use-package groovy-mode
  :ensure
  :hook
  (groovy-mode-hook . subword-mode))

;;;; JSON

(use-package json-mode
  :ensure
  :mode
  ("/flake\\.lock\\'" . json-mode))

;;;; Markdown

(use-package markdown-mode
  :ensure
  :config
  ;; This function is dedicated to Rob Norris.
  (defun ross/migrate-tut ()
    "Migrate the *.md files in `default-directory` from tut to mdoc."
    (interactive)
    (let ((files (directory-files default-directory nil "\\.md$"))
	  (mstart (make-hash-table :test 'eq)))
      (fileloop-initialize
       files
       (lambda ()
	 (save-excursion
	   (when (re-search-forward "```tut" nil t)
             (puthash (current-buffer) (match-beginning 0) mstart))))
       (lambda ()
	 (save-excursion
	   (goto-char (gethash (current-buffer) mstart (point-min)))
	   (while (re-search-forward "```tut\\(?::book\\)?" nil t)
	     (replace-match "```scala mdoc" nil nil))
	   t)))
      (fileloop-continue))))

;;;; Nix

(use-package nix-mode
  :ensure
  :hook
  (nix-mode-hook . subword-mode))

;;;; Scala

(use-package hocon-mode
  :ensure
  :config
  (flycheck-define-checker ross/hocon-pyhocon
    "A HOCON checker using the pyhocon tool."
    :command ("pyhocon" "-i" source "-o" null-device)
    :error-patterns
    ((error line-start
            "pyparsing.ParseSyntaxException: "
            (message (one-or-more anychar))
            "(line:" line ", col:" column ")"
            line-end))
    :modes (hocon-mode))
  (add-to-list 'flycheck-checkers 'ross/hocon-pyhocon)
  :mode
  ("/application\\.conf\\'" . hocon-mode)
  ("/reference\\.conf\\'" . hocon-mode)
  ("/\\.scala-steward\\.conf\\'" . hocon-mode)
  ("/\\.scalafmt\\.conf\\'" . hocon-mode))

(use-package sbt-mode
  :ensure
  :hook
  (sbt-mode-hook . subword-mode))

(use-package scala-mode
  :ensure
  :hook
  (scala-mode-hook . subword-mode))

;;;; YAML

(use-package yaml-mode
  :ensure)
#+end_src

* Nix

** Base module

#+begin_src nix :tangle default.nix
{ inputs, pkgs, config, ... }:

let
  emacs = pkgs.emacs29;

  withPatches = pkg: patches:
    pkg.overrideAttrs (attrs: { inherit patches; });

  compile = name: inputs: src: pkgs.stdenv.mkDerivation rec {
    inherit name src;
    buildInputs = [ emacs ] ++ inputs;
    buildPhase = ''
      rm -f ${name}-pkg.el # We don't load 'package
      autoloads=${name}-autoloads.el
      [ -f $autoloads] || ${emacs}/bin/emacs --batch -Q -L . --eval "(make-directory-autoloads \".\" \"$autoloads\")"
      ARGS=$(find ${pkgs.lib.concatStrings (builtins.map (arg: arg + "/share/emacs/site-lisp ") buildInputs)} -type d -exec echo -L {} \;)
      ${emacs}/bin/emacs --batch -Q -L . $ARGS -f batch-byte-compile *.el
    '';
    installPhase = ''
      mkdir -p $out/share/emacs/site-lisp
      install *.el* $out/share/emacs/site-lisp
    '';
  };

  # https://discourse.nixos.org/t/emacs-exwm-home-manager-and-loading-new-emacs-modules/10097/3
  load-path = pkgs.writeText "load-path.el" ''
    (let ((default-directory (file-name-as-directory
                              "${config.programs.emacs.finalPackage.deps}/share/emacs/site-lisp/"))
          (normal-top-level-add-subdirs-inode-list nil))
    (normal-top-level-add-subdirs-to-load-path))
  '';
in
{
  home.packages = [
    pkgs.fd
    pkgs.mdl
    pkgs.metals
    pkgs.python3Packages.pyhocon
    pkgs.ripgrep
  ];

  programs.emacs = {
    enable = true;
    package = pkgs.emacsWithPackagesFromUsePackage {
      config = ./init.el;
      package = emacs;
      override = epkgs: epkgs // rec {
        ammonite-term-repl = compile "ammonite-term-repl" [ scala-mode epkgs.s ] inputs.ammonite-term-repl;
        fill-sentences-correctly = compile "fill-sentences-correctly" [] inputs.fill-sentences-correctly;
        hocon-mode = compile "hocon-mode" [] inputs.hocon-mode;
        ob-ammonite = compile "ob-ammonite" [ ammonite-term-repl scala-mode epkgs.s epkgs.xterm-color ] inputs.ob-ammonite;
        scala-mode = compile "scala-mode" [] inputs.scala-mode;
        unmodified-buffer = compile "unmodified-buffer" [] inputs.unmodified-buffer;
      };
      defaultInitFile = true;
    };
    extraPackages = epkgs: [
      epkgs.use-package
    ];
  };

  xdg.configFile = {
    "emacs/early-init.el".source = ./early-init.el;
    "emacs/load-path.el".source = load-path;
  };
}
#+end_src

* Local Variables :noexport:
Local Variables:
org-edit-src-content-indentation: 0
org-src-tab-acts-natively: t
org-src-preserve-indentation: t
End:
