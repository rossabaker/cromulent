#+HUGO_BASE_DIR: ../../tmp/hugo
#+HUGO_SECTION: /
#+MACRO: abbr @@html:<abbr title="$1">$2</abbr>@@
#+PROPERTY: header-args :eval never :mkdirp yes :code-license CC-BY-SA-4.0

# Automatically set the Hugo date: https://ox-hugo.scripter.co/doc/dates/#date
#+STARTUP: logdone

* DONE License                               :licensing:gpl:creative_commons:
CLOSED: [2022-11-06 Sun 10:40 EST]
:PROPERTIES:
:EXPORT_HUGO_LASTMOD: [2023-09-03 Sun 21:47 EDT]
:EXPORT_FILE_NAME: license
:CUSTOM_ID: license
:END:

#+begin_description
Licenses and attributions for the content on rossabaker.com
#+end_description

** Simple and strict

The work /as a whole/ is distributed under the [[https://www.gnu.org/licenses/gpl-3.0-standalone.html][GNU General Public
License v3.0 only]] (~GPL-3.0-only~).  These license terms apply to
[[https://rossabaker.com/][~rossabaker.com~]] and its [[https://github.com/rossabaker/cromulent][source repository]].

#+begin_quote
Copyright (C) 2022-2023, Ross A. Baker <ross@rossabaker.com>

This file is part of the Cromulent project.

Cromulent is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, version 3.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
#+end_quote

** Nuanced and more permissive

- Creative Commons is great for prose and images, but but [[https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software][not for
  code]].
- Many configurations are trivial, and best suited to the pubic domain.
- Some works are more substantial, and you may be asked to share alike.
- Some works are derived, and I am bound by the original terms.

#+name: license-compatibility
#+begin_src dot :eval yes :results value file :exports results :dir ../../gen/hugo/static/img :file license-compatibility.svg :mkdirp yes
  strict digraph {
      cc0_1_0 [ label="CC0-1.0" ]
      mit [ label="MIT" ]
      apache_2_0 [ label="Apache-2.0" ]
      gpl_3_0_only [ label="GPL-3.0-only" ]
      cc_by_sa_4_0 [ label="CC-BY-SA-4.0" ]

      cc0_1_0 -> mit
      mit -> apache_2_0
      apache_2_0 -> gpl_3_0_only
      cc0_1_0 -> cc_by_sa_4_0
      cc_by_sa_4_0 -> gpl_3_0_only
  }
#+end_src

#+caption: An arrow from A to B means content licensed A and B can be combined under license B.
#+results: license-compatibility
[[file:../../gen/hugo/static/img/license-compatibility.svg]]

Though everything combines to ~GPL-3.0-only~, most content is
available under more permissive terms, as follows.

*** ~CC-BY-SA-4.0~ by default

Unless otherwise specified, all content is published under a [[https://creativecommons.org/licenses/by/4.0/][Creative
Commons Attribution-ShareAlike 4.0 International]] (~CC-BY-SA-4.0~)
license.

*** Code blocks

Code blocks may be tagged with a [[https://spdx.org/licenses/][SPDX identifier]].  The indicated
license applies to that code block.  For example, the following block,
tagged ~CC0-1.0~, is distributed under the [[https://spdx.org/licenses/CC0-1.0.html][Creative Commons Zero v1.0
Universal]] license.

#+begin_src emacs-lisp :code-license CC0-1.0
  (message "Hello.")
#+end_src

**** SPDX quick reference

The following SPDX identifiers may be applied to various code blocks
on this site:

| SPDX ID        | License                                             |
|----------------+-----------------------------------------------------|
| ~CC-BY-SA-4.0~ | [[https://creativecommons.org/licenses/by/4.0/][Creative Commons Attribution-ShareAlike 4.0]]         |
| ~CC0-1.0~      | [[https://spdx.org/licenses/CC0-1.0.html][Creative Commons Zero v1.0 Universal]]                |
| ~GPL-3.0-only~ | [[https://www.gnu.org/licenses/gpl-3.0-standalone.html][GNU General Public License, version 3]] only          |
| ~MIT~          | [[https://opensource.org/license/mit/][The MIT License]]                                     |

* DONE Home page
CLOSED: [2022-09-05 Mon 00:30 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_LASTMOD: [2023-07-07 Fri 19:15 EDT]
:END:

#+begin_quote
  Yeah, well, I'm going to go build my own site. \\
  With Emacs!  And Nix! \\
  In fact, forget the site.
#+end_quote
#+hugo:more

#+begin_clearfix
#+attr_html: :class float :alt Pixelated construction sign of a stick figure shoveling on a bezeled gray background, in the style of a late 1990s \"Under Construction\" GIF.
[[file:under-construction.gif]]

This is +my personal brand+, +my love letter to the Indieweb+, +my
finely manicured digital garden+, me faffing about as I rediscover the
joy of computing.  All that is published here should be considered
@@html:<dfn>@@faff byproduct@@html:</dfn>@@.  Perpetually under
construction.
#+end_clearfix

* DONE Ross A. Baker                            :@personal:biography:contact:
CLOSED: [2022-08-31 Wed 00:23 EDT]
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_LASTMOD: [2022-09-14 Wed 13:28 EDT]
:END:

#+begin_description
Ross A. Baker is an American software engineer who is not notable
enough for a Wikipedia article.  He's arguably not even notable enough
for this article on an eponymous domain.
#+end_description

#+begin_infobox
@@hugo:<h2>@@Ross A. Baker@@hugo:</h2>@@

#+attr_html: :alt Profile image of Ross A. Baker
[[../hugo/static/img/profile.jpg]]

- Name :: Ross A. Baker
- Occupation :: software engineer
- Style :: functional
- Pronouns :: he/him
- Interjections :: ope
- Personality :: BBQ
- ~$EDITOR~ :: Emacs
- HTML tag :: ~<dl>~
- Number :: /e/
- Sandwich :: Italian beef, dipped
- MLB team :: Cubs
- NFL team :: Bears
- NHL team :: Blackhawks
- NBA team :: Pacers
- Disposition :: curmudgeonly
#+end_infobox

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css :exports none
  .infobox {
      float: right;
      width: 18em;
      margin: 0 0 1.5em 1.5em;
      border: 1px solid #666;
      padding: 0.5em;
      background: #f8f8f8;
      font-size: 0.85em;
  }

  .infobox h2 {
      text-align: center;
      font-size: 1.25rem;
      margin: 0;
  }

  .infobox dl {
      display: inline-grid;
      grid-template-columns: max-content 1fr;
      column-gap: 1em;
      row-gap: 0.5em;
  }

  .infobox dt {
      font-weight: bolder;
      grid-column: 1;
  }

  .infobox dd {
      grid-column: 2;
      margin-left: 0;
  }
#+end_src

@@hugo:<div class="content">@@

*Ross A. Baker* (/​ɹɔs eɪ beɪ.kɚ/) is an American software engineer who
is not notable enough for a Wikipedia article.  He's arguably not even
notable enough for this article on an eponymous domain.

#+toc: headlines 2

** Early life

Baker grew up in [[https://en.wikipedia.org/wiki/Crystal_Lake,_Illinois][Crystal Lake]], [[https://en.wikipedia.org/wiki/Illinois][Illinois]].  He was gifted a copy of
[[https://archive.org/details/LearningBasicForTandyComputers][Learning BASIC for Tandy Computers]] by his aunt, and would enter and
then modify programs out of the back of [[https://en.wikipedia.org/wiki/3-2-1_Contact#Magazine][3-2-1 Contact Magazine]].  He
wanted to be a computer programmer or a Major League Baseball player,
but showed some aptitude for the former and absolutely none for the
latter.

In high school, he reverse engineered the roster format of [[https://en.wikipedia.org/wiki/Wayne_Gretzky_Hockey_2][Wayne
Gretzky Hockey 2]] and made a league simulator with rosters, drafts,
trades, and playoffs, in BASIC, and shared it with friends.  He hasn't
written anything that cool since.

** Education

Baker studied Computer Science and Cognitive Science at [[https://www.indiana.edu/][Indiana
University]], where he was recognized on campus as the guy who wore
shorts even in the dead of winter.  He captained the [[http://www.collegebowl.com/schoolhistoryrpt.asp?CustomerID=165][IU College Bowl
Team]] team to an abysmal [[http://www.collegebowl.com/schoolhistoryrpt.asp?CustomerID=165][2-13 record]] at the 1998 National Championship.

** Career

Baker has worked as a software engineer on school library circulation
systems, commercial insurance, mail-order music clubs, automobile
auctions, 340B compliance, cybersecurity, IP television, rewards
clubs, cloud infrastructure, and fin tech.  He currently works as a
staff engineer with a heavy emphasis on mentoring.

He taught himself Scala and got deeply involved in Open Source and the
[[https://typelevel.org/][Typelevel]] ecosystem, where he serves on the Steering Committee.

Baker enjoys statistics, pairwise comparison, and various types of
sportsball.  He combined these interests to assist with the [[http://prwolfe.bol.ucla.edu/cfootball/][Wolfe
Ratings]] used by the Bowl Championship Series from 2001-2013.

** Controversies

*** 2005 World Series conspiracy theory

Baker believes, without evidence, that the 2005 World Series was
canceled due to lack of interest.  Some thought he'd let it go after
the Cubs won in 2016, but no.

** Personal life

Baker lives in [[https://en.wikipedia.org/wiki/Indianapolis][Indianapolis]], [[https://en.wikipedia.org/wiki/Indiana][Indiana]], with his wife, two children, two
dogs, cat, myriad freshwater fish, frogs, and invertebrates.  He
is a volunteer soccer coach at [[https://northsidesoccer.com/][Northside Soccer]] and active member of
[[https://northchurchindy.com/][North United Methodist Church]].  He cross-country skis when it's snowy
and jogs when it's not.

** See also

- [[file:contact.org][Contact info]]

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css :exports none
  .contacts dl {
      display: grid;
      grid-template-columns: max-content auto;
  }

  dt {
      font-weight: bolder;
      grid-column: 1;
  }

  dd {
      grid-column: 2;
  }

  .ox-hugo-toc {
      background: #f8f8f8;
      border: 1px solid #666;
      font-size: 0.85em;
      padding: 1em;
      display: inline-block;
  }

  .ox-hugo-toc .heading {
      font-weight: bolder;
      text-align: center;
  }

  .ox-hugo-toc ul {
      counter-reset: toc-item;
      list-style: none;
      padding-left: 0;
  }
  .ox-hugo-toc li {
      display: block;
  }
  .ox-hugo-toc ul ul {
      padding-left: 4ch;
  }

  .ox-hugo-toc li::before {
      content: counters(toc-item, ".") " ";
      counter-increment: toc-item;
  }
#+end_src

@@hugo:</div>@@

* DONE Public keys                     :@tech:keys:pgp:verification:keyoxide:
CLOSED: [2022-09-14 Wed 13:30 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: public-keys
:EXPORT_HUGO_LASTMOD: [2023-07-20 Thu 18:12 EDT]
:END:

#+begin_description
Download Ross A. Baker's PGP public key.
#+end_description

** Setup                                                           :noexport:

#+begin_src sh :session public-keys :eval yes :exports results :results silent
  export GNUPGHOME=../../tmp/gnupg
  mkdir -m 700 -p $GNUPGHOME
  gpg --import ../keys/0x975BE5BC29D92CA5.pub.gpg
  export KEY_ID=904C153733DBB0106915C0BD975BE5BC29D92CA5
#+end_src

Create the armored version for download.

#+begin_src sh :session public-keys :eval yes :exports results :results silent
  mkdir -p ../../tmp/hugo/static/public-keys
  rm -f ../../tmp/hugo/static/public-keys/0x975BE5BC29D92CA5.pub.asc
  gpg --armor --export \
      --comment "Ross A. Baker <ross@rossabaker.com>" \
      --output ../../tmp/hugo/static/public-keys/0x975BE5BC29D92CA5.pub.asc \
      $KEY_ID
#+end_src

** PGP
:PROPERTIES:
:CUSTOM_ID: pgp
:END:

My PGP public key is published to this domain via [[file:configs/web-key-directory.org][WKD]], and can also be
downloaded in [[/.well-known/openpgpkey/hu/eimhw3om3jynrs7fo7r7rrssmt1o4yxp][binary]] and [[./0x975BE5BC29D92CA5.pub.asc][ASCII armored]] formats.  Its fingerprint is:

#+begin_src sh :session public-keys :eval yes :exports results :results verbatim
  gpg --list-keys $KEY_ID
#+end_src

*** Verification

This key is notated with [[https://ariadne.id/][Ariadne Identity]] claims, which can be
[[https://keyoxide.org/ross%40rossabaker.com][verified on Keyoxide]].

* DONE Contact                      :@personal:contact:verification:keyoxide:
CLOSED: [2022-10-16 Sun 15:37 EDT]
:PROPERTIES:
:DESCRIPTION: How to contact Ross A. Baker about various subjects via various protocols.
:EXPORT_FILE_NAME: contact
:EXPORT_HUGO_LASTMOD: [2023-08-09 Wed 22:12 EDT]
:END:

#+begin_description
Enumerates the best ways to contact Ross A. Baker
#+end_description

** Direct communication

I can't offer an {{{abbr(service-level agreement,SLA)}}} on response
times, but I try to carry my Midwestern Nice online.

- Email :: [[mailto:ross@rossabaker.com][~ross@rossabaker.com~]]; optionally with [[/public-keys/#pgp][PGP]]
- Matrix ::  [[https://matrix.to/#/@ross:rossabaker.com][~@ross:rossabaker.com~]]
- ActivityPub[fn:1] :: [[https://social.rossabaker.com/@ross][~@ross@rossabaker.com~]]

*** Pronouns

My pronouns are *he* / *him* / *his*, and I will respect yours.
** Special topics

*** Open source inquiries

I would rather connect in public, where everyone can benefit from the
discussion.  Most of my open source is hosted on one of the following
forges:

- GitHub :: [[https://github.com/rossabaker][~@rossabaker~]]
- Codeberg :: [[https://codeberg.org/rossabaker][~@rossabaker~]]

I also have a published [[#security][security policy]].

*** Employment inquiries

**** Relocation

I am willing to relocate if you are the Chicago Cubs.

#+begin_warning
I am over the hill, haven't played organized ball since junior high,
and wasn't good back then.
#+end_warning

**** Crypto

No.

** TODO Broken links                                               :noexport:
- pgp

* Security                                           :@tech:security:RFC9116:
CLOSED: [2023-08-09 Wed 22:01 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: security
:CUSTOM_ID: security
:EXPORT_HUGO_LASTMOD: [2023-08-09 Wed 22:12 EDT]
:END:

#+begin_description
Describes the security policy for Ross A. Baker's various projects.
#+end_description

I appreciate [[https://en.wikipedia.org/wiki/Coordinated_vulnerability_disclosure][coordinated vulnerability disclosure]].  I will respond as
quickly as possible to credible reports.

** Open source

I collaborate on projects across multiple open source organizations.
Most projects declare a ~SECURITY.md~ either in the organization's
profile or the project's root directory.

*** Typelevel

Please see the [[https://github.com/typelevel/.github/blob/main/SECURITY.md][Typelevel security policy]].

*** http4s

Please see the [[https://github.com/http4s/.github/blob/main/SECURITY.md][http4s security policy]].

** Other concerns

If you have a concern with any of my projects and can't find a
relevant security policy, please [[*Direct communication][contact me directly]].  The ideal
method is email with PGP.

** ~security.txt~

This policy is referenced from [[/.well-known/security.txt][~/.well-known/security.txt~]], in
compliance with [[https://www.rfc-editor.org/rfc/rfc9116][RFC9116]].  Learn more at [[https://securitytxt.org/][securitytxt.org]].

* Configurations section                                              :@tech:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: configs
:END:

** DONE Configurations
CLOSED: [2022-09-05 Mon 23:48 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_LASTMOD: [2023-08-05 Sat 23:27 EDT]
:END:

#+begin_description
Configurations are living documentation of Ross A. Baker's systems,
both local and remote.
#+end_description

My /Configurations/ are an expansive take on the traditional dotfiles
repository.

- Most of it is [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].  It intersperses prose and
  source code and in [[https://orgmode.org/][Org Mode]], with the source is extracted with [[https://orgmode.org/worg/org-contrib/babel/][Babel]].
- These are living documents.  I am [[https://en.wikipedia.org/wiki/Eating_your_own_dog_food][dogfooding]] this.
- These configurations are intended to be declarative and
  reproducible.  We use [[https://nixos.org/][Nix]] to manage not only the dotfiles, but the
  software packages that they configure.  Infrastructure is defined
  with [[https://www.terraform.io/][Terraform]].

This is not a complete description of my environment.  Some things
can't be automated [fn:3].  Some things are be redacted for security.
But we inveterate tweakers learn from one another, so I will share all
that I can.

** DONE Managing generated sources in Git :git:gitattributes:gitignore:babel:
CLOSED: [2022-08-24 Wed 15:04 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: git-repository
:EXPORT_HUGO_LASTMOD: [2023-05-25 Thu 23:54 EDT]
:header-args:gitignore+: :tangle ../../.gitignore
:header-args:gitattributes+: :tangle ../../.gitattributes
:header-args+: :code-license CC0-1.0
:END:

My [[https://github.com/rossabaker/cromulent][personal Git repository]] hosts my configurations and this web site.
Most of it is sourced from Org Mode, but most tools don't read Org
directly.  We therefore need to commit some [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] sources to
interoperate with various tools.  We must deal with three sorts of
files.

*** Original sources

This is the minimal set of files from which all other files can be
derived.  As much as possible, we keep them in ~src/~.

*** Ephemeral files

Ephemeral files can be tangled on demand and disposed of at will.
Development processes may need them, but they can be comfortably
recreated from the original sources.  An example of these are the Hugo
outputs when [[*Development][locally building the site]].

We put as many of them as we can in ~tmp/~ for organization.  The best
way to handle them is with a [[https://git-scm.com/docs/gitignore][gitignore]].

#+begin_src gitignore
  /tmp/
#+end_src

Nix builds create a ~result~ symlink by default that should also be
ignored.

#+begin_src gitignore
  /result
#+end_src

*** Committed, generated sources

There are files that are neither original, nor can they be generated
on demand from originals.  This class of files is generally to be
avoided, but with the right mitigation, we can live with it and still
live in our Org Mode bubble within a world that isn't ready for it.

**** Location

Some files must be tangled to specific locations in the repository to
be loaded by other tools.  For example, Git looks for ~.gitignore~ and
in the project root.

Other files need to be tangled for non-Org tooling, but are imported
by something else, like the [[*Build website with Nix][Nix package for our website]], which is
imported into ~flake.nix~.  We stow all such files we can in the
~gen/~ directory.

**** Problems and mitigation

***** Desycnhronization

The tangled source may be desynchronized with the Org Mode source.  We
could check for this with a GitHub workflow, but don't yet.

***** Bloated diffs

When we commit tangled sources, each hunk of the diff may be
duplicated between the original source and the tangled source.  This
is distracting in review.  We can set a gitattribute of [[https://git-scm.com/docs/gitattributes#_diff][=-diff=]], which
treats the specified file as binary.  It's a little white lie, but
it prevents repeating each hunk.

A second problem is that a larger diff has a larger surface area for
merge conflicts.  [[https://git-scm.com/docs/gitattributes#_merge][=-merge=]] avoids 3-way merges, but still flags the
file as a conflict.  Typically the file needs to be regenerated
in these cases.

Finally, setting [[https://github.com/github/linguist/blob/97bc889ce840208652bf09b45f3b7859de43fe8e/docs/overrides.md#generated-code][=linguist-generated=]] suppresses these files from
rendered diffs.  It also excludes them from GitHub language stats.

We set all these gitattributes for all tangled sources.  The
~.gitattributes~ file itself gets gitattributes set on it!

#+begin_src gitattributes
  gen/**          -diff -merge linguist-generated=true
  .gitignore      -diff -merge linguist-generated=true
  .gitattributes  -diff -merge linguist-generated=true
  flake.nix       -diff -merge linguist-generated=true
  flake.lock      -diff -merge linguist-generated=true
  garnix.yaml     -diff -merge linguist-generated=true
  README.org      -diff -merge linguist-generated=true
#+end_src

*** Readme                                                         :noexport:
:PROPERTIES:
:CUSTOM_ID: repository-readme
:END:

#+begin_src org :tangle ../../README.org
  ,#+EXPORT_EXCLUDE_TAGS: noexport

  ,* Cromulent

  This repository hosts my configuration and [[https://rossabaker.com/][personal website]].  The most
  interesting source file is [[file:src/org/cromulent.org][cromulent.org]], and the most interesting
  view is the [[https://rossabaker.com/][published site]].

  ,** Generated source :noexport:

  This readme is [[file:src/org/cromulent.org::#repository-readme][tangled from cromulent.org]].
#+end_src

*** Redirect                                                       :noexport:

#+begin_src text :tangle ../../tmp/hugo/static/_redirects :exports none
  /configs/managing-generated-sources-in-git /configs/git-repository
#+end_src

*** TODO Broken links                                              :noexport:

- /website/

** DONE Web Key Directory
CLOSED: [2022-11-02 Wed 23:39 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: web-key-directory
:EXPORT_HUGO_LASTMOD: [2023-06-23 Fri 22:37 EDT]
:header-args+: :eval yes :code-license CC0-1.0
:END:

[[https://datatracker.ietf.org/doc/draft-koch-openpgp-webkey-service/][Web Key Directory (WKD)]] is a standard to map email addresses to PGP public
keys over HTTPS.  In this guide, we'll configure WKD for our domain.

*** Motivation

**** Independence

Public keys are traditionally submitted to one or more public key
servers.  Some, like [[https://pgp.mit.edu][~pgp.mit.edu~]], are federated[fn:4].  Others, like
[[https://keys.openpgp.org/][~keys.openpgp.org~]], are not[fn:5].  In neither case can I control
whether they're here tomorrow.

Consistent with Indieweb principles, WKD lets us self-host our
identity.  Where better to go for ~ross@rossabaker.com~'s public key
than ~rossabaker.com~?

**** Ecosystem

Once we opt into WKD, we get many [[https://wiki.gnupg.org/WKD#Implementations][integrations]] for free.  My favorite
is verification of my online identities through [[https://keyoxide.org/ross%40rossabaker.com][Keyoxide]].

*** Setup                                                          :noexport:

#+begin_src sh :session wkd :var GNUPGHOME=`,(expand-file-name "../../tmp/gnupg" default-directory)
  export KEY_ID=904C153733DBB0106915C0BD975BE5BC29D92CA5
  export EMAIL=ross@rossabaker.com
  export GNUPGHOME
  mkdir -m 700 -p $GNUPGHOME
  gpg --import ../keys/0x975BE5BC29D92CA5.pub.gpg
#+end_src

*** Prerequisites

- This document assumes you have already [[https://gnupg.org/gph/en/manual.html#AEN26][generated a keypair]].
- Environment variable =$PUBLIC_HTML= is set to your web root.
- Environment variable =$EMAIL= is the e-mail address associated with your key.
- Environment variable =$KEY_ID= is your key ID.  In the example
  below, it's src_sh[:session wkd]{echo $KEY_ID}.

  #+begin_src sh :session wkd :exports both :results verbatim
    gpg --list-keys $EMAIL
  #+end_src

*** Files

Most of the work is serving two static files.  Go into your web root:

#+begin_src sh :var PUBLIC_HTML="../../tmp/hugo/static/" :session wkd
  cd $PUBLIC_HTML
#+end_src

**** ~/.well-known/openpgpkey/policy~

There are [[https://www.ietf.org/archive/id/draft-koch-openpgp-webkey-service-14.html#name-policy-flags][options]], but in basic usage, all we need to do is serve a
blank file.

#+begin_src sh :session wkd
  mkdir -p .well-known/openpgpkey
  touch .well-known/openpgpkey/policy
#+end_src

**** ~/.well-known/openpgpkey/hu/:hash~

The key is stored at hash of the local part of the username.
Calculate with =gpg-wks-client=.  Alternatively, Keyoxide has a [[https://keyoxide.org/util/wkd][web
implementation]].

#+begin_src sh :session wkd
  WKDHASH=$(gpg-wks-client --print-wkd-hash $EMAIL | awk '{print $1}')
#+end_src

Export your key, unarmored, to be served in that file.

#+begin_src sh :session wkd
  mkdir -p .well-known/openpgpkey/hu/
  gpg --export $KEY_ID > .well-known/openpgpkey/hu/$WKDHASH
#+end_src

*** Headers

These resources should allow cross-origin requests from any domain.
We deploy to Netlify, and can [[https://docs.netlify.com/configure-builds/file-based-configuration/#headers][configure this in ~netlify.toml~]].

#+begin_src conf-toml :tangle ../../tmp/netlify.toml.d/wkd.toml :eval no :mkdirp yes
  [[headers]]
    for = "/.well-known/openpgpkey/*"
    [headers.values]
      Access-Control-Allow-Origin = "*"
#+end_src

*** Testing

Test your work with =gpg-wks-client=:

#+begin_src sh :eval query
  gpg-wks-client -v --check $EMAIL
#+end_src

You should see something like this:

#+begin_example
gpg-wks-client: public key for 'ross@rossabaker.com' found via WKD
gpg-wks-client: gpg: Total number processed: 1
gpg-wks-client: fingerprint: 904C153733DBB0106915C0BD975BE5BC29D92CA5
gpg-wks-client:     user-id: Ross A. Baker <ross@rossabaker.com>
gpg-wks-client:     created: Tue Jan 30 22:24:27 2018 EST
gpg-wks-client:   addr-spec: ross@rossabaker.com
#+end_example

** DONE Website bundle                                              :website:
CLOSED: [2022-08-24 Wed 15:04 EDT]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: website
:END:

*** Website
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_TITLE: Website
:EXPORT_HUGO_LASTMOD: [2022-08-24 Wed 15:04 EDT]
:END:

[[https://rossabaker.com/][rossabaker.com]] is sourced from an Org file.  We [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] the
configuration, export the content to Markdown with with [[https://ox-hugo.scripter.co][ox-hugo]], and
convert the Markdown to HTML with [[https://gohugo.io/][Hugo]].

*** DONE Hugo configuration                                    :hugo:ox_hugo:
CLOSED: [2022-09-01 Thu 16:48 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: hugo
:EXPORT_HUGO_LASTMOD: [2023-08-26 Sat 14:43 EDT]
:header-args+: :code-license CC0-1.0
:END:

#+begin_description
rossabaker.com is built with Hugo.  This walks through how we
configure it to handle generated sources and syntax highlighting,
among other problems.
#+end_description

Hugo can be configured with either TOML or YAML.  I spent my weirdness
budget on a literate config, so let's stick to the default.
#+hugo:more
#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  baseURL = 'https://rossabaker.com'
  languageCode = 'en-us'
  title = 'Ross A. Baker'
#+end_src

**** Mounts

Because all this org stuff mucks with the [[https://gohugo.io/getting-started/directory-structure/#readout][standard directory structure]],
we have to give Hugo a few extra hints.  [[https://github.com/gohugoio/hugo/issues/6457#issuecomment-546580193][=assetDir= is "legacy"]], so
we'll use [[https://gohugo.io/hugo-modules/configuration/#module-config-mounts][module mounts]].

#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  [[module.mounts]]
    source = 'tmp/hugo/layouts'
    target = 'layouts'
  [[module.mounts]]
    source = 'tmp/hugo/content'
    target = 'content'
  [[module.mounts]]
    source = 'src/hugo/content'
    target = 'content'
  [[module.mounts]]
    source = 'tmp/hugo/assets'
    target = 'assets'
  [[module.mounts]]
    source = 'src/hugo/assets'
    target = 'assets'
  [[module.mounts]]
    source = 'src/hugo/static'
    target = 'static'
  [[module.mounts]]
    source = 'tmp/hugo/static'
    target = 'static'
#+end_src

**** General site parameters

The =css= parameter lets us add custom style sheets to the asset
pipeline.

- [[https://csstools.github.io/sanitize.css/][sanitize.css]] is a CSS library, licensed [[https://creativecommons.org/publicdomain/zero/1.0/][CC0 1.0]].  It provides:
  - ~sanitize.css~ is a basic reset
  - ~assets.css~ constrains some widths to 100%
- ~chroma.css~ is [[*Syntax highlighting][generated below]].

#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  [Params]
    css = [ 'sanitize.css', 'assets.css', 'cromulent.css', 'chroma.css' ]
    js = [ 'copy-button.js' ]
    description = "A perfectly cromulent developer."
    username = 'rossabaker'

    [Params.source]
      url = "https://github.com/rossabaker/cromulent"
#+end_src

**** ox-hugo

ox-hugo [[https://ox-hugo.scripter.co/doc/goldmark/#enable-unsafe-html][recommends Goldmark]].  The =unsafe= flag is not as bad as it
sounds:

#+begin_quote
While that setting sounds scary, all that does is allow have inline
HTML in your Markdown, as CommonMark allows!
#+end_quote

#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  [markup.goldmark.renderer]
    unsafe = true
#+end_src

**** Syntax highlighting

The classless style is classless.

#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  [markup.highlight]
    noClasses = false
#+end_src

We can use [[https://gohugo.io/commands/hugo_gen_chromastyles/][=hugo gen chromastyles=]] to create our ~chroma.css~ file.
It even supports our favorite Emacs theme, [[/configs/emacs/#modus-themes][Modus]]!

#+name: chroma-css
#+begin_src sh :results verbatim :eval yes
  hugo gen chromastyles --style=modus-operandi
#+end_src

#+begin_src css :tangle ../../tmp/hugo/assets/css/chroma.css :noweb yes :exports none
  <<chroma-css()>>
#+end_src

***** TODO Bad link                                                :noexport:

The Emacs link above collides with a tag and results in an ambiguous
relref.  Can we figure out a solution that works in both the exported
HTML and Org?

*** DONE Templates                                                :hugo:html:
CLOSED: [2022-09-01 Thu 16:53 EDT]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: templates
:header-args+: :code-license CC0-1.0
:END:

**** DONE Index
CLOSED: [2022-09-02 Fri 11:28 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_TITLE: Templates
:END:

#+begin_description
Defines the Hugo templates employed by ~rossabaker.com~.
#+end_description

I've eschewed the [[https://themes.gohugo.io/][many community themes]] to lay everything out from
scratch.  I took over a decade off front ends and wanted to see what
I've missed.  If you have no such need, don't follow my footsteps.
There is a lot to unpack here.

**** DONE Base template
CLOSED: [2022-09-02 Fri 09:17 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: base-template
:END:

This [[https://gohugo.io/templates/base/][base template]] defines the outermost HTML for single pages and
lists alike.  Nothing here is extraordinary.  It is a simple
foundation for semantic HTML.  It specifies four blocks:
- [[*Head template][~head~]]
- [[*Header template][~header~]]
- ~main~
- [[*Footer template][~footer~]]
#+hugo:more
All but ~main~ provide a default value.  There is no notion of
"abstract" in a hugo template, so we can't enforce that every other
template provide a ~main~, but this is the expectation.

#+begin_src html :tangle ../../tmp/hugo/layouts/_default/baseof.html
  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{{ site.Language.Lang }}" lang="{{ site.Language.Lang }}">
      <head>
          {{ block "head" . }}
              {{ partial "head" . }}
          {{ end }}
      </head>

      <body>
          <header>
              {{ block "header" . }}
                  {{ partial "header.html" . }}
              {{ end }}
          </header>

          <main>
              {{ block "main" . }}
              {{ end }}
          </main>

          <footer>
              {{ block "footer" . }}
                  {{ partial "footer.html" . }}
              {{ end }}
          </footer>
      </body>
  </html>
#+end_src

**** DONE Single-page template
CLOSED: [2022-09-02 Fri 12:53 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: single
:END:

Most pages on the site are "single pages".  These are generally the
subtrees in the [[https://github.com/rossabaker/cromulent/blob/main/src/org/cromulent.org][source]] with ~EXPORT_FILE_NAME~ not equal to ~_index~.
Think of them as the articles.  Indeed, we mark them up in an
~<article>~ tag.
#+hugo:more

#+begin_src html :tangle ../../tmp/hugo/layouts/_default/single.html
  {{ define "main" }}
      <article>
          <header>
              <h1>{{ .Title }}</h1>
          </header>
          {{ .Content }}
          <footer>
              {{ partial "article-info" . }}
          </footer>
      </article>
  {{ end }}
#+end_src

Further customization is possible by [[https://gohugo.io/content-management/types/][type]].  Certain types get their own
custom [[https://gohugo.io/content-management/front-matter/][front matter]], which we can render with a consistent look and feel.

I would like to define ~article-header~ and ~article-main~ blocks in
this template so less gets repeated in the section overrides.  I'm
still missing something.

**** DONE Home page template
CLOSED: [2022-10-12 Wed 00:05 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: home
:EXPORT_HUGO_LASTMOD: [2023-07-02 Sun 23:52 EDT]
:END:

The home page is rendered as a paginated list.  We want branch bundles,
so we have to exclude the home page, taxonomies, and terms from the
pages.

#+hugo:more

#+begin_src html :tangle ../../tmp/hugo/layouts/index.html
  {{ define "main" }}
      <article class="home-page">
	  <h1 class="site-title">{{ .Site.Title }}</h1>
	  {{ with .Content }}
	      {{ . }}
	  {{ end }}

	  <section class="recently-updated">
	      <h2>Recently updated</h2>

	      <ul class="article-summaries">
		  {{ $paginator := .Paginate (where site.Pages.ByLastmod.Reverse "Kind" "not in" (slice "home" "term" "taxonomy")) }}
		  {{ range $paginator.Pages }}
		      <li>
			  {{ partial "article-summary" . }}
		      </li>
		  {{ end}}
	      </ul>
	      {{ template "_internal/pagination.html" . }}
	  </section>
      </article>
  {{ end }}
#+end_src

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  ul.pagination {
      list-style: none;
      margin: 0;
      padding: 0;
      display: inline;
  }

  ul.pagination li {
      display: inline;
  }
#+end_src

**** DONE Talks template                                                :css:
CLOSED: [2022-09-02 Fri 12:48 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: talks
:END:
c
Talks get their own single-page template based on custom front matter.
#+hugo:more

- ~.Venue~ :: Where the talk was delivered.  Supports markdown.  Pro-tip:
  put it in quotes if it begins with a link.
- ~.Source~ :: The source repository associated with the talk.
- ~.Slides~ :: If it's a =*.pdf=, it's rendered as an ~<object>~.
  Otherwise, put it in an ~<iframe>~.  Make sure it links to content
  served over https, or it won't load.

Metadata appears in the article header.

#+begin_src html :tangle ../../tmp/hugo/layouts/talks/single.html
  {{ define "article-header" }}
      <h1>{{ .Title }}</h1>
      <dl>
          {{ if .Params.venue }}
              <dt>Venue</dt>
              <dd>{{ .Params.Venue | markdownify }}</dd>

              <dt>Source code</dt>
              <dd><a href="{{ .Params.Source }}">{{ .Params.Source }}</a></dd>
          {{ end }}
      </dl>
  {{ end }}
#+end_src

The content should be the abstract of the talk.  Slides are rendered
inline below.

#+begin_src html :tangle ../../tmp/hugo/layouts/talks/single.html
  {{ define "article-main" }}
      {{ .Content }}
      {{ if .Params.Slides }}
          <div class="slides">
              {{ if strings.HasSuffix .Params.Slides ".pdf" }}
                  <object data="{{ .Params.Slides | absURL }}" type="application/pdf">
                  </object>
              {{ else }}
                  <iframe src="{{ .Params.Slides | absURL }}">
                  </iframe>
              {{ end }}
          </div>
          <p>Download the <a href="{{ .Params.Slides | absURL }}">slides</a>.
      {{ end }}
  {{ end }}
#+end_src

This is approximately how Bootstrap styles an embed, and is optimized
for a 4x3 slide deck.  We're going to need something more
sophisticated eventually.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .slides {
      position: relative;
  }
  .slides::before {
      content: "";
      display: block;
      padding-top: 78%;
  }
  .slides object, .slides iframe {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      height: 100%;
      width: 100%;
  }
#+end_src

**** DONE List template
CLOSED: [2022-09-02 Fri 12:55 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: list
:EXPORT_HUGO_LASTMOD: [2023-08-05 Sat 23:33 EDT]
:END:

The list template renders for the home page, section listings,
taxonomies, and terms.  By default, we render our article summaries
in reverse order of modification.
#+hugo:more
#+begin_src html :tangle ../../tmp/hugo/layouts/_default/list.html
  {{ define "main" }}
      <article>
	  <header>
	      <h1>{{ .Title }}</h1>
	  </header>

	  {{ with .Content }}
	      {{ . }}
	  {{ end }}

	  <section class="recently-updated">
	      <h2>Recently updated</h2>

	      <ul class="article-summaries">
		  {{ range .Pages.ByLastmod.Reverse }}
		      <li>
			  {{ partial "article-summary" . }}
		      </li>
		  {{ end}}
	      </ul>
	  </section>
      </article>
  {{ end }}
#+end_src

In case anything is floated in the content, clear it here.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  article .recently-updated {
      clear: both;
  }
#+end_src

**** DONE Taxonomy tag cloud              :taxonomy:tag_cloud:css:emacs_lisp:
CLOSED: [2022-09-02 Fri 13:07 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: terms
:END:

This is the taxonomy list page, which is rendered as a tag cloud.  We
use it for categories and tags.  Terms are rendered in a font
proportional to the logarithm of its page count.
#+hugo:more

The least-used term is assigned an importance between =0=.  The most
used term is assigned an importance of =6=.  Everything else falls in
between.  We choose a logarithm because we expect the distribution to
roughly follow a power law.

#+begin_src html :tangle ../../tmp/hugo/layouts/_default/terms.html
  {{ define "main" }}
      <h1>{{ .Name }}</h1>
      <ul class="terms {{.Name | urlize}}">
          {{ $plural := .Data.Plural }}
          {{ $max := math.Log (len (index .Data.Terms.ByCount 0).Pages) }}
          {{ range .Data.Terms.Alphabetical }}
              {{ $size := math.Floor (mul (div (math.Log (len .Pages)) $max) 6) }}
              <li>
                  <a href="/{{ $plural }}/{{ .Name }}" class="{{ printf "terms-size-%.0f" $size }}">{{ .Name }}</a>
                  <sub>{{ len .Pages }}</sub>
              </li>
          {{ end }}
      </ul>

      {{ with .Content }}
          {{ . }}
      {{ end }}
  {{ end }}
#+end_src

Creating font sizes for the CSS is boring.  Let's spit them out in Emacs Lisp!

#+name: terms-sizes-css
#+begin_src emacs-lisp
  (mapconcat (lambda (x)
               (let ((size (expt 2.0 (/ (- x 2) 4.0))))
                 (format ".terms-size-%i { font-size: %1.3fem; }" x size)))
             (number-sequence 0 6)
             "\n")
#+end_src

Look at all the CSS we didn't have to write:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css :noweb yes
  <<terms-sizes-css()>>
#+end_src

We still need to hand write a bit.  This centers the ~.terms~ and
reserves enough line height for the largest:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .terms {
      list-style: none;
      padding-left: 0;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      line-height: 2.25em;
  }
#+end_src

The elements are a regular inline list:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .terms li {
      display: inline;
      margin: 0 0.5rem;
  }
#+end_src

Our site convention is that tags receive a ~#~ prefix and categories
get a ~@~.  Give them a tasteful, muted style:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .terms.tags li::before {
      content: "#";
  }
  .terms.categories li::before {
      content: "@";
  }
#+end_src

Mute the color and count, because it's all about the terms:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .terms li {
      color: #aaa;
  }
#+end_src

**** DONE Taxonomy term template
CLOSED: [2022-09-02 Fri 13:10 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: term
:EXPORT_HUGO_LASTMOD: [2023-07-02 Sun 23:51 EDT]
:END:

Taxonomy terms (e.g., ~/categories/tech~) are rendered in a simple
template that lists the article summaries in reverse order of modification.
#+hugo:more
#+begin_src html :tangle ../../tmp/hugo/layouts/_default/term.html
  {{ define "main" }}
      <h1>{{ .Name }}</h1>

      {{ with .Content }}
	  {{ . }}
      {{ end }}

      <ul class="article-summaries">
	  {{ $paginator := .Paginate .Pages.ByLastmod.Reverse 10 }}
	  {{ range $paginator.Pages }}
	      <li>
		  {{ partial "article-summary" . }}
	      </li>
	  {{ end }}
      </ul>
      {{ template "_internal/pagination.html" . }}
  {{ end }}
#+end_src

**** DONE Head template
CLOSED: [2022-09-02 Fri 10:29 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: head
:EXPORT_HUGO_LASTMOD: [2023-08-06 Sun 00:34 EDT]
:END:

This template defines our default ~<head>~ element, and is not often
customized.  Most of it originated in [[https://gitlab.com/hugo-mwe/hugo-mwe][hugo-mwe]].
#+hugo:more
UTF-8 ought to be enough characters for anyone.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  <meta charset="utf-8">
#+end_src

[[https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag][Improve responsiveness]].

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  <meta name="viewport" content="width=device-width, initial-scale=1">
#+end_src

Set the title tag.  Always include the site title.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  {{- if .IsHome }}
      <title>{{ site.Title }}</title>
  {{- else }}
      <title>{{ site.Title }}: {{ .Title }}</title>
  {{- end }}
#+end_src

Set the description, either at the site or page level.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  {{ $description := cond .IsHome .Site.Params.Description .Params.Description }}
  {{ if $description }}
      <meta name="description" content="{{ $description }}">
  {{ end }}
#+end_src

Load our own CSS and JavaScript through the [[https://gohugo.io/hugo-pipes/introduction/][Hugo asset pipeline]].

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  {{ range $css_file := site.Params.css }}
      {{ $css_asset_path := printf "css/%s" $css_file }}
      {{ $css := resources.Get $css_asset_path | minify | fingerprint }}
      <link rel="stylesheet" href="{{ $css.RelPermalink }}">
      <!-- Enable HTTP/2 Push -->
      <link rel="preload" href="{{ $css.RelPermalink }}" as="style">
  {{ end }}

  {{ range $js_file := site.Params.js }}
      {{ $js_asset_path := printf "js/%s" $js_file }}
      {{ $js := resources.Get $js_asset_path | minify | fingerprint }}
      <script defer src="{{ $js.RelPermalink }}"></script>
      <!-- Enable HTTP/2 Push -->
      <link rel="preload" href="{{ $js.RelPermalink }}" as="script">
  {{ end }}
#+end_src

Add our avatar as our shortcut icon.  Some people go crazy with
different sizes and proprietary Apple links.  Not today.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  <link rel="icon" href="/img/profile.ico">
#+end_src

Render our RSS feed.  Putting it in a ~<link>~ integrates with various
[[https://addons.mozilla.org/en-US/firefox/search/?q=rss][RSS readers]].

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  {{ range .AlternativeOutputFormats -}}
      {{ printf `<link rel="%s" type="%s" href="%s" title="%s" />` .Rel .MediaType.Type .Permalink (printf "%s for %s" (.Name | title) site.Title) | safeHTML }}
  {{ end -}}
#+end_src

Set up [[https://indieauth.com/pgp][IndieAuth with PGP]].

I can't tell whether I need =authorization_endpoint=, but I'm getting
an error logging into the Indiewebring without it.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/head.html
  {{ if .IsHome }}
  <link rel="pgpkey" href="/.well-known/openpgpkey/hu/eimhw3om3jynrs7fo7r7rrssmt1o4yxp">
  <link rel="authorization_endpoint" href="https://indieauth.com/auth">
  {{ end }}
#+end_src

**** DONE Article summary                                               :css:
CLOSED: [2022-09-02 Fri 13:12 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: article-summary
:EXPORT_HUGO_LASTMOD: [2022-09-04 Sun 21:12 EDT]
:END:

Provide a standard article summary for our various list templates.  It
includes the title, dates, category, tags, and either the page
description or summary.
#+hugo:more

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/article-summary.html
  <article>
      <header>
          <h3><a href="{{ .Permalink }}">{{ .Title }}</a></h3>
      </header>
      {{ if .Description }}
          {{ .Description | markdownify }}
      {{ else if .Truncated }}
          {{ .Summary }}
      {{ else }}
          {{ .Content }}
      {{ end }}
      {{ if .Params.Canonical }}
          <small><a href="{{ .Params.Canonical }}">Go to original</a></small>
      {{ end }}
      <footer>
        {{ partial "article-info" . }}
      </footer>
  </article>
#+end_src

A list of summaries should be unbulleted and separated by a thin line:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  ul.article-summaries {
      list-style: none;
      margin: 0;
      padding: 0;
  }

  ul.article-summaries > li {
      border-bottom: thin solid #999;
  }
#+end_src

**** DONE Article info                                                  :css:
CLOSED: [2022-09-02 Fri 13:16 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: article-info
:END:

Article info appears at the bottom of every article and article
summary on the site.  It describes:

- The content type
- The date
- The modification date
- The category, usually one, prefixed with ~@~
- The tags, usually many, prefixed with ~#~
#+hugo:more
~<dl>~ has long been my favorite idiosyncratic HTML tag.  Maybe I'm
abusing it here, but I like the result.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/article-info.html
  <div class="article-info">
      <dl>
          <div class="type">
              <dt>Type</dt>
              {{ if ne .Type "page" }}
                  <dd><a href="{{ .Type | relURL }}">{{ .Type | singularize | humanize }}</a></dd>
              {{ else }}
                  <dd>Page</dd>
              {{ end }}
          </div>
          <div class="published">
              <dt>Published</dt>
              <dd>{{ dateFormat "2006-01-02" .Date }}</dd>
          </div>
          <div class="last-modified">
              <dt>Last updated</dt>
              <dd>{{ dateFormat "2006-01-02" .Lastmod }}</dd>
          </div>
          <div class="taxonomies">
              <dt>Taxonomies</dt>
              <dd>
                  <dl>
                      {{ if .Params.categories }}
                          <dt>Categories</dt>
                          <dd>
                              <ul>
                                  {{ range (sort .Params.categories) }}
                                      <li class="category"><a href="{{ (print "/categories/" .) | absURL }}">{{ . | humanize }}</a></li>
                                  {{ end }}
                              </ul>
                          </dd>
                      {{ end }}

                      {{ if .Params.tags }}
                          <dt>Tags</dt>
                          <dd>
                              <ul>
                                  {{ range (sort .Params.tags) }}
                                      <li class="tag"><a href="{{ (print "/tags/" .) | absURL }}">{{ . }}</a></li>
                                  {{ end }}
                              </ul>
                          </dd>
                      {{ end }}
                  </dl>
              </dd>
          </div>
      </dl>
  </div>
#+end_src

CSS.  Lunch hour is almost over, so I'll describe it another day.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .article-info {
      margin: 1em 0;
      font-size: 0.816em;
  }

  .article-info .type dt {
      display: none;
  }

  .article-info .type dd {
      display: inline;
      margin-left: 0;
  }

  .article-info .type, .article-info .published, .article-info .last-modified {
      display: inline-flex;
  }

  .published dt, .article-info .last-modified dt {
      display: inline;
      font-weight: normal;
      text-transform: lowercase;
      color: #999;
      margin-right: 1ch;
  }

  .article-info .published dt, .article-info .last-modified dt {
      display: inline;
      font-weight: normal;
      text-transform: lowercase;
      color: #999;
      margin-right: 1ch;
  }

  .article-info .published dd, .article-info .last-modified dd {
      display: inline;
      margin-left: 0;
      margin-right: 1ch;
  }

  .article-info .taxonomies > dt {
      display: none;
  }

  .article-info .taxonomies dd dl dt {
      display: none;
  }

  .article-info .taxonomies dd {
      margin-left: 0;
  }

  .article-info .taxonomies dd dl dd {
      display: inline;
  }

  .article-info .taxonomies dd dl dd ul {
      list-style: none;
      margin: 0;
      padding: 0;
      display: inline;
  }

  .article-info .taxonomies dd dl dd li {
      display: inline;
  }

  .article-info .taxonomies dd dl dd li.category::before {
      content: '@';
      color: #666;
  }

  .article-info .taxonomies dd dl dd li.tag::before {
      content: '#';
      margin-left: 1ch;
      color: #666;
  }

  .article-info a {
      text-decoration: none;
  }
#+end_src

**** DONE Header template                                    :css:emacs_lisp:
CLOSED: [2022-09-02 Fri 11:41 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: header
:EXPORT_HUGO_LASTMOD: [2023-08-11 Fri 00:13 EDT]
:END:

Our header is straightforward semantic HTML, with a ~<h1>~, ~<p>~,
~<nav>~, etc.  It establishes the brand, and my brand is to be a
complete dweeb.  Therefore, we're going to abuse CSS to render it as
an Emacs Lisp definition.
#+hugo:more

***** HTML

We reference a ~username~ site parameter, because my full name doesn't
make any sense as a Lisp variable.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/header.html
  <strong><a href="{{ "/" | relURL }}">{{ .Site.Params.username }}</a></strong>
  <p>{{ .Site.Params.description }}</p>
  <nav>
      <ul>
          {{ range .Site.Menus.main }}
              <li><a href="{{ .URL }}">{{ .Name | urlize }}</a></li>
          {{ end }}
      </ul>
  </nav>
#+end_src

***** Configuration

The menu is defined in the site config.  Higher weights come last.

#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  [[menu.main]]
  name = 'About'
  url = '/about'
  weight = 1

  [[menu.main]]
  name = 'Blog'
  url = '/blog'
  weight = 100

  [[menu.main]]
  name = 'Talks'
  url = '/talks'
  weight = 120

  [[menu.main]]
  name = 'Projects'
  url = '/projects'
  weight = 130

  [[menu.main]]
  name = 'Configs'
  url = '/configs'
  weight = 140

  [[menu.main]]
  name = 'Categories'
  url = '/categories'
  weight = 500

  [[menu.main]]
  name = 'Tags'
  url = '/tags'
  weight = 510
#+end_src

***** CSS

It's monospace, because it's "code".

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header {
      font-family: var(--cromulent-monospace-font);
  }
#+end_src

Render each element as a flex:

Introduce the Lisp syntax as CSS content.  The double paren on the
last child is sloppy, but I haven't figured out another way to hug it.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header strong::before {
      content: "(defvar ";
  }
  body > header p::before {
      content: "\"";
  }
  body > header p::after {
      content: "\"";
  }
  body > header nav::before {
      content: "'(";
  }
  body > header > nav > ul > li:last-child::after {
      content: "))";
      white-space: nowrap;
  }
#+end_src

Mute all the frou-frou.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header::before, body > header::after,
  body > header ::before, body > header ::after {
      font-weight: normal; 
      white-space: pre-wrap;
  }
#+end_src

~M-x indent-region~:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header :first-child {
      padding-left: 0;
  }

  body > header > * {
      padding-left: 2ch;
  }
#+end_src

It's fine and good that the header is bold, but otherwise we want it
to look like the rest.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header strong {
      font-size: 1em;
      line-height: inherit;
      margin: 0;
      font-family: var(--cromulent-monospace-font);
  }
#+end_src

The site subtitle becomes our "docstring".

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header p {
      margin: 0;
      font-style: italic;
  }
#+end_src

Setting ~display: inline-flex~ on the nav indents things properly in
the quoted list, even across multiple lines.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header > nav {
      display: inline-flex;
  }
#+end_src

The ~ul~ is also ~inline-flex~, to eat the whitespace in the HTML and
let ~li~ set their own padding.  ~flex-wrap~ breaks it across lines
on narrow viewports.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header ul {
      display: inline-flex;
      flex-wrap: wrap;
      list-style: none;
      margin: 0;
  }
#+end_src

Render the HTML list as a Lispy, inline list.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > header li {
      display: inline;
  }
  body > header li {
      padding-right: 1ch;
  }
  body > header li:last-child {
      padding-right: 0;
  }
#+end_src

**** DONE Footer template
CLOSED: [2022-09-02 Fri 10:35 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: footer
:EXPORT_HUGO_LASTMOD: [2023-08-09 Wed 22:12 EDT]
:END:

The footer is a simple ~<address>~ [[http://microformats.org/wiki/hcard][hCard]] with our name, pronouns, and
socials.  Our social links will use the [[https://microformats.org/wiki/rel-me][rel-me microformat]] for
verification.
#+hugo:more

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/footer.html
  <address class="h-card vcard">
      <img class="u-photo" alt="Profile photo of Ross A. Baker" src="/img/profile.jpg" />
      <a class="u-url u-uid p-name" href="https://rossabaker.com/">
	  <span class="p-given-name">Ross</span>
	  <span class="p-additional-name"><abbr>A.</abbr></span>
	  <span class="p-family-name">Baker</span>
      </a>
      <small><span class="u-pronoun">(he/him)</span></small><br />
      {{ partial "contact-info-icons" . }}
  </address>

  <p><a href="/license/">License</a> <a href="/security/">Security policy</a></p>

  <small class="indiewebring">
    <a href="https://xn--sr8hvo.ws/previous">←</a>
    An <a href="https://xn--sr8hvo.ws">IndieWeb Webring</a> 🕸💍
    <a href="https://xn--sr8hvo.ws/next">→</a>
  </small>
#+end_src

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  address {
      display: inline-block;
      width: 100%;
  }

  address ul {
      display: inline-flex;
      list-style-type: none;
      margin: 0;
      padding-left: 0;
  }

  address li {
      display: inline;
      margin-left: 1ch;
  }

  address li:first-child {
      margin-left: 0;
  }

  .h-card .u-photo {
      display: block;
      float: left;
      width: 3.2rem;
      height: 3.2rem;
      border-radius: 50%;
      margin: 0 1rem;
  }

  .indiewebring {
      width: 100%;
      display: inline-block;
      text-align: center;
  }
#+end_src

**** DONE Heading rendering
CLOSED: [2022-09-04 Sun 17:50 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: heading-renderer
:EXPORT_HUGO_LASTMOD: [2022-09-21 Wed 11:45 EDT]
:END:

We [[https://gohugo.io/templates/render-hooks][hook]] into the heading renderer to generate anchor targets for subheadings.
#+hugo:more
Note that these only work for markdown headings.  Headings created in
our other layouts do not get these for free.

***** HTML

Put this file in =layouts/_default/_markup/render-heading.html=:

#+begin_src html :tangle ../../tmp/hugo/layouts/_default/_markup/render-heading.html
  <h{{ .Level }} id="{{ .Anchor | safeURL }}">
      {{ .Text | safeHTML }}
      <a class="heading-anchor" href="#{{ .Anchor | safeURL }}">#</a>
  </h{{ .Level }}>
#+end_src

***** CSS

Mute the header anchors until hover:

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .heading-anchor {
      color: #ccc;
      text-decoration: none;
  }
  a.heading-anchor:hover {
      color: #00f;
  }
#+end_src

**** DONE Contact info templates
CLOSED: [2022-09-12 Mon 22:11 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: contact-info
:EXPORT_HUGO_LASTMOD: [2023-08-20 Sun 23:45 EDT]
:END:

Contact info is rendered in two places: in the [[*Footer template][footer template]] and on the
[[*Ross A. Baker][about page]].  They share a common definition.
#+hugo:more
***** Site parameters

We'll store the contacts in the site parameters of ~config.toml~.

Keys are:
- ~network~ :: required
- ~icon~ :: required when ~support~ equals ~'supported'~.  Defaults to ~network~.
- ~handle~ :: required when ~support~ equals ~'supported'~.
- ~url~ :: required when ~support~ equals ~'supported'~.
- ~support~ :: should be one of
  - ~'supported'~
  - ~'experimental'~
  - ~'deprecated'~

#+begin_src conf-toml :tangle ../../tmp/hugo/config.toml
  [[Params.contacts]]
  network = 'Email'
  handle = 'ross@rossabaker.com'
  url = 'mailto:ross@rossabaker.com'
  support = 'supported'
  relMe = false

  [[Params.contacts]]
  network = 'Mastodon'
  handle = '@ross@rossabaker.com'
  url = 'https://social.rossabaker.com/@ross'
  support = 'supported'

  [[Params.contacts]]
  network = 'Matrix'
  handle = '@ross:rossabaker.com'
  url = 'https://matrix.to/#/@ross:rossabaker.com'
  support = 'supported'
  relMe = false

  [[Params.contacts]]
  network = 'GitHub'
  handle = '@rossabaker'
  url = 'https://github.com/rossabaker'
  support = 'supported'

  [[Params.contacts]]
  network = 'Codeberg'
  handle = '@rossabaker'
  url = 'https://codeberg.org/rossabaker'
  support = 'supported'

  [[Params.contacts]]
  network = 'Cohost'
  handle = '@rossabaker'
  url = 'https://cohost.org/rossabaker'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Reddit'
  handle = 'u/rossabaker'
  url = 'https://reddit.com/user/rossabaker'
  support = 'experimental'

  [[Params.contacts]]
  network = 'Discord'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Facebook'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'GitLab'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Gitter'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Instagram'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Keybase'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'LinkedIn'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Signal'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Twitch'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Twitter'
  handle = '@rossabaker'
  url = 'https://twitter.com/rossabaker'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'YouTube'
  support = 'deprecated'

  [[Params.contacts]]
  network = 'Finger'
  handle = 'rossabaker@happynetbox.com'
  url = '/projects/finger'
  support = 'supported'
  relMe = false

  [[Params.contacts]]
  network = 'Keyoxide'
  handle = 'ross@rossabaker.com'
  url = 'https://keyoxide.org/ross%40rossabaker.com'
  support = 'supported'
  relMe = false
#+end_src

***** ~contact-info-icons~ partial template

By rendering brand icons with the Hugo pipe, we can more ethically
source them with attributions in their headers without blowing out our
page size.

- =$icon= is the icon name, relative to ~src/hugo/assets~.
- =$svg= minifies it through [[https://gohugo.io/hugo-pipes/minification/][Hugo pipes]].
- =.Content= reads the minified SVG
- =safeHTML= unescapes it, because we want them inlined into the page.

#+begin_src html :tangle ../../tmp/hugo/layouts/partials/contact-info-icons.html
  <ul class="contacts">
      {{ range where .Site.Params.contacts "support" "eq" "supported" }}
	<li><a href="{{ .url | safeURL }}" {{ with (not (eq .relMe false)) }}rel="me"{{ end }}>
	    {{ $icon := printf "%s/%s.svg" "img/icons" (.icon | default (.network | urlize)) }}
	    {{ $svg := resources.Get $icon | resources.Minify }}
	    {{ $svg.Content | safeHTML }}
	</a></li>
      {{ end }}
  </ul>
#+end_src

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  ul.contacts svg {
      width: 1.5em;
      height: 1.5em;
      fill: var(--link-color);
  }
#+end_src

***** ~contact-info-dl~ shortcode

~contact-info-dl~ renders all the contacts in a simple definition
list.  It filters by a `support` parameter, so we can separate the
supported contacts from the experimental ones.

#+begin_src html :tangle ../../tmp/hugo/layouts/shortcodes/contact-info-dl.html
  <dl>
      {{ range where .Site.Params.contacts "support" "eq" (.Get "support") }}
          <dt>{{ .network }}</dt>
          {{ if .handle }}
              <dd>
              {{ if .url }}
                <a href="{{ .url }}">{{ .handle }}</a>
              {{ else }}
                {{ .handle }}
              {{ end }}
              </dd>
          {{ end }}
      {{ end }}
  </dl>
#+end_src

*** DONE Build website with Nix                      :hugo:ox_hugo:nix:babel:
CLOSED: [2022-09-01 Thu 16:54 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: build
:header-args+: :code-license MIT
:EXPORT_HUGO_LASTMOD: [2023-09-10 Sun 01:00 EDT]
:END:

The website is just another package within our flake.

**** Export script

~export.el~ is a small Emacs script that finds the Org file and
exports its contents with ox-hugo.

#+begin_src emacs-lisp :tangle ../../gen/website/export.el
  (require 'ob-dot)
  (require 'ob-shell)
  (require 'rab-ox-hugo)

  (rab/ox-hugo-mode)

  (with-current-buffer (find-file-noselect "src/org/cromulent.org")
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)
      (org-hugo-export-wim-to-md t)))
#+end_src

**** Nix derivation

The build first runs the export script to tangle the files and export
to Hugo sources.  Hugo is then run to create a =public/= directory.

In the check phase, we run [[https://github.com/svenkreiss/html5validator][html5validator]] and [[https://github.com/lycheeverse/lychee][lychee]] to validate HTML
and links.

Finally, the =public/= directory rendered by Hugo is copied to the
derivation output.

#+begin_src nix :tangle ../../gen/website/default.nix
  { src, emacs, gnupg, graphviz, hugo, html5validator, hyperlink, stdenv }:

  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    nativeBuildInputs = [
      emacs
      gnupg
      graphviz
      hugo
      html5validator
      hyperlink
    ];
    buildPhase = ''
      cd ..
      export PATH=${gnupg}/bin:$PATH

      ${emacs}/bin/emacs -Q --batch -l ${./export.el}

      # Reassemble netlify.toml from its constitutents
      for toml in tmp/netlify.toml.d/*; do
        cat $toml >> tmp/hugo/static/netlify.toml
      done

      ${hugo}/bin/hugo --config tmp/hugo/config.toml
    '';

    doCheck = true;
    checkPhase = ''
      html5validator --log INFO --root public
      hyperlink public/ --check-anchors
    '';

    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

To avoid [[https://nixos.wiki/wiki/Import_From_Derivation][Import From Derivation]], this Nix expression is [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] and
[[/configs/git-repository/#committed-generated-sources][committed as generated source]].

**** Development

For a more iterative experience with live reload in the browser, try:

#+begin_src sh :tangle no :code-license CC0-1.0
  serve
#+end_src

**** Git ignores

Our build creates some detritus that we don't want checked into Git.

#+begin_src gitignore :tangle ../../.gitignore :code-license CC0-1.0
  /tmp/hugo/
  /.hugo_build.lock
#+end_src

*** DONE CSS baseline                                                   :css:
CLOSED: [2022-08-30 Tue 14:26 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: style
:EXPORT_HUGO_LASTMOD: [2023-09-08 Fri 14:10 CDT]
:CUSTOM_ID: css-baseline
:header-args+: :code-license MIT
:END:

We strive for [[https://en.wikipedia.org/wiki/Semantic_HTML][semantic HTML]].  The styles presented here provide a
solid foundation, independent of the [[https://gohugo.io/hugo-modules/theme-components/][Hugo theme]], or even the choice to
use Hugo at all.  These rules are presently deployed to rossabaker.com,
but could conceivably be used in future projects.
#+hugo:more

**** Box sizing

[[https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing][~border-box~]] includes the widths of the border and padding in the
width of an element.  This cuts out a lot of =<div class="container">=
nonsense.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  *, *::before, *::after {
      box-sizing: border-box;
  }
#+end_src

**** Let the body breathe

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body > * {
      padding: 1.5rem;
  }
#+end_src

**** Let the text breathe

The [[https://www.w3.org/TR/WCAG22/#visual-presentation][Web Content Accessibility Guidelines]] call for a line height of at
least 1.5.

There are more criteria there that are probably worth revisiting.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body {
      line-height: 1.6;
  }
#+end_src

**** Fonts

These used to be the [[https://en.wikipedia.org/wiki/Noto_fonts][Noto fonts]], chosen because they have good IPA
support, which floats my boat as someone who minored in linguistics.
Because Google Fonts [[https://cookie-script.com/blog/google-fonts-and-gdpr][violates the GDPR]], I self hosted them.  This
complicated the [[#license][license]] with an SIL exception.

You know what?  I'm not a typographer, and the system fonts should
support the various and sundry alphabets I may use.  I'm adapting
[[https://getbootstrap.com/docs/5.3/content/reboot/#native-font-stack][the stacks Bootstrap uses]] and moving on with my life.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  :root {
      --cromulent-system-font:
	  system-ui,
	  -apple-system,
	  "Segoe UI",
	  Roboto,
	  "Helvetica Neue",
	  "Noto Sans",
	  "Liberation Sans",
	  Arial,
	  sans-serif,
	  "Apple Color Emoji",
	  "Segoe UI Emoji",
	  "Segoe UI Symbol",
	  "Noto Color Emoji";
  }
#+end_src

GitHub's are likely a more thoughtful version for code.  They're
substantially similar to Bootstrap's anyway.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  :root {
      --cromulent-monospace-font:
	  ui-monospace,
	  SFMono-Regular,
	  "SF Mono",
	  Menlo,
	  Consolas,
	  "Liberation Mono",
	  monospace
  }
#+end_src

Now apply the system font generally, and a monospace font to traditionally
monospace elements.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body {
      font-family: var(--cromulent-system-font);
  }

  code, kbd, pre, samp, var {
      font-family: var(--cromulent-monospace-font);
  }
#+end_src

**** Responsive width

Lots of people use media queries for this, but the clamp function
gives a smooth experience as the window resizes.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  body {
      width: clamp(10em, 100%, 70em);
      padding: 0;
      margin: 0 auto;
  }
#+end_src

**** A splash of color

My beloved Indiana Hoosiers wear [[https://www.thedailyhoosier.com/did-you-know-indianas-iconic-candy-stripes-didnt-originate-in-the-basketball-program/][candy-striped pants]].  So shall this website.

#+begin_quote
We will fight for
the cream and crimson,
for the glory of old IU
#+end_quote

***** Palette

Define some CSS variables. The link color is complementary to the
crimson.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  :root {
      --color-brand: #9d2235;
      --color-brand-darker: #731927;
      --color-stripe: #ffffff;
      --link-color: #146357;
  }
#+end_src

***** Headers

Modern CSS lets us draw stripes without a repeating background GIF.
Neat.  This draws candy stripes beneath the main ~h1~.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  main h1::after {
      content: "";
      background-image: linear-gradient(to right, var(--color-stripe) 50%, var(--color-brand) 0%);
      background-size: 8px 0.5rem;
      background-repeat: repeat-x;
      background-position: bottom;
      display: block;
      width: 100%;
      height: 0.8rem;
      margin-bottom: 2.4rem;
  }
#+end_src

Changing the headers to crimson helps tie it to the decorative
stripes.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  h1, h2, h3, h4, h5, h6 {
      color: var(--color-brand);
  }
#+end_src

We'll sort out header sizes later, but the ~h1~ really needs to be
bigger now.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  h1 {
      font-size: 2em;
  }
#+end_src

***** Links

Render the links in the complementary color.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  a {
      color: var(--link-color);
  }
#+end_src

**** Redirects                                                     :noexport:

#+begin_src text :tangle ../../tmp/hugo/static/_redirects :exports none
  /configs/css /configs/website/style
#+end_src

**** Code rendering

Put a scroll bar on code samples, but only where necessary.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  pre {
      max-width: 100%;
      overflow-x: auto;
  }
#+end_src

Give the code samples a little more room to breathe.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  pre {
      border-left: #9f9f9f 0.25em solid;
      padding: 1em;
  }
#+end_src

Align the license to the right.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .code-snippet {
      position: relative;
  }

  .license {
      display: inline-flex;
      float: right;
      background: #d8d8d8;
      color: #333;
      border-radius: 0.25em;
      margin: 0;
      padding: 0 0.5ch;
      font-size: 0.625em;
  }
#+end_src

Move the copy code button, too.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .copy-code-button {
      display: inline-flex;
      float: right;
      font-size: 0.625em;
      margin: 0;
      padding: 0 0.5ch;
      font-size: 0.625em;
  }
#+end_src

***** Source block captions

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .src-block-caption {
      font-size: 0.8em;
      font-style: italic;
  }
#+end_src

I'd probably rather these weren't in the HTML, but this works for now.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .src-block-number {
      display: none;
  }
#+end_src

**** Quotes

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  blockquote {
      margin: 1.5rem 0;
      padding: 0 2rem;
      border-left: #ccc 0.25rem solid;
  }
#+end_src

**** Floats and clears

A general way to float figures.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  figure.float {
      float: right;
      margin: 0.5rem 1.5rem;
      padding: 0;
  }
#+end_src

Wherever we float, we probably want a "clearfix" wrapper.  [[https://www.cssmojo.com/the-very-latest-clearfix-reloaded/][The very
latest clearfix reloaded]], which is seven years old at the time of
writing, seems to work.

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css
  .clearfix:after {
      content: "";
      clear: both;
      display: block;
  }
#+end_src

*** DONE Webcrawler configuration :webcrawlers:rfc9309:generative_ai:twitter:
CLOSED: [2023-08-09 Wed 20:31 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: /webcrawlers
:EXPORT_HUGO_LASTMOD: [2023-08-10 Thu 14:15 EDT]
:header-args+: :code-license CC0-1.0
:END:

#+begin_description
Defines a robots.txt file to define access policies for compliant
webcrawlers according to the Robots Exclusion Protocol.
#+end_description

[[https://www.rfc-editor.org/rfc/rfc9309.txt][RFC9309]] defines the Robots Exclusion Protocol, wherein a file is
served at [[/robots.txt][~/robots.txt~]] to configure the behavior of automated
clients, or webcrawlers.

The most malicious actors will ignore this file.  It's more petulant
than effective, but I'm not one to pass up a chance to express my
contempt in conformance with an RFC.

**** Search engines

Generally, I like my content to be indexed and discoverable via search
engines, and I welcome most crawlers.

**** Generative AI

I do /not/ appreciate my content being used to train machine
learning models that regurgitate my content without attribution, in
violation of the spirit, if not the letter, of the [[#license][license]].

***** Facebook

#+begin_quote
FacebookBot crawls public web pages to improve language models for our
speech recognition technology \\
-- [[https://developers.facebook.com/docs/sharing/bot/][About Facebook Bot]]
#+end_quote

Not here, it doesn't.

#+begin_src txt :tangle ../../tmp/hugo/static/robots.txt
  User-agent: FacebookBot
  Disallow: /

#+end_src


***** OpenAI

[[https://platform.openai.com/docs/gptbot/disallowing-gptbot][Scram]].

#+begin_src txt :tangle ../../tmp/hugo/static/robots.txt
  User-agent: GPTBot
  Disallow: /

#+end_src

**** General cesspits

***** X

This will block +Twitter+ X cards.

#+begin_src txt :tangle ../../tmp/hugo/static/robots.txt
  User-agent: Twitterbot
  Disallow: /

#+end_src

** Emacs bundle                                                       :emacs:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: emacs
:END:

*** DONE Emacs config
CLOSED: [2023-02-23 Thu 23:59 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_LASTMOD: [2023-09-12 Tue 23:42 EDT]
:header-args+: :tangle-mode `,#o444 :mkdirp yes
:header-args:emacs-lisp+: :tangle ../../gen/emacs/init.el :tangle-mode `,#o444 :mkdirp yes
:header-args:emacs-lisp+: :code-license CC0-1.0
:header-args:nix+: :code-license MIT
:EXPORT_OPTIONS: h:6
:END:

#+begin_description
Ross A. Baker's Emacs configuration.  Defines the packages,
configurations, and Nix build.
#+end_description

**** Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

***** The flavor of the day is vanilla

This is a "vanilla" configuration, or an "Emacs from scratch," built
on a prerelease of Emacs 29 from Git.

Some users use a community configuration such as [[https://www.spacemacs.org/][Spacemacs]] or [[https://github.com/doomemacs/doomemacs][Doom]].  A
more moderate approach is a starter kit like like [[https://github.com/bbatsov/prelude][Prelude]] or [[https://github.com/SystemCrafters/crafted-emacs][Crafted
Emacs]], which hew closer to vanilla Emacs but give users a sensible
head start.  These are recommended paths for new users, and remain
reasonable even after decades of experience.

I choose to start from the wretched defaults.

- It helps me better understand how it works.
- I am less likely to be surprised on upgrades.
- It's relaxing.  Editor bonsai, if you will.

***** Guiding principles
:PROPERTIES:
:CUSTOM_ID: guiding-principles
:END:

The default is to try built-in packages first, but be unafraid to
augment with [[https://elpa.gnu.org/][ELPA]], [[https://melpa.org/][MELPA]], or even Git.  These extra moving parts are
managed by rigorously pinning all dependencies with Nix.

***** On licensing

Most of my configurations are permissively licensed, for both your
convenience and their triviality.  Emacs is challenging:

- Most configurations are markup and duct tape.  Emacs configurations
  are written in a whole-ass language.

- Emacs Lisp has a stronger copyleft culture than most languages.
  Many of the =use-package= blocks that follow are copied straight out
  of of GPL-licensed documentation.  The entire Emacs core, many
  third-party libraries, and several of its inspirational
  configurations are under the GPL, beckoning us to quote them in all
  their virality.

So let's just publish under the GPL and call it a day, right?

This is a literate configuration.  Prose and code.  Creative Commons
licenses are great for prose, but [[https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software][not for code]].  ~CC-BY-SA-4.0~ is
[[https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software][one-way compatible]] with the ~GPL-3.0~.  We can license this entire work
under the ~CC-BY-SA-4.0~.  Unified license, dual purpose.

That's swell, until we redistribute code licensed to us under the GPL.
The compatibility is only one way.  We can't republish that code under
~CC-BY-SA-4.0~.  Either the prose gets subsumed into the GPL, or else
there's no license to unify the entire document.

Some =use-package= statements that follow are little more than
"installation" recipes taken from the documentation of GPL projects.
I assert that these falls under [[https://www.gnu.org/licenses/gpl-faq.en.html#GPLFairUse]["fair use" of GPL-covered programs]].
Any configuration that triggers the GPL will be published in a
separate repository and stitched in here like any other GPL library.

With that effort, the license of this configuration as a whole is
~CC-BY-SA-4.0~.  I encourage you to try the same with your own
literate configs.

#+begin_src emacs-lisp
  ;; SPDX-License-Identifier: CC-BY-SA-4.0
#+end_src

Trivial stanzas are tagged into the public domain (~CC0-1.0~).

**** Early tasks
:PROPERTIES:
:CUSTOM_ID: early-tasks
:END:

An Emacs configuration can mostly be declared in any order,
particularly with intelligent use of ~use-package~'s ~:after~ keyword.
But there are a few things that benefit from going first.

***** Startup time
:PROPERTIES:
:CUSTOM_ID: startup-time
:END:

I don't go to [[https://github.com/doomemacs/doomemacs/blob/35865ef5e89442e3809b8095199977053dd4210f/docs/faq.org#how-does-doom-start-up-so-quickly][Doom's extreme lengths]] to optimize startup time, but
there are usually a few heavy hitters, and [[https://github.com/dholm/benchmark-init-el][benchmark-init-el]] helps
find them.  And with my Nix setup, I'm restarting Emacs a lot whenever
I'm trying new packages, so it's worth a modest effort.

****** Benchmark
:PROPERTIES:
:CUSTOM_ID: benchmark
:END:

[[https://github.com/dholm/benchmark-init-el][benchmark-init]] is a simple package that may or may not carry its
weight versus ~usepackage-compute-statistics~.  Run
~benchmark-init/show-durations-tabulated~ to check this one out.

#+begin_src emacs-lisp
  (use-package benchmark-init
    :ensure t
    :demand t
    :hook (after-init . benchmark-init/deactivate)
    :config
    (benchmark-init/activate))
#+end_src

#+RESULTS:
| org-persist-load-all | benchmark-init/deactivate | tramp-register-archive-autoload-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

****** Garbage collection
:PROPERTIES:
:CUSTOM_ID: garbage-collection
:END:

Increasing the garbage collector threshold is reputed to help at init.
After startup, we revert on the [[https://gitlab.com/koral/gcmh][Garbage Collector Magic Hack]].

#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :diminish
    :init (setq gc-cons-threshold (* 80 1024 1024))
    :hook (emacs-startup . gcmh-mode))
#+end_src

#+RESULTS:
| gcmh-mode |

****** Doom-like hooks
:PROPERTIES:
:CUSTOM_ID: doom-like-hooks
:END:

We're also going to use [[https://gitlab.com/ajgrf/on.el][on.el]] to provide some of the same hooks Doom
uses.

#+begin_src emacs-lisp
  (use-package on
    :ensure)
#+end_src

****** Security

For the love of all that is holy, do not continue with untrusted
connections!

#+begin_src emacs-lisp
  (use-package gnutls
    :defer t
    :custom
    (gnutls-verify-error t))
#+end_src

****** No littering
:PROPERTIES:
:CUSTOM_ID: no-littering
:END:

Many packages leave crumbs in ~user-emacs-directory~ or even ~$HOME~.
Finding and configuring them individually is a hassle, so we rely on
the community configuration of [[https://github.com/emacscollective/no-littering][~no-littering~]].  Run this early,
because many of the crumb droppers are configured below!

The default is to put everything under ~user-emacs-directory~, which
for me is under ~~/.config~.  If I considered any of this data to be
config, they'd be in this file!  I keep mine in ~~/.cache~.

Cleaning up the [[https://github.com/emacscollective/no-littering#native-compilation-cache][native compilation cache]] is "preferably" supposed to
happen in ~early-init.el~, but I'm trying to keep that as light as
possible so as much as possible works without Home Manager.  This
seems early enough to avoid crapping in =~/.config/emacs=.

#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t
    :init
    (setq no-littering-etc-directory "~/.cache/emacs/etc/"
          no-littering-var-directory "~/.cache/emacs/var/")
    (when (fboundp 'startup-redirect-eln-cache)
      (startup-redirect-eln-cache
       (convert-standard-filename
        (expand-file-name  "eln-cache/" no-littering-var-directory)))))
#+end_src

***** use-package keywords
:PROPERTIES:
:CUSTOM_ID: use-package-keywords
:END:

****** bind-key
:PROPERTIES:
:CUSTOM_ID: bind-key
:END:

[[https://github.com/jwiegley/use-package][use-package]] is built-in as of Emacs 29, but since we use =:bind=, we
need to load ~bind-key~.  If we forget, we get the error: ~Symbol's
value as variable is void: personal-keybindings~.

#+begin_src emacs-lisp
  (use-package bind-key
    :demand t
    :bind
    (:prefix-map rab/files-map
     :prefix "C-c f")
    :bind
    (:prefix-map rab/toggles-map
     :prefix "C-c t"))
#+end_src

****** Diminish
:PROPERTIES:
:CUSTOM_ID: diminish
:END:

We also want to "diminish" most minor-mode indicators on the mode
line.  They're only interesting if they're in an unexpected state.

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

***** Path setup
:PROPERTIES:
:CUSTOM_ID: path-setup
:END:

Launching Emacs from the MacOS dock does not source my shell config,
which leads to my Nix profile not being on the ~$PATH~, which leads to
errors, or worse, trying to install the execrable Xcode.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :demand t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+end_src
**** General customization
:PROPERTIES:
:CUSTOM_ID: general-customization
:END:

I spun my wheels for a while over how to arrange my customizations,
ignoring that Emacs has already done most of that work!  I don't use
Emacs' customize interface, preferring this version-controlled,
literate config.  However, its tree of ~defgroups~ is pretty
reasonable, and more importantly, stops me from agonizing over them.
This structure is modeled after that.

***** Editing
:PROPERTIES:
:CUSTOM_ID: editing
:END:
****** Editing basics
:PROPERTIES:
:CUSTOM_ID: editing-basics
:END:
******* Character radix
:PROPERTIES:
:CUSTOM_ID: character-radix
:END:

Make =C-q= read a hex sequence instead of the default octal.  Obscure,
but I know more characters by their hex codes.  This is also
consistent with =C-x 8 <RET>=, which is more chars, but offers
minibuffer completion.

#+begin_src emacs-lisp
  (setopt read-quoted-char-radix 16)
#+end_src

******* Mark ring
:PROPERTIES:
:CUSTOM_ID: mark-ring
:END:

The mark ring is the trail of breadcrumbs we leave with various
commands.  Vernon Grant gives a [[https://vernon-grant.com/discovering-emacs/efficiency-with-the-mark-ring/][good tutorial]] in his Discovering Emacs
series.

=set-mark-command-repeat-pop= means we only need to hit ~C-u~ or ~C-x~
once before subsequent ~C-SPC~, which makes it much nicer to navigate.

#+begin_src emacs-lisp
  (setopt set-mark-command-repeat-pop t)
#+end_src

****** Indent
:PROPERTIES:
:CUSTOM_ID: indent
:END:

Tabs are the devil's whitespace.

#+begin_src emacs-lisp
  (use-package simple
    :config
    (setq-default indent-tabs-mode nil))
#+end_src

****** Killing
:PROPERTIES:
:CUSTOM_ID: killing
:END:

Put the clipboard on the kill ring before killing something else.
Emacs isn't as violent as it sometimes sounds, I swear.

We also don't want to clutter the ring with consecutively duplicate
values.

#+begin_src emacs-lisp
  (use-package simple
    :custom
    (save-interprogram-paste-before-kill t)
    (kill-do-not-save-duplicates t))
#+end_src
****** Matching
******* Bookmark

Persist bookmarks each time we set one, not when Emacs exits.

#+begin_src emacs-lisp
  (use-package bookmark
    :custom
    (bookmark-save-flag 1))
#+end_src

****** selected.el

[[https://github.com/Kungsgeten/selected.el][~selected.el~]] activates a keymap when there is an active region.  I'm
using it to replace the more traditional =delete-selection-mode=.

#+begin_src emacs-lisp
  (use-package selected
    :ensure t
    :diminish
    :config (selected-global-mode)
    :bind (:map selected-keymap
           ("q" . selected-off)
           ("u" . upcase-region)
           ("d" . downcase-region)
           ("w" . count-words-region)
           ("m" . apply-macro-to-region-lines)))
#+end_src

***** Convenience
:PROPERTIES:
:CUSTOM_ID: convenience
:END:
****** Completion
:PROPERTIES:
:CUSTOM_ID: completion
:END:

******* Copilot
:PROPERTIES:
:CUSTOM_ID: copilot
:END:

#+begin_info
This package is currently disabled due to absence of a license.  See
[[https://github.com/zerolfx/copilot.el/issues/80][issue #80]] for a discussion of what it would take.
#+end_info

I think Copilot's training was unethical, and I'm skeptical of its
utility, but I need to get some experience with it.

~always~ in ~copilot-disable-predicates~ turns off _automatic_
completion.  We can still reach it from ~M-`~, which is chosen to be
close to ~M-TAB~ and bound to a menubar command I don't ever use.

#+begin_src emacs-lisp
  (use-package copilot
    :disabled t
    :ensure t
    :custom
    (copilot-disable-predicates '(always))
    :hook
    (prog-mode . copilot-mode)
    :bind
    ("M-`" . copilot-complete)
    :bind
    (:map rab/toggles-map
     ("`" . copilot-mode))
    :bind
    (:map copilot-completion-map
     ("C-g" .  'copilot-clear-overlay)
     ("M-p" . 'copilot-previous-completion)
     ("M-n" . 'copilot-next-completion)
     ("<tab>" . 'copilot-accept-completion)
     ("M-f" . 'copilot-accept-completion-by-word)
     ("M-<return>" . 'copilot-accept-completion-by-line)))
#+end_src

It's not in MELPA, but it's a trivial build:

#+begin_src nix :noweb-ref emacs-copilot
  let
    copilot-lisp = epkgs.trivialBuild {
      pname = "copilot-lisp";
      src = inputs.copilot-el;
      packageRequires = [
        epkgs.dash
        epkgs.editorconfig
        epkgs.s
      ];
      version = "0.0.0";
    };
    copilot-dist = pkgs.stdenv.mkDerivation {
      name = "copilot-dist";
      src = inputs.copilot-el;
      installPhase = ''
        LISPDIR=$out/share/emacs/site-lisp
        mkdir -p $LISPDIR
        cp -R dist $LISPDIR
      '';
    };
  in
  pkgs.symlinkJoin {
    name = "copilot.el";
    paths = [ copilot-lisp copilot-dist ];
  }
#+end_src

It also depends on Node.

#+begin_src nix :noweb-ref emacs-home-packages
  ({ pkgs, ...}: {
    home.packages = [ pkgs.nodejs ];
  })
#+end_src

****** Corfu
:PROPERTIES:
:CUSTOM_ID: corfu
:END:
We use [[https://github.com/minad/corfu][Corfu]] for small, in-buffer popups of completion candidates.
Autocompletion of method names in code is a classic use case.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :hook (on-first-buffer . global-corfu-mode))
#+end_src

****** Docker

[[https://github.com/Silex/docker.el][~docker.el~]] "manages Docker from Emacs."  Note that while a [[https://podman.io/][Podman
daemon]] works great, the Podman client [[https://github.com/Silex/docker.el/issues/110][is incompatible]].

#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :defer t)
#+end_src

****** Exiting
:PROPERTIES:
:CUSTOM_ID: exiting
:END:

I'd usually rather exit Slack, to be quite honest.

#+begin_src emacs-lisp
  (setopt confirm-kill-emacs 'yes-or-no-p)
#+end_src

****** Display line numbers
:PROPERTIES:
:CUSTOM_ID: display-line-numbers
:END:

~display-line-numbers~ is a more performant replacement for the
venerable old ~linum~.  We turn it on for program and configuration
modes.

#+begin_src emacs-lisp
  (use-package display-line-numbers
    :custom
    (display-line-numbers-widen t)
    :hook
    ((prog-mode conf-mode) . display-line-numbers-mode))
#+end_src

****** Highlight line
:PROPERTIES:
:CUSTOM_ID: highlight-line
:END:

Highlight the current line, only in the current buffer.

#+begin_src emacs-lisp
  (use-package hl-line
    :hook (on-first-buffer . global-hl-line-mode))
#+end_src

****** ffap
:PROPERTIES:
:CUSTOM_ID: ffap
:END:

~ffap~, short for "find file at point," guesses a default file from the
point.  =ffap-bindings= rebinds several commands with ffap equivalents.

#+begin_src emacs-lisp
  (use-package ffap
    :hook (on-first-input . ffap-bindings))
#+end_src

ffap invokes ~gcc~ and ~g++~, which is fine, except on a Mac without
Xcode.  That brings up a dreaded dialog box.

#+begin_src nix :noweb-ref emacs-home-packages
  ({ pkgs, ...}: { home.packages = [ pkgs.gcc ]; })
#+end_src

****** Persist state
:PROPERTIES:
:CUSTOM_ID: persist-state
:END:

[[https://codeberg.org/bram85/emacs-persist-state.git][Persist State]] flushes state that is normally flushed in
~kill-emacs-hook~, which I'm trying not to call until I die.

#+begin_src emacs-lisp
  (use-package persist-state
    :ensure t
    :hook
    (on-first-input . persist-state-mode))
#+end_src

****** Suggest

I keep lamenting the lack of a [[https://hoogle.haskell.org/][Hoogle]] for Emacs Lisp.  [[https://github.com/Wilfred/suggest.el/][suggest.el]] is
an interesting alternative: instead of types, it finds functions from
example inputs and outputs.

#+begin_src emacs-lisp
  (use-package suggest
    :ensure t)
#+end_src

****** Whitespace butler
:PROPERTIES:
:CUSTOM_ID: whitespace-butler
:END:

I like builtin packages, but I like minimal diffs more.  [[https://github.com/lewang/ws-butler][ws-butler]] is
"unobtrusive", which wins the day for me.

#+begin_quote
- Only lines touched get trimmed. If the white space at end of buffer
  is changed, then blank lines at the end of buffer are truncated
  respecting =require-final-newline=.
- Trimming only happens when saving.
#+end_quote

#+begin_src emacs-lisp
  (use-package ws-butler
    :ensure t
    :hook (on-first-buffer . ws-butler-global-mode)
    :diminish)
#+end_src

***** Files
:PROPERTIES:
:CUSTOM_ID: files
:END:

****** Lock files
:PROPERTIES:
:CUSTOM_ID: lock-files
:END:

On single-user environments, as we tend to run Emacs these days, those
~.#*~ files are more likely to confuse some other program as they are
to protect us from conflicting edits.

#+begin_src emacs-lisp
  (setopt create-lockfiles nil)
#+end_src

****** Auto-revert
:PROPERTIES:
:CUSTOM_ID: auto-revert
:END:

#+begin_src emacs-lisp
  (use-package autorevert
    :diminish auto-revert-mode
    :hook (on-first-buffer . global-auto-revert-mode)
    :custom
    (global-auto-revert-non-file-buffers t))
#+end_src

****** Recent files
:PROPERTIES:
:CUSTOM_ID: recent-files
:END:

This maintains a list of recent files, as we often find in other
applications.  I wonder if it can or should be integrated with MacOS'
list of recent files?

#+begin_src emacs-lisp
  (use-package recentf
    :hook (on-first-file-hook . recentf-mode)
    :bind
    (:map rab/files-map
     ("r" . recentf-open)))
#+end_src
***** Text
:PROPERTIES:
:CUSTOM_ID: text
:END:

****** Case
:PROPERTIES:
:CUSTOM_ID: case
:END:
******* DWIM case
:PROPERTIES:
:CUSTOM_ID: dwim-case
:END:

These do-what-I-mean bindings are newer than the classic keybindings,
but a better default.

#+begin_src emacs-lisp
  (use-package emacs
    :bind
    ([remap capitalize-word] . capitalize-dwim)
    ([remap downcase-word] . downcase-dwim)
    ([remap upcase-word] . upcase-dwim))
#+end_src

******* Title case
:PROPERTIES:
:CUSTOM_ID: title-case
:END:

Gosh, I wish I'd had this when I was so active on [[https://musicbrainz.org/][MusicBrainz]].

#+begin_src emacs-lisp
  (use-package titlecase
    :ensure t
    :defer t)
#+end_src

****** Jinx
:PROPERTIES:
:CUSTOM_ID: jinx
:END:

[[https://github.com/minad/jinx][Jinx]] is a just-in-time spell checker.

#+begin_src emacs-lisp
  (use-package jinx
    :ensure t
    :hook (on-first-buffer . global-jinx-mode)
    :bind
    ([remap ispell-word] . jinx-correct)
    :bind
    (:map rab/toggles-map
     ("$" . jinx-mode)))
#+end_src

This one requires a Nix build, [[https://github.com/GTrunSec/hive/blob/ce7c0087a055fb3f91a402ec0d2caeb4a3579d5f/nix/emacs/homeModules/packages.nix#L16][inspired by hive-std]]:

#+begin_src nix :noweb-ref emacs-jinx
  let
    jinx-lisp = epkgs.trivialBuild {
      pname = "jinx-lisp";
      src = inputs.jinx;
      packageRequires = [ epkgs.compat ];
      version = "0.9";
    };
    jinx-mod = pkgs.stdenv.mkDerivation {
      name = "jinx-mod";
      src = inputs.jinx;
      buildInputs = [ pkgs.enchant2 ];
      buildPhase = ''
        cc -I. -O2 -Wall -Wextra -fPIC -shared -o jinx-mod.dylib jinx-mod.c \
          -I${pkgs.enchant2.dev}/include/enchant-2 -lenchant-2
      '';
      installPhase = ''
        LISPDIR=$out/share/emacs/site-lisp
        install -d $LISPDIR
        install *.dylib $LISPDIR
      '';
    };
  in
  pkgs.symlinkJoin {
    name = "jinx";
    paths = [ jinx-lisp jinx-mod ];
  }
#+end_src

Let's not forget a dictionary.

#+begin_src nix :noweb-ref emacs-home-packages
  ({ pkgs, ...}: {
    home.packages = [
      pkgs.nuspell
      pkgs.hunspellDicts.en_US
    ];
  })
#+end_src

****** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src

****** Outlines
:PROPERTIES:
:CUSTOM_ID: outlines
:END:
******* Org
:PROPERTIES:
:CUSTOM_ID: org
:END:

Org Mode's timestamps are sadly not aware of time zones, but we can
crudely approximate support by [[https://emacs.stackexchange.com/a/60590][setting ~org-time-stamp-formats~]].

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-time-stamp-formats '("%Y-%m-%d %a" . "%Y-%m-%d %a %H:%M %Z")))
#+end_src

******** ox-hugo
:PROPERTIES:
:CUSTOM_ID: ox-hugo
:END:

We use [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] for publishing, with [[#rab-ox-hugo][custom extensions]].

#+begin_src emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after org)

  (use-package rab-ox-hugo
    :after ox-hugo
    :config
    (rab/ox-hugo-mode))
#+end_src

******** ox-slack
:PROPERTIES:
:CUSTOM_ID: ox-slack
:END:

Mostly useful for =org-slack-export-to-clipboard-as-slack=.

#+begin_src emacs-lisp
  (use-package ox-slack
    :ensure t
    :after org
    :bind
    (:map org-mode-map
     :prefix-map rab/org-mode-map
     :prefix "C-c m"
     ("w" . org-slack-export-to-clipboard-as-slack)))
#+end_src

Apply [[https://github.com/titaniumbones/ox-slack/pull/9][this patch]] to fix the syntax for links.  In Slack, turn on
"Format messages with markup" in Advanced settings for link support.

#+begin_src nix :noweb-ref emacs-ox-slack
  epkgs.ox-slack.overrideAttrs(old: {
    patches = [ ../../src/emacs/ox-slack/github-9.patch ];
  })
#+end_src

****** Subword mode
:PROPERTIES:
:CUSTOM_ID: subword-mode
:END:

Subword mode helps us move around camel-case languages, and is mostly
configured as a hook in those major modes.  The only thing we
customize about it is not wanting it cluttering the mode line.

#+begin_src emacs-lisp
  (use-package subword
    :defer t
    :diminish)
#+end_src
****** Counting words
:PROPERTIES:
:CUSTOM_ID: counting-words
:END:

The default binding of =M-== is ~count-words-region~.  The newer
~count-words~ counts the buffer when there's no active region.

#+begin_src emacs-lisp
  (bind-key [remap count-words-region] 'count-words)
#+end_src

***** Data
:PROPERTIES:
:CUSTOM_ID: data
:END:

****** Save place
:PROPERTIES:
:CUSTOM_ID: save-place
:END:

This mode saves our place for when we revisit a file.

#+begin_src emacs-lisp
  (use-package saveplace
    :hook (on-first-buffer . save-place-mode))
#+end_src

***** External
:PROPERTIES:
:CUSTOM_ID: external
:END:
****** Processes
:PROPERTIES:
:CUSTOM_ID: processes
:END:
****** RFC mode
:PROPERTIES:
:CUSTOM_ID: rfc-mode
:END:

As an http4s author, I refer to RFCs constantly.

#+begin_src emacs-lisp
  (use-package rfc-mode
    :ensure t
    :defer t)
#+end_src

******* Envrc
:PROPERTIES:
:CUSTOM_ID: envrc
:END:

I maintain a minimal home environment and push as much as I can to Nix
flakes.  This insulates me from conflicting dependencies, makes my
projects more portable, and helps me share with Nix-enabled teammates.

Where possible, I add an ~.envrc~ file to load the environment from
the flake.

#+begin_src emacs-lisp
  (use-package envrc
    :ensure t
    :hook (on-first-file . envrc-global-mode))
#+end_src

***** Programming
:PROPERTIES:
:CUSTOM_ID: programming
:END:
****** Languages
:PROPERTIES:
:CUSTOM_ID: languages
:END:


******* C#
:PROPERTIES:
:CUSTOM_ID: c
:END:

I am not a C# developer, but I've been known to interview them.

#+begin_src emacs-lisp
  (use-package csharp-mode
    :mode ((rx ".cs" eos) . 'csharp-ts-mode)
    :hook (csharp-ts-mode . subword-mode))
#+end_src

******* Lisp
:PROPERTIES:
:CUSTOM_ID: lisp
:END:

Load my [[#rab-lisp][Lisp extensions]] to fix the indentation of =use-package=
blocks.

#+begin_src emacs-lisp
  (use-package rab-lisp-mode
    :after lisp-mode
    :config
    (advice-add #'calculate-lisp-indent :override #'rab/lisp-calculate-indent))
#+end_src

******** Compilation
:PROPERTIES:
:CUSTOM_ID: compilation
:END:

I get a bunch of asynchronous warnings from native compilation in a
~*Warnings*~ popup.  It's nice that they're there, but unless they're
an error, I don't need them all up in my business.

#+begin_src emacs-lisp
  (use-package comp
    :custom
    (native-comp-async-report-warnings-errors 'silent))
#+end_src


******* Nix
:PROPERTIES:
:CUSTOM_ID: nix
:END:

#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :defer t)
#+end_src
******* Scala
:PROPERTIES:
:CUSTOM_ID: scala
:END:

Much of this configuration starts from the [[https://scalameta.org/metals/docs/editors/emacs/][Metals guide]].

#+begin_warning
This doesn't work well with Scala 3's Significant Whitespace
Traveshamockery.  Once we're ready for that, we'll take a look at
[[https://github.com/KaranAhlawat/scala-ts-mode/issues/1#issuecomment-1573884094][scala-ts-mode]].
#+end_warning

#+begin_src emacs-lisp
  (use-package scala-mode
    :ensure t
    :interpreter ("scala" . scala-mode)
    :hook
    (scala-mode . eglot-ensure)
    (scala-mode . subword-mode))

  (use-package sbt-mode
    :ensure t
    :commands sbt-start sbt-command)
#+end_src

******* XML
:PROPERTIES:
:CUSTOM_ID: xml
:END:

[[https://github.com/tali713/esxml][esxml]] essentially turns Lisp into an XML (or XHTML) templating engine.

#+begin_src emacs-lisp
  (use-package esxml
    :ensure t
    :defer t)
#+end_src

******* YAML
:PROPERTIES:
:CUSTOM_ID: yaml
:END:

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :defer t)
#+end_src

****** Tools
:PROPERTIES:
:CUSTOM_ID: tools
:END:

******* Dumb jump
:PROPERTIES:
:CUSTOM_ID: dumb-jump
:END:

[[https://github.com/jacktasia/dumb-jump][dumb-jump]] is dumber than LSP, but it's a lot less fussy and makes for
a wonderful fallback option.

~git-grep~ is not working for me.  It appears to be [[https://github.com/jacktasia/dumb-jump/issues/428][option rot]].

#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    :custom
    (dumb-jump-force-searcher 'rg))
#+end_src

Make sure ripgrep is available.

#+begin_src nix :noweb-ref emacs-home-packages
  ({ pkgs, ...}: { home.packages = [ pkgs.ripgrep ]; })
#+end_src

******* Git
:PROPERTIES:
:CUSTOM_ID: git
:END:

******** Git Modes

[[https://github.com/magit/git-modes][Git modes]] provides three modes:

- =.gitattributes= and similar
- =.gitconfig= and similar
- =.gitignore= and similar

We want them all.

#+begin_src emacs-lisp
  (use-package git-modes
    :defer t
    :ensure t)
#+end_src

******** Magit
:PROPERTIES:
:CUSTOM_ID: magit
:END:

I have known people to leave Emacs, but continuing to use [[https://magit.vc/][Magit]] for
version control.  It's that good.

I am giving built-ins the benefit of the doubt in this config, and
would like to get into ~vc-mode~.  But I'm an advanced enough Git user
that something tailor-made carries its weight here.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer 1
    :functions rab/magit-clone-read-args-a
    :bind
    (:prefix-map rab/git-map
     :prefix "C-c g"
     ("g" . magit-status)
     ("c" . magit-clone))
    :custom
    (magit-clone-default-directory "~/src/")
    (magit-no-message (list "Turning on magit-auto-revert-mode..."))
    (magit-save-repository-buffers 'dontask)
    :config
    (defun rab/magit-clone-read-args-a (orig-fun &rest args)
      "Sets `vertico-preselect' to `prompt' when cloning repos, so we
  clone to the default prompted directory, and not some random
  existing directory under `magit-clone-default-directory'."
      (let ((vertico-preselect 'prompt))
	(apply orig-fun args)))
    (advice-add 'magit-clone-read-args :around #'rab/magit-clone-read-args-a))
#+end_src

Some commits are mostly reformats, and it's irritating when browsing
history.  This makes it easy to give Git a hint to ignore them:

#+begin_src emacs-lisp :code-license CC-BY-SA-4.0
  (defun rab/git-add-to-blame-ignore-revs (revision)
    "Adds COMMIT to .git-blame-ignore-revs.  Runs `git rev parse' on COMMIT to resolve it first."
    (interactive (list (magit-read-other-branch-or-commit "Blame-ignored revision")))
    (when-let ((file (expand-file-name ".git-blame-ignore-revs" (project-root (project-current))))
               (parsed (magit-rev-parse revision)))
      (with-current-buffer (find-file-noselect file)
        (save-excursion
          (end-of-buffer)
          (insert parsed "\n")
          (save-buffer)))))
#+end_src

******** Git-Link
:PROPERTIES:
:CUSTOM_ID: git-link
:END:

[[https://github.com/sshaw/git-link/][git-link]] grabs links to lines, regions, commits, or home pages.

#+begin_src emacs-lisp
  (use-package git-link
    :ensure t
    :custom
    (git-link-use-commit t)
    (git-link-use-single-line-number t)
    :commands (git-link git-link-commit git-link-homepage))
#+end_src

******** Git-Related
:PROPERTIES:
:CUSTOM_ID: git-related
:END:

[[https://macroexpand.net/pages/git-related.html][~git-related~]] sorts files in a project by a similarity score derived
from how often they change in the same commit.

#+begin_src emacs-lisp
  (use-package git-related
    :bind
    (:map rab/files-map
     ("g" . git-related-find-file)))
#+end_src

The original is not in a public Git repository, so I [[https://codeberg.org/rossabaker/git-related][forked it]].

I don't prefer the way it propertizes the string with the score.  The
main thing I want is the sort, so I lightly customized it.  The score
might still be compelling as an ~:annotation-function~.

#+begin_src nix :noweb-ref emacs-git-related
  epkgs.trivialBuild {
    pname = "git-related";
    src = inputs.git-related;
    version = "1.1";
  }
#+end_src

The sort order is customized in [[#vertico-multiform][Vertico multiform]].

******* Restclient
:PROPERTIES:
:CUSTOM_ID: restclient
:END:

[[https://github.com/pashky/restclient.el][restclient.el]] is essentially an HTTP worksheet.

#+begin_src emacs-lisp
  (use-package restclient
    :ensure t
    :defer t)
#+end_src

I'd like to look into [[https://github.com/alf/ob-restclient.el][ob-restclient.el]] for org-babel integration.

******* Treesitter
:PROPERTIES:
:CUSTOM_ID: treesitter
:END:

[[https://github.com/renzmann/treesit-auto][~treesit-auto~]] finds treesitter modes by naming convention.

#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :demand t
    :config
    (global-treesit-auto-mode))
#+end_src

******* UUID Generation
:PROPERTIES:
:CUSTOM_ID: uuid-generation
:END:

#+begin_src emacs-lisp
  (use-package uuidgen
    :ensure t
    :defer t)
#+end_src

******* Xref
:PROPERTIES:
:CUSTOM_ID: xref
:END:

Regardless of LSP or dumb-jump, we want Vertico to handle when
multiple definitions are found.

#+begin_src emacs-lisp
  (use-package xref
    :defer
    :custom
    (xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src

******* Verb

[[https://github.com/federicotdn/verb][Verb]] is an alternative to [[#restclient][restclient.el]] that many of my colleagues
use.  The feature sets look roughly equivalent, so I'll give it a shot
in the spirit of comity.

#+begin_src emacs-lisp
  (use-package verb
    :after org
    :ensure t
    :config (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src

***** Applications
:PROPERTIES:
:CUSTOM_ID: applications
:END:
****** Dictionary
:PROPERTIES:
:CUSTOM_ID: dictionary
:END:

The ~M-#~ keybinding is dubious because it's not reserved, but it's
[[https://www.masteringemacs.org/article/wordsmithing-in-emacs][good enough for Mickey Petersen]].

#+begin_src emacs-lisp
  (use-package dictionary
    :bind
    ("M-#" . dictionary-lookup-definition))
#+end_src

Until I find a working dictd for MacOS on Nix, we'll sigh heavily and
use dict.org.

#+begin_src emacs-lisp
  (use-package dictionary
    :if (memq window-system '(mac ns x))
    :custom
    (dictionary-server "dict.org"))
#+end_src

****** Language server protocol
:PROPERTIES:
:CUSTOM_ID: language-server-protocol
:END:

We're going to give [[https://joaotavora.github.io/eglot/][eglot]] a try now that it's built into Emacs.  It's
a bit more minimalist than the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]].

#+begin_src emacs-lisp
  (use-package eglot :defer t)
#+end_src

***** Development
:PROPERTIES:
:CUSTOM_ID: development
:END:
****** Extensions
:PROPERTIES:
:CUSTOM_ID: extensions
:END:
******* htmlize
:PROPERTIES:
:CUSTOM_ID: htmlize
:END:

[[https://github.com/hniksic/emacs-htmlize/blob/master/htmlize.el][=htmlize=]] provides syntax highlighting for our code snippets when
exported to HTML.

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t
    :after ox-html)
#+end_src

***** Environment
:PROPERTIES:
:CUSTOM_ID: environment
:END:

****** Dired

Dired should refresh the listing on each revisit.

#+begin_src emacs-lisp
  (use-package dired
    :defer
    :custom
    (dired-auto-revert-buffer t))
#+end_src

****** Frames
:PROPERTIES:
:CUSTOM_ID: frames
:END:

I like tiled windows more than I need Emacs to maintain a static
number of columns and rows.

#+begin_src emacs-lisp
  (setopt frame-inhibit-implied-resize t)
#+end_src

******* Cursor
:PROPERTIES:
:CUSTOM_ID: cursor
:END:

I like a non-blinking bar cursor.

#+begin_src emacs-lisp
  (setopt cursor-type 'bar)
  (use-package frame
    :config
    (blink-cursor-mode -1))
#+end_src

******* Mode line
:PROPERTIES:
:CUSTOM_ID: mode-line
:END:
******** Column number
:PROPERTIES:
:CUSTOM_ID: column-number
:END:

#+begin_src emacs-lisp
  (use-package simple
    :hook
    (on-first-buffer . column-number-mode))
#+end_src

******** Size indication
:PROPERTIES:
:CUSTOM_ID: size-indication
:END:
Put the buffer size in the mode line.  coreutils use binary
(base 1024) units, so I will too.  I mostly wanted to see if I could.
Of course I could.  This is Emacs.

#+begin_src emacs-lisp
  (defun rab/mode-line-binary-size-indication ()
    "Replaces the size indication in the mode line with base 1024 units."
    (require 'cl-seq)
    (setopt mode-line-position
	    (cl-subst-if
	     '(size-indication-mode
	       (8 " of " (:eval (file-size-human-readable (buffer-size) 'iec "" "B"))))
	     (lambda (x) (and (listp x) (eq 'size-indication-mode (car x))))
	     mode-line-position)))
  (add-hook 'on-first-buffer-hook #'rab/mode-line-binary-size-indication)
  (add-hook 'on-first-buffer-hook #'size-indication-mode)
#+end_src

******* Scroll bars
:PROPERTIES:
:CUSTOM_ID: scroll-bars
:END:

The mode line tells us where we're at, and we mostly eschew the mouse.

#+begin_src emacs-lisp
  (use-package scroll-bar
    :config
    (scroll-bar-mode -1))
#+end_src

******* Tool bars
:PROPERTIES:
:CUSTOM_ID: tool-bars
:END:

The much despised tool bar is not a terrible default for the Emacs
neophyte, but I'm old and grizzled.

#+begin_src emacs-lisp
  (use-package tool-bar
    :config
    (tool-bar-mode -1))
#+end_src

******* Minimization: let's not
:PROPERTIES:
:CUSTOM_ID: minimization-let's-not
:END:

I don't much care for minimizing windows in the first place, and
particularly not my favorite window with a keybinding that's too easy to hit.

#+begin_src emacs-lisp
  (use-package frame
    :bind
    ("C-z" . nil))
#+end_src

******* Beep beep, your ass
:PROPERTIES:
:CUSTOM_ID: beep-beep-your-ass
:END:

Decades ago, there was a meme of Wile E. Coyote, having finally caught
Road Runner, saying "Beep beep your ass."  This comes from
approximately the same era as the last time anyone wanted a system
bell.

#+begin_src emacs-lisp
  (use-package mode-line-bell
    :ensure
    :hook (on-first-input . mode-line-bell-mode))
#+end_src

****** Faces
:PROPERTIES:
:CUSTOM_ID: faces
:END:

******* Fontaine
:PROPERTIES:
:CUSTOM_ID: fontaine
:END:

I give an increasing number of live presentations at work.  The
[[https://protesilaos.com/emacs/fontaine][Fontaine]] package lets me scale up the font for screen sharing, and
return to normalcy.

[[https://www.ibm.com/plex/][IBM Plex Mono]] is used if it's installed.  Their [[https://www.ibm.com/design/language/typography/type-specs-ui/][~code-02~ utility
claas]] suggests a line height of 20px, which translates to a
=line-spacing= of 6.  This is too much.  Particularly, the cursor gets
distractingly tall when the point is not at a character.  [[https://lists.gnu.org/archive/html/bug-gnu-emacs/2015-11/msg00236.html][Bug#21835]] is
related.  ~0.25~ gives the text room to breathe, without the cursor
growing and shrinking by leaps and bounds.

Note that Emacs line heights are "printer's points," which are ten to
the rest of the world's points.

#+begin_src emacs-lisp
  (use-package fontaine
    :ensure t
    :demand t
    :bind
    (:map rab/toggles-map
     ("p" . rab/presentation-mode))
    :custom
    (fontaine-presets
     `((regular
        :default-height 140
        :line-spacing 0.25)
       (presentation
        :default-height 210
        :line-spacing 0.125)
       (t ;; defaults
        :default-family
        ,(cond
          ((find-font (font-spec :name "IBM Plex Mono"))
           "IBM Plex Mono")
          ("Monospace")))))
    :config
    (fontaine-set-preset (or fontaine-current-preset 'regular))
    (define-minor-mode rab/presentation-mode
      "Toggles global rab/presentation-mode."
      nil
      :global t
      (if rab/presentation-mode
          (fontaine-set-preset 'presentation)
        (fontaine-set-preset 'regular))))
#+end_src

******* Modus themes
:PROPERTIES:
:CUSTOM_ID: modus-themes
:END:

I like the [[https://protesilaos.com/emacs/modus-themes][modus-themes]].  They are built into modern Emacs, but the
author continues to work on them, so we grab them from ELPA with
~:ensure t~.

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-operandi :no-confirm))
#+end_src

****** Initialization
:PROPERTIES:
:CUSTOM_ID: initialization
:END:

I don't need a dashboard and I know where the manuals are.  I prefer a
quiet startup.

#+begin_src emacs-lisp
  (use-package "startup"
    :custom
    (inhibit-startup-screen t)
    (initial-major-mode 'fundamental-mode)
    (initial-scratch-message nil))
#+end_src

****** Marginalia
:PROPERTIES:
:CUSTOM_ID: marginalia
:END:

[[https://github.com/minad/marginalia][Marginalia]] annotates minibuffer completions with some useful info.

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :after vertico
    :bind
    (:map minibuffer-local-map
     ("M-A" . marginalia-cycle))
    :config
    (marginalia-mode))
#+end_src

****** Minibuffer
:PROPERTIES:
:CUSTOM_ID: minibuffer
:END:
******* Consult
:PROPERTIES:
:CUSTOM_ID: consult
:END:

[[https://github.com/minad/consult][Consult]] provides several enhanced functions for ~completing-read~.  It fits nicely with [[*Vertico][Vertico]].

I generally remapped everything obvious.
~consult-yank-from-kill-ring~ as a remapping of ~yank~ proved a bit
too disorienting.

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind
    ([remap switch-to-buffer] . consult-buffer)
    ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
    ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
    ([remap project-switch-to-buffer] . consult-project-buffer)
    ([remap bookmark-jump] . consult-bookmark)
    ([remap recentf-open] . consult-recent-file)
    ([remap yank] . nil)
    ([remap yank-pop] . consult-yank-pop)
    ([remap goto-line] . consult-goto-line)
    ("M-g m" . consult-mark)
    ("M-g M" . consult-global-mark)
    ("M-g o" . consult-outline)
    ("M-g i" . consult-imenu)
    ("M-g I" . consult-imenu-multi)
    ("M-s l" . consult-line)
    ("M-s L" . consult-line-multi)
    ("M-s k" . consult-keep-lines)
    ("M-s u" . consult-focus-lines)
    ("M-s r" . consult-ripgrep)
    ("M-s f" . consult-find)
    ("M-s F" . consult-locate)
    ("M-g e" . consult-compile-error)
    ("M-g f" . consult-flymake)
    ([remap repeat-complex-command] . consult-complex-command)
    ("M-s e" . consult-isearch-history)
    ([remap isearch-edit-string] . consult-isearch-history)
    ([remap next-matching-history-element] . consult-history)
    ([remap previous-matching-history-element] . consult-history)
    ([remap Info-search] . consult-info)
    :custom
    (xref-show-xrefs-function 'consult-xref)
    (xref-show-definitions-function 'consult-xref))
#+end_src

****** Menu
:PROPERTIES:
:CUSTOM_ID: menu
:END:

Dialog boxes are an unemacsian abomination.

#+begin_src emacs-lisp
  (setopt use-dialog-box nil)
#+end_src

****** Mouse
:PROPERTIES:
:CUSTOM_ID: mouse
:END:

I don't use the mouse much in Emacs, but if I do, it's the scroll
wheel.  This makes it feel less like a trip back to a time before
scroll wheels.

#+begin_src emacs-lisp
  (use-package pixel-scroll
    :hook
    (on-first-buffer . pixel-scroll-precision-mode))
#+end_src

****** Vertico
:PROPERTIES:
:CUSTOM_ID: vertico
:END:

[[https://github.com/minad/vertico][Vertico]] is a little bit nicer version of the builtin
~icomplete-vertical~.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :hook (on-first-input . vertico-mode))
#+end_src

******* Vertico indexed
:PROPERTIES:
:CUSTOM_ID: vertico-indexed
:END:

~vertico-indexed~ lets us select candidates by number with =C-u RET=.
It's an alternative to ~vertico-quick~.

#+begin_src emacs-lisp
  (use-package vertico-indexed
    :after vertico
    :config (vertico-indexed-mode))
#+end_src

******* Vertico repeat
:PROPERTIES:
:CUSTOM_ID: vertico-repeat
:END:

~vertico-repeat~ resumes a prior completion session.

#+begin_src emacs-lisp
  (use-package vertico-repeat
    :after vertico
    :hook (minibuffer-setup . vertico-repeat-save)
    :bind ("M-R" . vertico-repeat))
#+end_src

******* Vertico directory
:PROPERTIES:
:CUSTOM_ID: vertico-directory
:END:

~vertico-directory~ does some smarter things when completing directories:
- =RET= continues completing in that directory instead of jumping to
  dired.
- =M-DEL= deletes whole directories at a time if the prompt ends in a
  slash.  There's a recommended binding for =DEL=, but I'd rather keep
  that deleting chars.

I never understood =vertico-directory-tidy= before [[https://kristofferbalintona.me/posts/202202211546/#niceties][this demo]].  When we
start with ~/~ or ~~/~, it cleans up the leading default prompt that's
"shadowed".

#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :bind
    (:map vertico-map
     ("RET" . vertico-directory-enter)
     ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

******* Vertico multiform
:PROPERTIES:
:CUSTOM_ID: vertico-multiform
:END:

#+begin_src emacs-lisp
  (use-package vertico-multiform
    :after vertico
    :custom
    (vertico-multiform-commands '((git-related-find-file (vertico-sort-function . nil))))
    :config
    (vertico-multiform-mode))
#+end_src

******* Zoom
:PROPERTIES:
:CUSTOM_ID: zoom
:END:

[[https://github.com/cyrus-and/zoom][Zoom]] resizes the selected window.  It's a modernized version of
[[https://github.com/roman/golden-ratio.el][golden-ratio.el]], and indeed, we configure it to use the golden ratio.

#+begin_src emacs-lisp
  (use-package zoom
    :ensure t
    :custom
    `(zoom-size ,(let ((phi (- (/ (+ 1 (sqrt 5)) 2) 1)))
                  (cons phi phi))))
#+end_src

***** Help
:PROPERTIES:
:CUSTOM_ID: help
:END:
****** Which Key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:

[[https://github.com/justbur/emacs-which-key][~which-key~]] pops up a menu of keybindings.  The traditional way is to
run it on a timer, but I prefer [[https://github.com/justbur/emacs-which-key#manual-activation][manual activation]].

I also relabel all my keymaps of the form ~rab/blah-map~ to ~blah~.
Neither =:prefix-docstring= nor =:menu-item= in ~bind-key~ seem to do
the trick.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :hook (on-first-input . which-key-mode)
    :diminish
    :custom
    (which-key-show-early-on-C-h t)
    (which-key-idle-delay most-positive-fixnum)
    (which-key-idle-secondary-delay 1e-9)
    :config
    (push `((nil . ,(rx bos "rab/" (group (1+ any)) "-map" eos)) .
            (nil . ,(rx (backref 1))))
          which-key-replacement-alist))
#+end_src

~C-h C-h~ shadows which-key with something less useful.

#+begin_src emacs-lisp
  (use-package help
    :config
    (dolist (key (where-is-internal 'help-for-help))
      (unbind-key key)))
#+end_src

***** Junk drawer
:PROPERTIES:
:CUSTOM_ID: junk-drawer
:END:

These customizations don't fit anywhere else.

****** Remove the training wheels
:PROPERTIES:
:CUSTOM_ID: remove-the-training-wheels
:END:

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src
**** Nix module
:PROPERTIES:
:CUSTOM_ID: nix-module
:END:

This Emacs configuration is built with Nix using [[https://github.com/nix-community/emacs-overlay][emacs-overlay]] and
published to my [[/configs/nix#whats-in-the-flake][Nix flake]].

Even though Emacs 29 is not released at the time of writing, git is on
Emacs 30!  We publish an =emacs29= flake package with the desired
branch pinned via the =emacs-src= input.  It's also added to our
default overlay, so it can be used as a dependency by other packages
and apps.  The package has no configuration.

Additionally, an =emacs= flake app is created.  This builds on the
=emacs29= package with the config above to make a usable Emacs.

Finally, we add a Home Manager module based on the configured app.

#+begin_src nix :tangle ../../gen/emacs/default.nix :noweb tangle :mkdirp yes
  { inputs, lib, moduleWithSystem, ... }: {
    imports = [
      inputs.flake-parts.flakeModules.easyOverlay
    ];
    perSystem = { config, self', inputs', pkgs, system, ... }: {
      overlayAttrs = {
        inherit (config.packages) emacs29;
      };
      packages.emacs29 = pkgs.emacs-git.overrideAttrs (old: {
        name = "emacs29";
        # It's important this starts with the major number for Nix's
        # Emacs infra.  For example, it's used to blank out archaic
        # versions of the Seq package in MELPA.
        version = "29.0-${inputs.emacs-src.shortRev}";
        src = inputs.emacs-src;
        # This doesn't apply to Emacs29.
        patches = builtins.filter (p: baseNameOf p != "bytecomp-revert.patch") old.patches;
      });
      packages.emacs-ross = pkgs.emacsWithPackagesFromUsePackage {
        package = config.packages.emacs29;
        override = epkgs: epkgs // {
          on = epkgs.trivialBuild {
            pname = "on.el";
            src = inputs.on-el;
            version = "0.1.0";
          };
          jinx =
            <<emacs-jinx>>;
          copilot =
            <<emacs-copilot>>;
          ox-slack =
            <<emacs-ox-slack>>;
          git-related =
            <<emacs-git-related>>;
        };
        config = ./init.el;
        defaultInitFile = true;
        alwaysEnsure = false;
        extraEmacsPackages = epkgs: [
          (epkgs.trivialBuild {
            pname = "rab-lisp";
            src = ./lisp/rab-lisp.el;
            version = "0.1.0";
          })
          (epkgs.trivialBuild {
            pname = "rab-ox-hugo";
            src = ./lisp/rab-ox-hugo.el;
            packageRequires = [ epkgs.ox-hugo epkgs.s ];
            version = "0.1.0";
          })
        ];
      };
      apps.emacs = {
        type = "app";
        program = "${config.packages.emacs-ross}/bin/emacs";
      };
    };
    flake = {
      homeManagerModules.emacs = moduleWithSystem (
        perSystem@{ config, pkgs }: {
          imports = [
            <<emacs-home-packages>>
            ./load-path.nix
          ];
          programs.emacs = {
            enable = true;
            package = config.packages.emacs-ross;
          };
        }
      );
    };
  }
#+end_src

As long as I have access to Nix, I can install and run my complete
Emacs app as a one-liner.  There's little reason for you to choose it
over a starter kit or your own configuration, but there's also nothing
stopping you!

#+begin_src sh :eval no :code-license CC0-1.0
  nix run github:rossabaker/cromulent#emacs
#+end_src

***** On-the-fly load-paths
:PROPERTIES:
:CUSTOM_ID: on-the-fly-load-paths
:END:

A disadvantage to a Nix-based Emacs config is that we have to restart
Emacs every time we install a new package.  [[https://discourse.nixos.org/t/emacs-exwm-home-manager-and-loading-new-emacs-modules/10097/3][This hack]] from the Nix
forums lets us update the =load-path= after a home-manager switch.
From the original posting, we change ~finalPackage~ to ~package~:
~finalPackage~ refers to a wrapper with an empty site-lisp.

#+begin_info
The solution is [[https://discourse.nixos.org/tos#3][licensed CC-BY-NC-SA-3.0]], which is incompatible.
#+end_info

Finally, a convenience function to reload it.  This won't work until
we find a licensed solution for ~load-path.el~.

#+begin_example emacs-lisp
  (defun rab/refresh-load-path ()
    "Refresh the load path written by home-manager to pick up new
   packages without restarting Emacs."
    (interactive)
    (load-file "~/.config/emacs/load-path.el"))
#+end_example
**** TODO Broken links                                             :noexport:
- whats-in-the-flake

*** DONE Ox-Hugo extensions                               :ox_hugo:licensing:
CLOSED: [2023-09-10 Sun 01:23 EDT]
:PROPERTIES:
:CUSTOM_ID: rab-ox-hugo
:EXPORT_FILE_NAME: rab-ox-hugo
:header-args:emacs-lisp+: :tangle ../../gen/emacs/lisp/rab-ox-hugo.el :code-license GPL-3.0-only
:EXPORT_HUGO_LASTMOD: [2023-09-12 Tue 00:02 EDT]
:END:

#+begin_description
Extensions to the Ox-Hugo backend for Org Export.
#+end_description

#+begin_src emacs-lisp :exports none
  ;;; rab-ox-hugo.el --- Extensions to Ox-Hugo for Ross A. Baker's Emacs configuration.

  ;;; Commentary:
  ;;
  ;; Extensions to Ox-Hugo for Ross A. Baker's Emacs configuration.

  ;;; Code:
#+end_src

**** Dependencies

#+begin_src emacs-lisp
  (require 'cl-macs)
  (require 'ox-hugo)
  (require 's)
#+end_src

**** Customization group

Needed because of our minor mode.

#+begin_src emacs-lisp
  (defgroup rab/ox-hugo nil
    "Ross A. Baker's Ox-Hugo extensions."
    :group 'org-export-hugo)
#+end_src

**** Code licensing

We lightly customize Ox-Hugo by adding support for a =:code-license=
header.  The technique is inspired by [[https://sachachua.com/blog/2023/01/adding-a-custom-header-argument-to-org-mode-source-blocks-and-using-that-argument-during-export/][Sacha Chua's custom summary
header]].

When exporting, a source block is replaced with
=org-babel-exp-code-template=, which is filled by =org-fill-template=.
This enhancement will only work when the template propagates this
header argument.  For example:

#+begin_src emacs-lisp :tangle no
  (setq org-babel-exp-code-template "#+begin_src %lang%switches%flags :code-license %code-license\n%body\n#+end_src")
#+end_src

When a ~%key~ is not defined in =org-fill-template=, it passes through
to the result as ~%key~.  We should detect this case and treat it as
=nil=.

#+begin_src emacs-lisp
  (defun rab/ox-hugo--get-filled-template-argument (key alist)
    "Helper for `org-fill-template` to handle missing properties.

  Looks up KEY in ALIST.  If the result is If the result is \"%key\",
  we assume the value was not present and return nil."
    (let* ((val (alist-get key alist))
           (fallthrough (concat "%" (s-chop-left 1 (symbol-name key)))))
      (unless (string= fallthrough val) val)))
#+end_src

We provide an enhanced =org-hugo-src-block= that reads and outputs the
=:code-license= header argument from the filled template:

#+begin_src emacs-lisp
  (defun rab/ox-hugo-src-block (src-block contents info)
    "Wraps `org-hugo-src-block' with a code license, if found.

  Invokes `org-hugo-src-block` on SRC_BLOCK, CONTENTS, and INFO.
  If a `:code-license' header is found in the block arguments of
  SRC-BLOCK, the result is wrapped in a div that includes the
  license."
    (if-let* ((result (org-hugo-src-block src-block contents info))
              (block-info
               (org-with-point-at (org-element-property :begin src-block)
                 (org-babel-get-src-block-info)))
              (block-arguments (elt block-info 2))
              (license (rab/ox-hugo--get-filled-template-argument
                        :code-license block-arguments)))
        (format "<div class=\"code-snippet\"><p class=\"license\">%s</p>\n\n%s\n\n</div>"
                license result)
      result))
#+end_src

This part is grody, and I've [[https://github.com/kaushalmodi/ox-hugo/discussions/728][solicted a better solution]].  Ideally,
we'd define a [[https://orgmode.org/worg/dev/org-export-reference.html][derived backend]], but Ox-Hugo's export commands are
fairly intricate with the subtree support and don't offer an obvious
way to inject a new backend.  We have to mutate the global settings
for Ox-Hugo.  This is fine as long as we don't have Ox-Hugo sites
incompatible with this extension.  We do the mutation via a minor mode:

#+begin_src emacs-lisp
  (defun rab/ox-hugo--put-backend-transcoders (transcoders)
    "Puts TRANSCODERS alist to the ox-hugo backend as `src-block'."
    (cl-loop for (key . value) in transcoders
             do (map-put! (org-export-backend-transcoders
                           (org-export-get-backend 'hugo))
                          key value)))

  (define-minor-mode rab/ox-hugo-mode
    "Minor mode to override Ox-Hugo's transcoders."
    :global t
    (if rab/ox-hugo-mode
        (rab/ox-hugo--put-backend-transcoders '((src-block . rab/ox-hugo-src-block)))
      (rab/ox-hugo--put-backend-transcoders '((src-block . org-hugo-src-block)))))
#+end_src

**** =rab/ox-hugo-update-lastmod=

This convenience function updates the =EXPORT_HUGO_LAST_MOD= property
of the current Hugo subtree.

#+begin_src emacs-lisp
  (defun rab/ox-hugo-update-lastmod ()
    "Put the last modified time to the current Hugo subtree.

  Finds the nearest `EXPORT_FILE_NAME' property, and puts the
  current time to the `EXPORT_HUGO_LAST_MOD' property."
    (interactive)
    (save-excursion
      (when-let* ((elem (car (org-hugo--get-elem-with-prop :EXPORT_FILE_NAME)))
                  (begin (org-element-property :begin elem))
                  (time (format-time-string (org-time-stamp-format t t) (current-time))))
        (org-entry-put begin "EXPORT_HUGO_LASTMOD" time))))
#+end_src

#+begin_src emacs-lisp
  (provide 'rab-ox-hugo)
  ;;; rab-ox-hugo.el ends here
#+end_src

*** DONE Lisp extensions                                         :emacs_lisp:
CLOSED: [2023-09-12 Tue 23:42 EDT]
:PROPERTIES:
:CUSTOM_ID: rab-lisp
:EXPORT_FILE_NAME: rab-lisp
:header-args:emacs-lisp+: :tangle ../../gen/emacs/lisp/rab-lisp.el :code-license GPL-3.0-only
:EXPORT_HUGO_LASTMOD: [2023-09-12 Tue 23:45 EDT]
:END:

#+begin_description
Extensions to the Ox-Hugo backend for Org Export.
#+end_description

**** Header                                                        :noexport:

#+begin_src emacs-lisp :exports none
  ;;; rab-lisp.el --- Extensions to Lisp Mode for Ross A. Baker's Emacs configuration.

  ;;; Commentary:
  ;;
  ;; Extensions to Lisp Mode for Ross A. Baker's Emacs configuration.

  ;;; Code:
#+end_src

**** Indentation

I would like my property lists to align not like this

#+begin_src emacs-lisp :tangle no
  (:prefix-map rab/git-map
               :prefix "C-c g")
#+end_src

but like this:

#+begin_src emacs-lisp :tangle no
  (:prefix-map rab/git-map
   :prefix "C-c g")
#+end_src

The answer is almost [[https://emacs.stackexchange.com/a/52789][verbatim from Emacs Stack Exchange]], but changed
to my namespace.  I also applied the "bonus," because my primary itch
is =use-package= bindings.

#+caption: [[https://emacs.stackexchange.com/a/52789][Original]] by Aquaactress on Emacs Stack Exchange, ~CC-BY-SA-4.0~.
#+begin_src emacs-lisp
  (defun rab/lisp-calculate-indent (&optional parse-start)
    "Add better indentation for quoted and backquoted lists."
    ;; This line because `calculate-lisp-indent-last-sexp` was defined with `defvar`
    ;; with it's value ommited, marking it special and only defining it locally. So
    ;; if you don't have this, you'll get a void variable error.
    (defvar calculate-lisp-indent-last-sexp)
    (save-excursion
      (beginning-of-line)
      (let ((indent-point (point))
            state
            ;; setting this to a number inhibits calling hook
            (desired-indent nil)
            (retry t)
            calculate-lisp-indent-last-sexp containing-sexp)
        (cond ((or (markerp parse-start) (integerp parse-start))
               (goto-char parse-start))
              ((null parse-start) (beginning-of-defun))
              (t (setq state parse-start)))
        (unless state
          ;; Find outermost containing sexp
          (while (< (point) indent-point)
            (setq state (parse-partial-sexp (point) indent-point 0))))
        ;; Find innermost containing sexp
        (while (and retry
                    state
                    (> (elt state 0) 0))
          (setq retry nil)
          (setq calculate-lisp-indent-last-sexp (elt state 2))
          (setq containing-sexp (elt state 1))
          ;; Position following last unclosed open.
          (goto-char (1+ containing-sexp))
          ;; Is there a complete sexp since then?
          (if (and calculate-lisp-indent-last-sexp
                   (> calculate-lisp-indent-last-sexp (point)))
              ;; Yes, but is there a containing sexp after that?
              (let ((peek (parse-partial-sexp calculate-lisp-indent-last-sexp
                                              indent-point 0)))
                (if (setq retry (car (cdr peek))) (setq state peek)))))
        (if retry
            nil
          ;; Innermost containing sexp found
          (goto-char (1+ containing-sexp))
          (if (not calculate-lisp-indent-last-sexp)
              ;; indent-point immediately follows open paren.
              ;; Don't call hook.
              (setq desired-indent (current-column))
            ;; Find the start of first element of containing sexp.
            (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
            (cond ((looking-at "\\s(")
                   ;; First element of containing sexp is a list.
                   ;; Indent under that list.
                   )
                  ((> (save-excursion (forward-line 1) (point))
                      calculate-lisp-indent-last-sexp)
                   ;; This is the first line to start within the containing sexp.
                   ;; It's almost certainly a function call.
                   (if (or
                        ;; Containing sexp has nothing before this line
                        ;; except the first element. Indent under that element.
                        (= (point) calculate-lisp-indent-last-sexp)

                        ;; First sexp after `containing-sexp' is a keyword. This
                        ;; condition is more debatable. It's so that I can have
                        ;; unquoted plists in macros. It assumes that you won't
                        ;; make a function whose name is a keyword.
                        (when-let (char-after (char-after (1+ containing-sexp)))
                          (char-equal char-after ?:))

                        ;; Check for quotes or backquotes around.
                        (let* ((positions (elt state 9))
                               (last (car (last positions)))
                               (rest (reverse (butlast positions)))
                               (any-quoted-p nil)
                               (point nil))
                          (or
                           (when-let (char (char-before last))
                             (or (char-equal char ?')
                                 (char-equal char ?`)))
                           (progn
                             (while (and rest (not any-quoted-p))
                               (setq point (pop rest))
                               (setq any-quoted-p
                                     (or
                                      (when-let (char (char-before point))
                                        (or (char-equal char ?')
                                            (char-equal char ?`)))
                                      (save-excursion
                                        (goto-char (1+ point))
                                        (looking-at-p
                                         "\\(?:back\\)?quote[\t\n\f\s]+(")))))
                             any-quoted-p))))
                       ;; Containing sexp has nothing before this line
                       ;; except the first element.  Indent under that element.
                       nil
                     ;; Skip the first element, find start of second (the first
                     ;; argument of the function call) and indent under.
                     (progn (forward-sexp 1)
                            (parse-partial-sexp (point)
                                                calculate-lisp-indent-last-sexp
                                                0 t)))
                   (backward-prefix-chars))
                  (t
                   ;; Indent beneath first sexp on same line as
                   ;; `calculate-lisp-indent-last-sexp'.  Again, it's
                   ;; almost certainly a function call.
                   (goto-char calculate-lisp-indent-last-sexp)
                   (beginning-of-line)
                   (parse-partial-sexp (point) calculate-lisp-indent-last-sexp
                                       0 t)
                   (backward-prefix-chars)))))
        ;; Point is at the point to indent under unless we are inside a string.
        ;; Call indentation hook except when overridden by lisp-indent-offset
        ;; or if the desired indentation has already been computed.
        (let ((normal-indent (current-column)))
          (cond ((elt state 3)
                 ;; Inside a string, don't change indentation.
                 nil)
                ((and (integerp lisp-indent-offset) containing-sexp)
                 ;; Indent by constant offset
                 (goto-char containing-sexp)
                 (+ (current-column) lisp-indent-offset))
                ;; in this case calculate-lisp-indent-last-sexp is not nil
                (calculate-lisp-indent-last-sexp
                 (or
                  ;; try to align the parameters of a known function
                  (and lisp-indent-function
                       (not retry)
                       (funcall lisp-indent-function indent-point state))
                  ;; If the function has no special alignment
                  ;; or it does not apply to this argument,
                  ;; try to align a constant-symbol under the last
                  ;; preceding constant symbol, if there is such one of
                  ;; the last 2 preceding symbols, in the previous
                  ;; uncommented line.
                  (and (save-excursion
                         (goto-char indent-point)
                         (skip-chars-forward " \t")
                         (looking-at ":"))
                       ;; The last sexp may not be at the indentation
                       ;; where it begins, so find that one, instead.
                       (save-excursion
                         (goto-char calculate-lisp-indent-last-sexp)
                         ;; Handle prefix characters and whitespace
                         ;; following an open paren.  (Bug#1012)
                         (backward-prefix-chars)
                         (while (not (or (looking-back "^[ \t]*\\|([ \t]+"
                                                       (line-beginning-position))
                                         (and containing-sexp
                                              (>= (1+ containing-sexp) (point)))))
                           (forward-sexp -1)
                           (backward-prefix-chars))
                         (setq calculate-lisp-indent-last-sexp (point)))
                       (> calculate-lisp-indent-last-sexp
                          (save-excursion
                            (goto-char (1+ containing-sexp))
                            (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
                            (point)))
                       (let ((parse-sexp-ignore-comments t)
                             indent)
                         (goto-char calculate-lisp-indent-last-sexp)
                         (or (and (looking-at ":")
                                  (setq indent (current-column)))
                             (and (< (line-beginning-position)
                                     (prog2 (backward-sexp) (point)))
                                  (looking-at ":")
                                  (setq indent (current-column))))
                         indent))
                  ;; another symbols or constants not preceded by a constant
                  ;; as defined above.
                  normal-indent))
                ;; in this case calculate-lisp-indent-last-sexp is nil
                (desired-indent)
                (t
                 normal-indent))))))
#+end_src

**** Foooter                                                       :noexport:

#+begin_src emacs-lisp
  (provide 'rab-lisp)
  ;;; rab-ox-lisp ends here
#+end_src

** DONE Garnix GitHub Action
CLOSED: [2023-06-23 Fri 00:26 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: garnix
:EXPORT_HUGO_LASTMOD: [2023-07-21 Fri 15:11 EDT]
:header-args+: :code-license CC0-1.0
:END:

I have an Apple M1 for work, which is [[https://github.com/github/roadmap/issues/528][not yet supported by GitHub
Actions]].  That's okay, because [[https://garnix.io/][Garnix]] is a great alternative.

*** Build definition

I use it to build the default dev shell, my nix-darwin configuration,
and my home-manager configuration.

#+begin_src yaml :tangle ../../garnix.yaml
  builds:
    include:
      - 'devShells.aarch64-darwin.default'
      - 'homeConfigurations.*'
      - 'packages.aarch64-darwin.aarch64-darwin-config-base'
#+end_src

*** Caching

Everything Garnix builds goes into the [[https://garnix.io/docs/caching][Garnix cache]].  My [[/configs/nix/][flake]] updates
while I'm asleep on Sunday nights, which means if all goes well, I
have a primed cache Monday morning.

*** TODO Broken links                                              :noexport:

- Fix flake link

** DONE Scala configuration  :scala:scala_cli:sbt:gitignore:nix:home_manager:
CLOSED: [2023-05-09 Tue 09:27 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: scala
:EXPORT_HUGO_LASTMOD: [2023-09-08 Fri 15:58 CDT]
:header-args+: :tangle-mode (identity #o444) :mkdirp yes :code-license CC0-1.0
:header-args:nix+: :tangle ../../gen/scala/default.nix
:END:

#+begin_description
Defines a Home Manager module with global SBT plugins, some relevant
commands, and adds Scala-specific rules to ~.gitignore~.
#+end_description

This configuration provides a module to [[https://nix-community.github.io/home-manager/][Home Manager]].  It sets up a
global SBT, a few plugins, and some gitignores relevant to Scala.

*** Sonatype credentials
:PROPERTIES:
:CUSTOM_ID: sonatype-credentials
:END:

This tells sbt where to look for our [[https://central.sonatype.org/publish/publish-guide/][Sonatype]] credentials.

#+caption: ~~/.sbt/1.0/sonatype.sbt~
#+begin_src scala :tangle ../../gen/scala/sonatype.sbt
  credentials += Credentials(Path.userHome / ".sbt" / "sonatype-credentials.properties")
#+end_src

This will not work until a credentials file is added:

#+caption: ~~/.sbt/sonatype-credentials.properties~
#+begin_example conf-javaprop
  realm=Sonatype Nexus Repository Manager
  host=oss.sonatype.org
  user=<<username>>
  password=<<password>>
#+end_example

#+begin_warn
This file contains a secret, and is not installed by our Nix derivation!
#+end_warn

*** SBT Plugins

**** sbt-rewarn

[[https://github.com/rtimush/sbt-rewarn][sbt-rewarn]] preserves warnings across incremental compilations.

#+caption: ~~/.sbt/1.0/plugins/sbt-rewarn.sbt~
#+begin_src scala :tangle ../../gen/scala/sbt-rewarn.sbt
  addSbtPlugin("com.timushev.sbt" % "sbt-rewarn" % "0.1.3")
#+end_src

**** sbt-updates

[[https://github.com/rtimush/sbt-updates][sbt-updates]] shows available updates to library and plugin
dependencies.  [[https://github.com/scala-steward-org/scala-steward][Scala Steward]] takes care of this on many modern
projects, but it's still handy for local checking.

#+caption: ~~/.sbt/1.0/plugins/sbt-updates.sbt~
#+begin_src scala :tangle ../../gen/scala/sbt-updates.sbt
  addSbtPlugin("com.timushev.sbt" % "sbt-updates" % "0.6.1")
#+end_src

**** Dependency graphs

The venerable sbt-dependency-graph was [[https://www.scala-sbt.org/1.x/docs/sbt-1.4-Release-Notes.html#sbt-dependency-graph+is+in-sourced][insourced to sbt-1.4.0]].  It
comes with a ~MiniDependencyTreePlugin~ out of the box, but we want
the fully caffeinated version.

This is available starting in 1.4.0, but it causes scala-xml eviction
madness up until 1.8.0.

#+caption: ~~/.sbt/1.0/plugins/sbt-dependency-tree.sbt~
#+begin_src scala :tangle ../../gen/scala/sbt-dependency-tree.sbt
  libraryDependencies ++= (
    if (VersionNumber(sbtVersion.value).matchesSemVer(SemanticSelector(">=1.8"))) {
      Seq(
        Defaults.sbtPluginExtra(
          ModuleID("org.scala-sbt", "sbt-dependency-tree", sbtVersion.value),
          sbtBinaryVersion.value,
          scalaBinaryVersion.value
        )
      )
    } else Seq.empty
  )
#+end_src

*** Flake module

The Home Manager module is published to my flake as output
~homeManagerModules.scala~.

#+begin_src nix
  { moduleWithSystem, ... }: {
    flake.homeManagerModules.scala = moduleWithSystem(
      perSystem@{ pkgs }: {
        home.file = {
          ".sbt/1.0/sonatype.sbt".source = ./sonatype.sbt;
          ".sbt/1.0/plugins/sbt-rewarn.sbt".source = ./sbt-rewarn.sbt;
          ".sbt/1.0/plugins/sbt-updates.sbt".source = ./sbt-updates.sbt;
          ".sbt/1.0/plugins/sbt-dependency-tree.sbt".source = ./sbt-dependency-tree.sbt;
        };

        home.packages = [
          (pkgs.sbt.override { jre = pkgs.jdk17; })
          (pkgs.scala-cli.override { jre = pkgs.jdk17; })
        ];

        programs.git = {
          ignores = [
            ".bloop/"
            ".bsp/"
            ".metals/"
            "metals.sbt"
          ];
        };
      }
    );
  }
#+end_src

** Python home-manager module                                        :python:
:PROPERTIES:
:EXPORT_FILE_NAME: python
:EXPORT_HUGO_LASTMOD: [2023-07-28 Fri 21:51 EDT]
:header-args+: :tangle-mode (identity #o444) :mkdirp yes :code-license CC0-1.0
:header-args:nix+: :tangle ../../gen/python/default.nix
:END:

#+begin_description
This configuration provides a Home Manager module for general Python
development.
#+end_description

I have dabbled with Python for years, but have little production
experience.  I am used to not knowing what I'm doing, but the feeling
is stronger in this module.

*** Package management

I am fighting hard to use Nix to manage my Python packages, but I
don't have time for a side quest while I'm getting comfortable with
the language.

**** Micromamba
:PROPERTIES:
:CUSTOM_ID: micromamba
:END:

[[https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html][Micromamba]] is an alternative to Anaconda and Miniconda, neither of
which installs cleanly on my Mac.  Unfortunately, the Micromamba nix
package is also marked broken on Darwin due to an RPM dependency.

#+begin_warning
New workstations will need to install Micromamba themselves.
#+end_src

The curlbash fails with ~TypeError: memoryview: a bytes-like object is
required, not 'str'".~ while rudely trying to append to my shell
configurations.  It also hardcodes ~$HOME~.  We'll install this cleaned
up version via home-manager.  New laptops are
version.

#+begin_src sh :tangle ../../gen/python/conda-setup
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$($HOME'mambaforge/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "$HOME/mambaforge/etc/profile.d/conda.sh" ]; then
	  . "$HOME/mambaforge/etc/profile.d/conda.sh"
      else
	  export PATH="$HOME/mambaforge/bin:$PATH"
      fi
  fi
  unset __conda_setup

  if [ -f "$HOME/mambaforge/etc/profile.d/mamba.sh" ]; then
      . "$HOME/mambaforge/etc/profile.d/mamba.sh"
  fi
  # <<< conda initialize <<<
#+end_src

*** Flake module

The Home Manager module is published to my flake as output
~homeManagerModules.python~.

#+begin_src nix
  { moduleWithSystem, ... }: {
    flake.homeManagerModules.python = moduleWithSystem(
      perSystem@{ pkgs }: {
        home.file = {
          ".config/zsh/conda-setup".source = ./conda-setup;
        };

        programs.zsh.initExtra = ''
        . ~/.config/zsh/conda-setup
        '';
      }
    );
  }
#+end_src

** Nix bundle                                                           :nix:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: nix
:END:

*** Redirects                                                      :noexport:

#+begin_src text :tangle ../../tmp/hugo/static/_redirects :exports none
  /configs/nix-flake /configs/nix
  /configs/home-manager /configs/nix/home-manager
  /configs/darwin /configs/nix/darwin
  /configs/devshells /configs/nix/devshells
#+end_src

*** DONE Nix
CLOSED: [2022-12-25 Sun 22:14 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_LASTMOD: [2023-09-13 Wed 22:34 EDT]
:header-args+: :code-license MIT
:END:

#+begin_description
The Cromulent repository hosts a Nix flake for packages, shells, OS
configurations, and home configurations.
#+end_description

At the root of the [[https://github.com/rossabaker/cromulent][Cromulent repository]] is a [[https://nixos.wiki/wiki/Flakes][Nix flake]].  It contains
all my system configurations, home environment configurations,
packages, development shells, and more.

**** What's in the flake
:PROPERTIES:
:CUSTOM_ID: whats-in-the-flake
:END:

#+name: flake-show-outputs
#+begin_src sh :eval yes :exports code :results output verbatim :code-license CC0-1.0
  nix flake show github:rossabaker/cromulent
#+end_src

#+begin_details
#+begin_summary
  Flake outputs
#+end_summary

#+begin_src emacs-lisp :eval yes :var in=flake-show-outputs() :exports results
  (ansi-color-filter-apply in)
#+end_src
#+end_details

**** How to use the Cromulent flake

***** Running apps from the command line

#+begin_src sh :eval yes :exports both :results verbatim
nix run github.com:rossabaker#hello
#+end_src

***** Composing Cromulent into your own flake

#+begin_example nix
{
  inputs = {
    cromulent.url = "github:rossabaker/cromulent";
  };

  outputs = { self, nixpkgs, cromulent }: {
    # Your outputs here
  };
}
#+end_example

**** Flake source

#+begin_warning
This isn't particularly compelling reading yet.  It needs to be made
more "literate".
#+end_warning

#+begin_src nix :tangle ../../flake.nix :tangle-mode `,#o444 :noweb tangle
  {
    description = "Ross A. Baker's perfectly cromulent Nix flake";
    inputs =
      <<flake-inputs>>
    outputs =
      <<flake-outputs>>
  }
#+end_src

****** Flake inputs

#+begin_src nix :noweb-ref flake-inputs
  {
    flake-parts.url = "github:hercules-ci/flake-parts";

    # Core nix flakes
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    # Home manager flake
    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    # nix-darwin flake
    nixpkgs-darwin.url = "github:nixos/nixpkgs/nixpkgs-22.11-darwin";
    darwin.url = "github:LnL7/nix-darwin/master";
    darwin.inputs.nixpkgs.follows = "nixpkgs-darwin";

    # Extra community flakes
    devshell.url = "github:numtide/devshell";
    devshell.inputs.nixpkgs.follows = "nixpkgs";

    emacs-overlay.url = "github:nix-community/emacs-overlay";
    emacs-overlay.inputs.nixpkgs.follows = "nixpkgs";

    firefox-darwin.url = "github:bandithedoge/nixpkgs-firefox-darwin";
    firefox-darwin.inputs.nixpkgs.follows = "nixpkgs-darwin";

    # Emacs packages
    ammonite-term-repl = {
      url = "github:zwild/ammonite-term-repl";
      flake = false;
    };

    fill-sentences-correctly = {
      url = "github:duckwork/fill-sentences-correctly.el";
      flake = false;
    };

    git-related = {
      url = "git+https://codeberg.org/rossabaker/git-related";
      flake = false;
    };

    hocon-mode = {
      url = "github:jxq0/hocon-mode";
      flake = false;
    };

    ob-ammonite = {
      url = "github:zwild/ob-ammonite";
      flake = false;
    };

    on-el = {
      url = "gitlab:ajgrf/on.el";
      flake = false;
    };

    scala-mode = {
      url = "github:Kazark/emacs-scala-mode?ref=scala3";
      flake = false;
    };

    unmodified-buffer = {
      url = "github:arthurcgusmao/unmodified-buffer";
      flake = false;
    };

    emacs-src.url = "github:emacs-mirror/emacs/emacs-29";
    emacs-src.flake = false;

    jinx = {
      url = "github:minad/jinx";
      flake = false;
    };

    # Disabled pending license
    #   copilot-el = {
    #     url = "github:zerolfx/copilot.el";
    #     flake = false;
    #   };
  };
#+end_src

****** Flake outputs

#+begin_src nix :noweb-ref flake-outputs
  inputs:
  let
    mkDarwinConfigModule = { pkgs }: {
      imports = [
        ./gen/nix-darwin
        {
          system.keyboard.enableKeyMapping = true;
          system.keyboard.remapCapsLockToControl = true;
        }
      ];
    };

    mkHomeConfig = { pkgs, system, username, homeDirectory }:
      inputs.home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        modules = [
          {
            home = {
              inherit homeDirectory username;
              stateVersion = "21.11";
            };
            nixpkgs.overlays = [ inputs.emacs-overlay.overlay ];
          }
          inputs.self.homeManagerModules.base
          inputs.self.homeManagerModules.emacs
          inputs.self.homeManagerModules.scala
          inputs.self.homeManagerModules.python
          ./modules/work
        ];
        # Pass our flake inputs into the config
        extraSpecialArgs = { inherit inputs; };
      };

    aarch64-darwin-config-base = pkgs: mkDarwinConfigModule {
      inherit pkgs;
    };

    overlays = {
      emacs = inputs.emacs-overlay.overlay;
      devshell = inputs.devshell.overlays.default;
    };

    pkgsFor = system: import inputs.nixpkgs {
      inherit system;
      overlays = builtins.attrValues inputs.self.overlays;
    };

    darwinConfigurationModules = {
      aarch64-base = aarch64-darwin-config-base (pkgsFor "aarch64-darwin");
    };

    flakeModules = {
      emacs = ./gen/emacs;
      scala = ./gen/scala;
      python = ./gen/python;
      modernTs = ./gen/modern_ts;
      homeManager = ./gen/home-manager;
    };
  in
  inputs.flake-parts.lib.mkFlake { inherit inputs; } {
    imports = [
      ./gen/flake/modules/homeManagerModules.nix
      flakeModules.emacs
      flakeModules.scala
      flakeModules.python
      flakeModules.modernTs
      flakeModules.homeManager
      inputs.flake-parts.flakeModules.easyOverlay
    ];

    flake = {
      inherit overlays darwinConfigurationModules;

      homeConfigurations = {
        "RABaker@L2LYQM57XY" = mkHomeConfig {
          pkgs = (pkgsFor "aarch64-darwin");
          system = "aarch64-darwin";
          username = "RABaker";
          homeDirectory = "/Users/RABaker";
        };
      };

      inherit flakeModules;
    };

    systems = [
      "x86_64-linux"
      "aarch64-darwin"
    ];

    perSystem = { config, self', inputs', system, pkgs, ... }:
      let
        hm = inputs.home-manager.defaultPackage."${system}";

        darwinPackages =
          if (system == "aarch64-darwin") then {
            aarch64-darwin-config-base = (inputs.darwin.lib.darwinSystem {
              system = "aarch64-darwin";
              modules = [ darwinConfigurationModules.aarch64-base ];
            }).system;
          } else { };
      in
        {
          _module.args.pkgs = import inputs.nixpkgs {
            inherit system;
            overlays = [
              inputs.devshell.overlays.default
              inputs.emacs-overlay.overlays.default
              (final: prev: {
                hyperlink = config.packages.hyperlink;
              })
            ];
          };

          apps = {
            hello = {
              type = "app";
              program = "${pkgs.hello}/bin/hello";
            };
          };

          packages = {
            website = pkgs.callPackage ./gen/website {
              emacs = self'.packages.emacs-ross;
              src = ./src;
            };

            hyperlink = pkgs.callPackage ./src/nix/pkgs/hyperlink {};
          } // darwinPackages;

          devShells.default = pkgs.devshell.mkShell {
            name = "cromulent";

            commands = [
              {
                name = "hm-switch";
                help = "switch the home-manager config";
                command = "${hm}/bin/home-manager switch --flake $PRJ_ROOT";
              }
              {
                name = "serve";
                help = "run 'hugo serve' on the local project";
                command = "(cd $PRJ_ROOT && ${pkgs.hugo}/bin/hugo serve --disableFastRender --config tmp/hugo/config.toml)";
              }
            ];

            packages = [
              hm
              pkgs.google-cloud-sdk
              pkgs.hugo
              pkgs.nix
              pkgs.terraform
            ];
          };

          overlayAttrs = {
            hyperlink = config.packages.hyperlink;
          };
        };
  };
#+end_src

**** Home Manager modules

Our flake is split into multiple modules, via the ~flake.flakeModules~
configuration.  These flake modules may themselves provide Home
Manager modules.  The ~flake~ schema supports other types of modules,
like ~nixosModules~, but ~homeManagerModules~ is unofficial.  As such,
it's not handled by Flake Parts like [[https://github.com/hercules-ci/flake-parts/blob/006c75898cf814ef9497252b022e91c946ba8e17/modules/nixosModules.nix][~nixosModules~]] is.  We fix that
with a copy and paste:

#+begin_src nix :tangle ../../gen/flake/modules/homeManagerModules.nix
  # Adapted from https://github.com/hercules-ci/flake-parts/blob/006c75898cf814ef9497252b022e91c946ba8e17/modules/nixosModules.nix
  # MIT License
  # Copyright (c) 2021 Hercules CI

  { config, self, lib, flake-parts-lib, ... }:
  let
    inherit (lib)
      filterAttrs
      mapAttrs
      mkOption
      optionalAttrs
      types
    ;
    inherit (flake-parts-lib)
      mkSubmoduleOptions
    ;
  in
  {
    options = {
      flake = mkSubmoduleOptions {
        homeManagerModules = mkOption {
          type = types.lazyAttrsOf types.unspecified;
          default = { };
          apply = mapAttrs (k: v: { _file = "${toString self.outPath}/flake.nix#homeManagerModules.${k}"; imports = [ v ]; });
        };
      };
    };
  }

#+end_src


*** DONE Home Manager                                      :nix:home_manager:
CLOSED: [2023-09-08 Fri 16:59 CDT]
:PROPERTIES:
:EXPORT_FILE_NAME: home-manager
:header-args+: :tangle-mode (identity #o444) :mkdirp yes :code-license MIT
:header-args:nix+: :tangle ../../gen/home-manager/default.nix
:END:

#+begin_description
Defines a base home-manager module.
#+end_description

We prefer to keep a robust user environment along with a lean
configurations for NixOS and nix-darwin.  This keeps our environment
maximally portable between those operating systems, as well as any
other hosts that support the Nix package manager (e.g., Debian).

**** Base configuration

This is imported from preliterate times and should be broken up
further.

#+begin_src nix :tangle ../../gen/home-manager/default.nix
  { moduleWithSystem, ... }: {
    flake.homeManagerModules.base = moduleWithSystem(
      perSystem@{ pkgs }: {
        # Comment out if you wish to disable unfree packages for your system
        nixpkgs.config.allowUnfree = true;

        # Add stuff for your user as you see fit:
        # programs.neovim.enable = true;
        home.packages = [
          pkgs.coreutils
          pkgs.element-desktop
          pkgs.jq
          pkgs.nixpkgs-fmt
          pkgs.postgresql_14
        ];

        programs.direnv = {
          enable = true;
          enableBashIntegration = true;
          enableZshIntegration = true;
        };

        programs.home-manager.enable = true;

        programs.git = {
          enable = true;
          ignores = [
            ".DS_Store"
            ".direnv/"
          ];
          userName = "Ross A. Baker";
          userEmail = "ross@rossabaker.com";
        };

        programs.gpg = {
          enable = true;
        };

        programs.zsh.enable = true;

        # Nicely reload system units when changing cnofigs
        systemd.user.startServices = "sd-switch";
      }
    );
  }
#+end_src

*** DONE Darwin               :nix:macos:nix_darwin:postgresql:podman:docker:
CLOSED: [2023-08-07 Mon 09:48 EDT]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: darwin
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_LASTMOD: [2023-08-08 Tue 10:28 EDT]
:END:

#+begin_description
Defines set of nix-darwin modules in support of mostly declarative
MacOS systems.
#+end_description

[[https://github.com/LnL7/nix-darwin][nix-darwin]] is a set of Nix modules for a declarative MacOS system.  It
is similar in purpose, but less thorough, than NixOS is for Linux.

I only own a MacBook because work chose it for me, and I hope to never
own two.  In practice, all of these modules will likely be mixed into
a single machine config, but it's still nice to separate them.

#+begin_info
This is imported from preliterate times, and could be broken up
further.
#+end_info

#+begin_src nix :tangle ../../gen/nix-darwin/default.nix
  { config, pkgs, ... }:

  {
    imports = [
      ./podman.nix
      ./postgresql.nix
    ];

    # List packages installed in system profile. To search by name, run:
    # $ nix-env -qaP | grep wget
    environment.systemPackages =
      [
        pkgs.cachix
        pkgs.docker
      ];

    # Use a custom configuration.nix location.
    # $ darwin-rebuild switch -I darwin-config=$HOME/.config/nixpkgs/darwin/configuration.nix
    # environment.darwinConfig = "$HOME/.config/nixpkgs/darwin/configuration.nix";

    # Auto upgrade nix package and the daemon service.
    # services.nix-daemon.enable = true;
    nix = {
      settings.substituters = [
        "https://nix-community.cachix.org/"
        "https://rossabaker.cachix.org/"
        "https://typelevel.cachix.org/"
        "https://cache.garnix.io/"
      ];
      settings.trusted-public-keys = [
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "rossabaker.cachix.org-1:KK/CQTeAGEurCUBy3nDl9PdR+xX+xtWQ0C/GpNN6kuw="
        "typelevel.cachix.org-1:UnD9fMAIpeWfeil1V/xWUZa2g758ZHk8DvGCd/keAkg="
        "cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g="
      ];
      package = pkgs.nixFlakes;
      extraOptions = ''
        experimental-features = nix-command flakes
      '';
    };

    # Create /etc/bashrc that loads the nix-darwin environment.
    programs.zsh.enable = true; # default shell on catalina
    # programs.fish.enable = true;

    services.nix-daemon.enable = true;

    # Used for backwards compatibility, please read the changelog before changing.
    # $ darwin-rebuild changelog
    system.stateVersion = 4;

    fonts = {
      fontDir.enable = true;
      fonts = [ pkgs.ibm-plex ];
    };
  }
#+end_src

**** Docker

There's no Docker service built into nix-darwin, but [[https://podman.io/][Podman]] has been
an effective substitute thus far.

#+begin_src nix :tangle ../../gen/nix-darwin/podman.nix
  { config, lib, pkgs, ... }:

  {
    # List packages installed in system profile. To search by name, run:
    # $ nix-env -qaP | grep wget
    environment.systemPackages =
      [
        pkgs.podman
        pkgs.qemu
        pkgs.xz
      ];

    environment.pathsToLink = [ "/share/qemu" ];

    programs.zsh.interactiveShellInit = lib.strings.concatStringsSep "\n" [
      config.system.build.setAliases.text
      "export DOCKER_HOST=unix://$(podman machine inspect --format '{{.ConnectionInfo.PodmanSocket.Path}}')"
    ];

    # https://github.com/LnL7/nix-darwin/issues/432#issuecomment-1024951660
    environment.etc."containers/containers.conf.d/99-gvproxy-path.conf".text = ''
      [engine]
      helper_binaries_dir = ["${pkgs.gvproxy}/bin"]
    '';
  }
#+end_src

**** PostgreSQL

This is not as smooth an experience as the NixOS module.

- The nix-darwin module doesn't create a dedicated ~postgres~ system
  user.  Everything runs as the local user.
- It doesn't create the data directory.
- It doesn't set up the logs.
- The =initdb= call doesn't work out of the box.
- It creates a ~postgres~ superuser, but because it's peer
  authenticated and there's no ~postgres~ system user.

We fix all of those here.

A bunch of docker-compose files in my world claim port ~5432~, so we
trudge off to the non-standard ~5433~.

#+begin_src nix :tangle ../../gen/nix-darwin/postgresql.nix
  { config, pkgs, ... }:

  let
    dataDir = "/var/lib/postgresql/14";
    logDir = "/var/log/postgresql";
    user = "RABaker";
    port = 5433;
  in
  {
    services = {
      postgresql = {
        inherit dataDir port;
        enable = true;
        package = pkgs.postgresql_14;
        initdbArgs = [ "-D" dataDir ];
      };
    };

    users = {
      knownUsers = [ "postgres" ];
      users = {
        postgres = {
          uid = 2000;
          shell = "/bin/bash";
        };
      };
    };

    # Create the PostgreSQL data directory, if it does not exist.
    system.activationScripts.preActivation = {
      enable = true;
      text = ''
        if [ ! -d "${dataDir}" ]; then
          echo "creating PostgreSQL data directory..."
          sudo mkdir -m 700 -p "${dataDir}/"
          chown -R ${user}:staff "${dataDir}/"
        fi

        if [ ! -d "/var/log/postgresql" ]; then
          echo "creating PostgreSQL log directory..."
          sudo mkdir -m 700 -p "${logDir}/"
          chown -R ${user}:staff "${logDir}/"
        fi
      '';
    };

    launchd.user.agents.postgresql.serviceConfig = {
      StandardErrorPath = "${logDir}/postgres.error.log";
      StandardOutPath = "${logDir}/postgres.out.log";
    };
  }
#+end_src

**** Connecting

By default, the ~postgres~ PostgreSQL user is supported via ~peer~
authentication over local sockets, which means we can authenticate
when logged in as the ~postgres~ system user.  Don't forget the
nonstandard port:

#+begin_example sh
sudo -u postgres -i psql -p 5433
#+end_example
*** DONE Devshells bundle
CLOSED: [2023-07-25 Tue 12:06 EDT]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: devshells
:END:

**** DONE Devshells
CLOSED: [2023-07-25 Tue 12:27 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

#+begin_description
An overview on why I use Nix devshells
#+end_description

I use [[https://github.com/numtide/devshell][Nix devshells]] extensively.  I am a strong believer that projects
should declare their development environment in code, so getting
started on a project is as simple as cloning from Git and pulling down
some (hopefully cached) dependencies.  This effort has two paydays:

- Whenever you onboard a teammate
- Whenever you set up a new workstation

**** DONE Devshell for Modern Time Series Forecasting with Python
CLOSED: [2023-07-25 Tue 12:06 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: modern-time-series-forecasting-with-python
:EXPORT_HUGO_LASTMOD: [2023-07-28 Fri 21:57 EDT]
:header-args+: :code-license MIT
:END:

#+begin_description
Paused attempt to defines a Nix devshell for the book Modern Time
Series Forecasting with Python.
#+end_description

#+begin_warning
This doesn't work at all.  I have tabled this effort for now in
grudging favor of [[/configs/python/#micromamba][Micromamba]].
#+end_warning

I'm reading [[https://www.packtpub.com/product/modern-time-series-forecasting-with-python/9781803246802?utm_source=github&utm_medium=repository&utm_campaign=9781803246802][Modern Time Series Forecasting with Python]].  The first
thing it asks me to do is install Conda, but package managers other
than Nix give me a rash.  I've attempted to replicate its [[https://github.com/PacktPublishing/Modern-Time-Series-Forecasting-with-Python/blob/595fc7313e47834a1d303a5c52cad5fcddfde557/anaconda_env.yml][anaconda env]]
to a devshell.  Try it out like this:

#+begin_src sh :eval no :code-license CC0-1.0
  nix develop github:rossabaker/cromulent#modernTs
#+end_src

#+begin_warning
This shell will only work with =nixpkgs.config.allowUnfree= set to
true.
#+end_warning

This should be more or less equivalent to the =conda activate
modern_ts= instruction.  If you don't like it, ~^D~ and your money
back.

****** Caveats

******* Missing packages

There are several packages not yet bundled in this devshell.  I'll try
harder once they bite me.

- ~jupyterlab-code-formatter~ :: nix-template is full of syntax errors
- ~kaleido~ :: nix-template can't find ="Homepage"= field
- ~lightning~ :: nix-template is full of syntax errors
- ~optuna~ :: Broken in nixpkgs, nix-template can't find ="Homepage"= field
- ~torchaudio-bin~ :: unsupported on ~aarch64-apple-darwin~
- ~torchvision-bin~ :: unsupported on ~aarch64-apple-darwin~

******* Unimportable packages

We generated a Nix expression for these packages, but the results
aren't importable in the bundled Python environment, which kind of
defeats the point.

- ~aquirdturtle-collapsible-headings~
- ~catboost~
- ~category-encoders~
- ~missingno~
- ~pmdarima~
- ~pymannkendall~
- ~pytorch-forecasting~
- ~pytorch-tabular~
- ~statsforecast~
- ~tensor-sensor~
- ~tsfel~
- ~u8darts~
- ~window-ops~

******* CUDA support outside Linux

This devshell fails on [[https://github.com/PacktPublishing/Modern-Time-Series-Forecasting-with-Python/blob/595fc7313e47834a1d303a5c52cad5fcddfde557/test_installation.py#L8][~test_installation.py~]] on at least
~aarch64-darwin~.  =python3Packages.torch-bin= does not include CUDA
support outside Linux.

****** How it works

The official definition uses Python 3.9, but I ran into problems with
~importlib-metadata~, so we're going to just use =pkgs.python3= and
hope for the best.  Several of the dependencies don't exist.  Many of
them can be templated from PyPi:

#+begin_src sh :eval no-export :code-license CC0-1.0
  for i in catboost category-encoders pmdarima pytorch-forecasting \
	   statsforecast u8darts \
	   missingno window-ops pymannkendall tsfel pytorch_tabular \
	   tensor-sensor aquirdturtle-collapsible-headings
  do
      rm -f $i.nix
      nix-template python -u https://pypi.org/project/$i/ $i.nix
  done
#+end_src

It all comes together in this [[https://flake.parts/index.html][flake module]].

#+begin_src nix :tangle ../../gen/modern_ts/default.nix
  { inputs, lib, moduleWithSystem, ... }:

  let
    pythonPackages = ps: with ps; [
      plotly
      xgboost
      scikit-learn
      pandas
      (import ./catboost.nix)
      lightgbm
      (import ./category-encoders.nix)
      (import ./pmdarima.nix)
      ipywidgets
      jupyterlab
      black
      isort
      xlrd
      lxml
      openpyxl
      # kaleido
      pyarrow
      numpy
      scipy
      tqdm
      matplotlib
      humanize
      # optuna
      (import ./pytorch-forecasting.nix)
      numba
      holidays
      seaborn
      statsmodels
      (import ./statsforecast.nix)
      (import ./u8darts.nix)
      torch-bin
      # torchvision-bin
      # torchaudio-bin
      # lightning
      kaggle
      (import ./missingno.nix)
      (import ./window-ops.nix)
      (import ./pymannkendall.nix)
      (import ./tsfel.nix)
      rich
      (import ./pytorch_tabular.nix)
      omegaconf
      (import ./tensor-sensor.nix)
      # (import ./jupyterlab-code-formatter.nix)
      (import ./aquirdturtle-collapsible-headings.nix)
    ];
  in {
    perSystem = { config, self', inputs', pkgs, system, ... }: {
      devShells.modernTs = pkgs.devshell.mkShell {
        name = "modern-ts";
        packages = [
          (pkgs.python3.withPackages pythonPackages)
        ];
      };
    };
  }
#+end_src

***** TODO Broken links

- Micromamba link was ambiguous

* Projects section
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: projects
:END:
** DONE Projects
CLOSED: [2022-11-07 Mon 22:35 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
** DONE Web Key Directory                         :pgp:wkd:indieweb:noexport:
CLOSED:
:PROPERTIES:
:EXPORT_DATE: [2022-11-02 Wed 23:39 EDT]
:EXPORT_HUGO_LASTMOD: [2022-11-15 Tue 16:22 EST]
:EXPORT_FILE_NAME: web-key-directory
:HEADER-ARGS+: :eval yes
:END:

#+begin_description
  Walks through publishing a public key with the Web Key Directory (WKD) protocol.
#+end_description

#+begin_src text :tangle ../../tmp/hugo/static/_redirects :exports none
  /configs/web-directory /configs/web-key-directory
  /projects/web-key-directory /configs/web-key-directory
#+end_src

** DONE Personal Weather Station             :@personal:weather:indianapolis:
CLOSED: [2022-08-28 Sun 21:03 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: personal-weather-station
:EXPORT_DESCRIPTION: Data from my personal weather station in Indianapolis, Indiana.
:EXPORT_HUGO_LASTMOD: [2022-09-07 Wed 00:00 EDT]
:END:

I run an [[https://ambientweather.net/][Ambient Weather]] WS-1400-IP weather station in the Castleton
neighborhood of Indianapolis and share its [[https://ambientweather.net/devices/public/b78b5bb0e59646a78a623a940937335c][public dashboard]].  The
anemometer is not raised high enough for accuracy, but the rest is
reasonably accurate.

#+begin_aside
I learned on 2022-09-06 that the [[https://www.ind.com/business/general-aviation-airports/metropolitan-airport][Indianapolis Metropolitan Airport]] is
now [[https://aviationweather.gov/metar/data?ids=kump&format=decoded&hours=24&taf=off&layout=on][publishing METAR data]].  That airport is just a mile away, and
certainly has a more credible weather station, but it's fun to compare
to mine.
#+end_aside

#+begin_export html
  <iframe class="weather-station" src="https://ambientweather.net/devices/public/b78b5bb0e59646a78a623a940937335c?embed=true"></iframe>
#+end_export

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css :exports none
  .weather-station {
      width: 500px;
      height: 400px;
      max-width: 100%;
      display: block;
      margin: 1.5em auto;
  }
#+end_src

** Books                                                               :book:
*** DONE Scalatra in Action           :@tech:scala:scalatra:http:sbt:scalate:
CLOSED: [2022-11-21 Mon 21:03 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: scalatra-in-action
:EXPORT_DATE: <2016-05-23 Mon>
:EXPORT_HUGO_PUBLISHDATE: [2022-08-30 Tue 22:44 EDT]
:EXPORT_HUGO_LASTMOD: [2022-08-30 Tue 22:44 EDT]
:END:

[[https://www.manning.com/books/scalatra-in-action][Scalatra in Action]] was written by [[https://constructiveproof.com/][Dave Hrycyszyn,]] Stefan Ollinger, and
me and covers the [[https://scalatra.org/][Scalatra micro-framework]] in depth.  Scalatra is a
port of Ruby's Sinatra to Scala.

#+hugo:more

#+attr_html: :alt Scalatra in Action book cover :class scalatra-in-action
[[https://www.manning.com/books/scalatra-in-action][file:../hugo/static/img/scalatra-in-action.jpg]]

From the publisher:

#+begin_quote
_Scalatra in Action_ covers the Scalatra framework in its entirety,
starting with concepts such as request routing, input handling,
actions, and HTTP responses. For readers who don't already know Scala,
the book introduces the Scala language and sbt, the Simple Build
Tool. You'll learn how to use Scalatra's powerful template engine,
Scalate. It also covers advanced topics such as data access, handling
heavy load, asynchronicity, securing your application, designing
RESTful APIs, and real-time web programming.
#+end_quote

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css :exports none
  figure.scalatra-in-action {
      margin: 0 auto;
      max-width: 360px;
      max-height: 452px
  }

  .scalatra-in-action {
      display: block;
      width: auto;
      height: auto;
      margin: 0 auto;
  }
#+end_src

** DONE Matrix home server                             :@tech:matrix:synapse:
CLOSED: [2022-11-21 Mon 21:03 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: matrix-home-server
:EXPORT_DATE: [2022-05-05 Thu 17:27 EDT]
:EXPORT_HUGO_LASTMOD: [2023-01-16 Mon 09:49 EST]
:header-args+: :code-license CC0-1.0
:header-args:nix+: :code-license MIT
:END:

I run my [[https://matrix.to/#/@ross:rossabaker.com][Matrix presence]] on a personal Synapse server in Google Cloud.
Everything described here runs in the free tier, but I am not
responsible if you run this and get a bill.

#+begin_warning
  <2022-06-02 Thu>: I got charged $0.02 for storage last month.
#+end_warning

#+begin_info
  [2022-11-15 Tue 19:15 EST]: I plan to move this to Hetzner Cloud.
#+end_info

*** Terraform

~20.03~ is disappointingly old, but it's the newest one I can find
publicly. I upgraded this on the instance after it was created. It
would be good to get a fresher image on GCS, but it'll cost a few
pennies.

#+begin_src terraform /*:tangle main.tf*/
  module "nixos_image" {
    source = "github.com/tweag/terraform-nixos/google_image_nixos"
    nixos_version = "20.03"
  }
#+end_src

I created this project manually.  To create a project directly, we'd
need another "admin" project to bootstrap things.  The
~"rossabaker-348417"~ is repeated frequently and belongs in a
variable.

#+begin_src terraform /*:tangle main.tf*/
  provider "google" {
    project = "rossabaker-348417"
    region  = "us-central1"
    zone    = "us-central1-c"
  }
#+end_src

These APIs need to be enabled for subsequent calls to work.

#+begin_src terraform /*:tangle main.tf*/
  resource "google_project_service" "compute" {
    project = "rossabaker-348417"
    service = "compute.googleapis.com"
  }

  resource "google_project_service" "oslogin" {
    project = "rossabaker-348417"
    service = "oslogin.googleapis.com"
  }
#+end_src

~enable-oslogin~ lets us log into the machine as our Google identity.
The ~nix-configuration~ is a handy way to expose the NixOS
configuration, since we don't have a custom image to bake it into.

#+begin_src terraform /*:tangle main.tf*/
  resource "google_compute_instance" "vm_instance" {
    name         = "abe"
    machine_type = "e2-micro"

    boot_disk {
      initialize_params {
        image = module.nixos_image.self_link
        size  = 10
      }
    }

    metadata = {
      enable-oslogin = "TRUE"
      nix-configuration = file("configuration.nix")
    }

    network_interface {
      # A default network is created for all GCP projects
      network = "default"
      access_config {
      }
    }

    tags = ["http-server"]
  }
#+end_src

To refresh the configuration on the instance, we can run:

#+begin_src sh :code-license CC0-1.0
  curl "http://metadata.google.internal/computeMetadata/v1/instance/attributes/nix-configuration" -H "Metadata-Flavor: Google" | sudo tee /etc/nixos/configuration.nix && sudo nixos-rebuild --upgrade switch
#+end_src

The ~http-server~ tag links it up with the VM instance above so the
firewall rules apply.  In hindsight, port ~443~ probably would have
been sufficient here.

#+begin_src terraform /*:tangle main.tf*/
  resource "google_compute_firewall" "http-server" {
    name    = "http-server"
    network = "default"

    allow {
      protocol = "tcp"
      ports    = ["80", "443"]
    }

    source_ranges = ["0.0.0.0/0"]
    target_tags   = ["http-server"]
  }
#+end_src

Make ourselves an admin:

#+begin_src terraform /*:tangle main.tf*/
  resource "google_project_iam_binding" "os-login-admin-users" {
    project = "rossabaker-348417"
    role = "roles/compute.osAdminLogin"

    members = [
      "user:rossabaker@gmail.com"
    ]
  }
#+end_src

Finally, lock our dependencies:

#+begin_src hcl /*:tangle .terraform.lock.hcl*/ :code-license CC0-1.0
  provider "registry.terraform.io/hashicorp/google" {
    version = "4.19.0"
    hashes = [
      "h1:Qom1Evv0g66L2+oEiDzc3vgSKD2kUkpGcQt3R1m2Kdc=",
      "zh:17aa6d222e00259bcf08a664a3a617ed1e41a6ab3428316be3b1aa997baa3642",
      "zh:3e357ff59d6e75eef4b488db2a13105b7aa8a2bf71e27cb7fdcabfb30e6da5d7",
      "zh:8af83e35bdda0df0f004c6294edc1d4119e457fab6eb7a73606529e245d8ae31",
      "zh:9047896a8c7d3a9d749acdecaa7e5bc5589b2cbe54afeb30466a21597440d38f",
      "zh:90dc3dbb28c368e76504f370c5f2d6887284369b072e4b74d0ad49eb87225ec8",
      "zh:b3918565d747c92db62be37a91bdcd0a330334b25843746b85fe8279f7aa6c0b",
      "zh:da845ee82ce4639bf348e9ac6e8f6a229c413a7e3d6a2e67a50c49561901d5ce",
      "zh:db856e3830052ecc6b6ee5874bc9f7e97dcbbd9aaea6fc65e536121158cde630",
      "zh:dc28a6f24a2aea6f7ddbfa4e69bc31796ceff88f0fefec99af2d1ee0f043af6c",
      "zh:e5c05fee01c4c22077073155f0718c44e70983b865c6705e5e3d0f84df21fd8b",
      "zh:fa7625309c9ed9df92657a3e398c827874415a885e52b13c4d6451265f5de485",
    ]
  }
#+end_src

***** Nix

Most of this configuration comes from the [[https://nixos.org/manual/nixos/stable/index.html#module-services-matrix-synapse][Synapse Homeserver]] section
of the NixOS manual.

#+begin_src nix /*:tangle default.nix*/
  { pkgs, lib, modulesPath, ... }:

  {
    imports = [
      "${toString modulesPath}/virtualisation/google-compute-image.nix"
    ];

    networking = {
      hostName = "abe";
      domain = "gcp.rossabaker.com";
    };
    networking.firewall.allowedTCPPorts = [ 80 443 ];

    security.acme.email = "ross@rossabaker.com";
    security.acme.acceptTerms = true;

    services.postgresql.enable = true;
    services.postgresql.initialScript = pkgs.writeText "synapse-init.sql" ''
        CREATE ROLE "matrix-synapse" WITH LOGIN PASSWORD 'synapse';
        CREATE DATABASE "matrix-synapse" WITH OWNER "matrix-synapse"
          TEMPLATE template0
          LC_COLLATE = "C"
          LC_CTYPE = "C";
      '';

    services.nginx = {
      enable = true;
      # only recommendedProxySettings and recommendedGzipSettings are strictly required,
      # but the rest make sense as well
      recommendedTlsSettings = true;
      recommendedOptimisation = true;
      recommendedGzipSettings = true;
      recommendedProxySettings = true;

      virtualHosts = {
        # Reverse proxy for Matrix client-server and server-server communication
        "matrix.rossabaker.com" = {
          enableACME = true;
          forceSSL = true;

          # Or do a redirect instead of the 404, or whatever is appropriate for you.
          # But do not put a Matrix Web client here! See the Element web section below.
          locations."/".extraConfig = ''
              return 404;
            '';

          # forward all Matrix API calls to the synapse Matrix homeserver
          locations."/_matrix" = {
            proxyPass = "http://[::1]:8008"; # without a trailing /
          };
        };
      };
    };
    services.matrix-synapse = {
      enable = true;
      settings = {
        server_name = "rossabaker.com";
        listeners = [
          {
            port = 8008;
            bind_addresses = [ "::1" ];
            type = "http";
            tls = false;
            x_forwarded = true;
            resources = [
              {
                names = [ "client" "federation" ];
                compress = false;
              }
            ];
          }
        ];
      };
    };
  }
#+end_src

The password in ~initialScript~ is gross, but NixOS' PostgreSQL
defaults to peer authentication for domain sockets, and we don't
expose PostgreSQL outside the localhost.  Just to be extra safe, I
manually ran:

#+begin_src sql
  ALTER ROLE "matrix-synapse" PASSWORD null;
#+end_src

*** Federation

Federation is configured via the ~.well-known~ directory.  All we need
are two static files:

***** ~/.well-known/matrix/server~

#+begin_src json :tangle "../../tmp/hugo/static/.well-known/matrix/server" :eval no :mkdirp yes :eval no :mkdirp yes
  {
    "m.server": "matrix.rossabaker.com:443"
  }
#+end_src

***** ~/.well-known/matrix/client~

#+begin_src json :tangle "../../tmp/hugo/static/.well-known/matrix/client" :eval no :mkdirp yes
  {
    "m.homeserver": {
      "base_url": "https://matrix.rossabaker.com"
    },
    "m.identity_server": {
       "base_url": "https://vector.im"
    }
  }
#+end_src

***** CORS headers

The well-known files need CORS headers.  If deploying to Netlify, add this to ~netlify.toml~:

#+begin_src conf-toml :tangle ../../tmp/netlify.toml.d/matrix.toml :eval no :mkdirp yes
  [[headers]]
    for = "/.well-known/matrix/*"
    [headers.values]
      Access-Control-Allow-Origin = "*"
#+end_src

** DONE Archive your toots to Hugo :@tech:scala:scala_cli:indieweb:hugo:pesos:mastodon:activity_streams:own_your_data:fs2:circe:
:PROPERTIES:
:EXPORT_DATE: [2022-11-07 Mon 22:37 EST]
:EXPORT_HUGO_LASTMOD: [2023-07-03 Mon 01:10 EDT]
:EXPORT_DESCRIPTION: How to batch archive an exported stream of Mastodon toots to a Hugo website using Scala CLI
:EXPORT_OPTIONS: h:6
:EXPORT_FILE_NAME: toot-archive
:header-args:scala+: :code-license GPL-3.0-only
:header-args:sh+: :code-license CC0-1.0
:END:

An important Indieweb principle is to [[https://indieweb.org/own_your_data][own your data]].  I tooted on
[[https://mastodon.social/web/@rossabaker][mastodon.social]] sporadically for five years.  The service is public,
the protocol open, and the implementation open source.  Still, it
exists at the pleasure of its admins, with whom I have no contract.

After moving to [[https://indieweb.social/web/@rossabaker][another instance]], I wanted to preserve my old content.
We will use a technique called [[https://indieweb.org/PESOS][PESOS]], or Publish Elsewhere, Syndicate
to Own Site.

*** Request your archive

The first step is to [[https://docs.joinmastodon.org/user/moving/#export][request your archive]].  This can be done once
every seven days.  PESOS is typically done more often, but it's async.
Ours just took years.[fn:6]

Download the archive.  Inside the archive is an ~outbox.json~ file in
[[https://www.w3.org/TR/activitystreams-core/][Activity Streams]] format.  The interesting part is the ~orderedItems~
array.

#+begin_details
#+begin_summary
An example toot in JSON
#+end_summary

#+begin_example json
  {
    "id": "https://mastodon.social/users/rossabaker/statuses/1426597/activity",
    "type": "Create",
    "actor": "https://mastodon.social/users/rossabaker",
    "published": "2017-04-02T03:08:25Z",
    "to": [
      "https://www.w3.org/ns/activitystreams#Public"
    ],
    "cc": [
      "https://mastodon.social/users/rossabaker/followers"
    ],
    "object": {
      "id": "https://mastodon.social/users/rossabaker/statuses/1426597",
      "type": "Note",
      "summary": null,
      "inReplyTo": null,
      "published": "2017-04-02T03:08:25Z",
      "url": "https://mastodon.social/@rossabaker/1426597",
      "attributedTo": "https://mastodon.social/users/rossabaker",
      "to": [
        "https://www.w3.org/ns/activitystreams#Public"
      ],
      "cc": [
        "https://mastodon.social/users/rossabaker/followers"
      ],
      "sensitive": false,
      "atomUri": "tag:mastodon.social,2017-04-02:objectId=1426597:objectType=Status",
      "inReplyToAtomUri": null,
      "conversation": null,
      "content": "<p>brb, importing all my Google+ circles</p>",
      "contentMap": {
        "en": "<p>brb, importing all my Google+ circles</p>"
      },
      "attachment": [],
      "tag": [],
      "replies": {
        "id": "https://mastodon.social/users/rossabaker/statuses/1426597/replies",
        "type": "Collection",
        "first": {
          "type": "CollectionPage",
          "next": "https://mastodon.social/users/rossabaker/statuses/1426597/replies?only_other_accounts=true&page=true",
          "partOf": "https://mastodon.social/users/rossabaker/statuses/1426597/replies",
          "items": []
        }
      }
    },
    "signature": {
      "type": "RsaSignature2017",
      "creator": "https://mastodon.social/users/rossabaker#main-key",
      "created": "2022-10-31T23:28:47Z",
      "signatureValue": "XcbN0gZXgXPky8TNsxpLT81SGHkTWBu89CBUs0pKJPtmAJzr3CTNyXg9CS9mq1+Ca7NIo6uqs0r39og0WT+dtRzTCJscJKCU3YZAOnVPvBk39j6iVVMGYh/PNw+qBpbJc/SXdFyBtKWOI0M8id+yMQHUzuiIx5XVEBv2L9SFXp+btCHpJXWXr33z+RLwCozwwUXbCpiN0mNln9AB481KBOJLXddHRaad/KQLvwcRDy1c2LktqVqzZCv/aH8N5tb78Jmn84cTOqMwsp4j10wrSNGR1tj9Lca8lEIfGi+sYCCR3NSzkiTOGSmP+PKpTFKX3LWhmMqarQSBSnvKUGs9iQ=="
    }
  }
#+end_example
#+end_details

*** The end goal

Our goal is to parse the activity stream, and render each toot to our
website.  For Hugo, we want to render somewhere in the ~content~
directory.

Hugo content begins with [[https://gohugo.io/content-management/front-matter/][front matter]].  Our target looks like:
- the ~date~
- the ~canonical~ URI of the original toot
- an array of ~tags~

#+begin_details
#+begin_summary
  Example Hugo content for a toot
#+end_summary

#+begin_example markdown
  +++
  date = 2017-04-02T03:08:25Z
  canonical = "https://mastodon.social/users/rossabaker/statuses/1426597"
  tags = [  ]
  +++

  <p>brb, importing all my Google+ circles</p>
#+end_example
#+end_details

We also don't want all our toots.  We will omit:
- boosts (which are someone else's content)
- replies (which lack context)

*** Extraction script

We'll use [[https://scala-cli.virtuslab.org/][scala-cli]] to write a Scala script.  Scala isn't a
traditional scripting language, but I have more silos to export, and
all the types will come in handy if this grows into more than a
one-off.

If you have scala-cli and don't need a play-by-play, skip ahead to [[*Run it yourself][run
it yourself]].

**** Dependencies

This script uses [[https://fs2.io/#/][fs2]] and [[https://circe.github.io/circe/][circe]].  These lines fetch those dependencies:

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  //> using lib "co.fs2::fs2-io:3.7.0"
  //> using lib "io.circe::circe-parser:0.14.5"
#+end_src

**** Imports

The imports are boring, but we'll need them.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  import cats._
  import cats.effect._
  import cats.effect.std.Console
  import cats.effect.unsafe.implicits.global
  import cats.implicits._
  import fs2.{Pipe, Stream}
  import fs2.io.file.{Files, Path}
  import fs2.text
  import io.circe._
  import io.circe.Decoder.Result
  import io.circe.parser._
#+end_src

**** Configuration

=input= is the path to the Activity Stream, and =output= is the
directory to which we'll write the Hugo content.  These ought to be
command line arguments, but this will do.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  val input = Path("./outbox.json")
  val output = Path("./src/hugo/content/notes/toots")
#+end_src

We also need to supply our identity for filtering.  No trailing slash!

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  val me = "https://mastodon.social/users/rossabaker"
#+end_src

**** Parsing

***** Streaming the toot JSON

This function parses =input= and returns a stream of Circe JSON
objects, one per toot.

Note that the parser itself is not streaming.  A large activity stream
will be buffered into memory.  It would be better to use [[https://github.com/typelevel/jawn-fs2][jawn-fs2]]
here, but that only streams top-level JSON arrays, and we have to dive
into ~ordered-items~.  Bummer.  By returning a stream now, we're well
poised to use a streaming parser later.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def parseToots[F[_]: ApplicativeThrow: Files]: Stream[F, Json] =
    Files[F]
      .readAll(input)
      .through(text.utf8.decode)
      .foldMonoid
      .map(parse)
      .rethrow
      .map(_.hcursor.get[Vector[Json]]("orderedItems"))
      .rethrow
      .flatMap(Stream.emits)
#+end_src

***** Filters

Instead of simple predicates, our filters return an `F[Boolean]`
to provide an error channel in case of JSON parsing failure.  If we
made a bad assumption, we want the export to fail so we can adjust
the script.

****** Separating toots from boosts

Our toots have a ~type~ of ~"Create"~.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def created[F[_]: ApplicativeThrow](json: Json): F[Boolean] =
    json.hcursor
      .get[String]("type")
      .map(_ === "Create")
      .liftTo[F]
#+end_src

****** Filter out replies

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def topLevel[F[_]: ApplicativeThrow](json: Json): F[Boolean] =
    json.hcursor
      .downField("object")
      .get[Json]("inReplyTo")
      .map(_.isNull)
      .liftTo[F]
#+end_src

****** Only me

A few toots are "top-level", but are replies to a protected user.  We
can filter these out by filtering tweets that our followers are
~cc~'ed on.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def ccsMyFollowers[F[_]: ApplicativeThrow](json: Json): F[Boolean] =
    json.hcursor
      .downField("object")
      .get[Set[String]]("cc")
      .map(_.contains(s"${me}/followers"))
      .liftTo[F]
#+end_src

**** ID extractor

We want the numeric ID of the toot, which only appears as part of a
URI.  We need to parse the JSON, and then get the last segment.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def getId[F[_]: ApplicativeThrow](json: Json): F[Long] =
    json.hcursor
      .downField("object")
      .get[String]("id")
      .map(_.split("/").last.toLong)
      .liftTo[F]
#+end_src

**** Tag extractor

Good Fediverse practice is to [[https://indieweb.social/web/@Tam5@mastodon.social/109305286914653844][render hashtags in CamelCase]], but our
Hugo tags are lower-kebab-case.  Some of our toots are older than this
wisdom.  This function massages some toot tags to fit our site's tags,
and kebab-cases the rest.

In the long run, this mapping should be parameterized.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def getHashtags(json: Json): Decoder.Result[Vector[String]] =
    json.hcursor
      .downField("object")
      .get[Vector[Map[String, Json]]]("tag")
      .map(_.collect {
        case m if m.get("type") === Some(Json.fromString("Hashtag")) =>
          "\"" + (m("name").as[String].getOrElse("") match {
            case "#AllSaintsSunday" => "all-saints-sunday"
            case "#GoIU" => "hoosiers"
            case "#GoingViral" => "going-viral"
            case "#ScalaCLI" => "scala-cli"
            case "#contentwarning" => "content-warning"
            case "#cw" => "content-warning"
            case "#indiewebsocial" => "indieweb-social"
            case "#italianbeef" => "italian-beef"
            case "#opentelemetry" => "open-telemetry"
            case "#orgmode" => "org-mode"
            case "#ownyourdata" => "own-your-data"
            case "#thedecision" => "the-decision"
            case "#trickortreat" => "trick-or-treat"
            case "#tuxedocat" => "tuxedo-cat"
            case "#underconstruction" => "under-construction"
            case other =>
              other.split("[\\W_]+")
                .filter(_.nonEmpty)
                .map(_.toLowerCase(java.util.Locale.ROOT))
              .mkString("-")
          }) + "\""
      })
#+end_src

**** Render the toot to Hugo content

This function converts the JSON to Hugo content.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def renderToot[F[_]: ApplicativeThrow](json: Json): F[String] =
    (json.hcursor.downField("object").get[String]("published"),
     json.hcursor.downField("object").get[String]("id"),
     json.hcursor.downField("object").get[String]("content"),
     getHashtags(json)
    ).mapN(
      (published, id, content, hashtags) =>
         List(
           "+++",
           s"date = ${published}",
           s"""canonical = "${id}"""",
           s"""tags = [ ${hashtags.mkString(", ")} ]""",
           "+++",
           "",
           content,
           ""
         ).mkString("\n")
    )
    .liftTo[F]
#+end_src

**** Render the Hugo content string to disk

Writing the file is a simple streaming operation.  The stream returns
=Unit=, because it's run for its side effect.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def handleToot[F[_]: MonadThrow: Files](json: Json): Stream[F, Unit] =
    for {
      id <- Stream.eval(getId(json))
      _ <- Stream.eval(renderToot(json))
        .through(text.utf8.encode)
        .through(Files[F].writeAll(output / s"${id}.md"))
    } yield ()
#+end_src

**** Putting it all together

Our program makes the output directory, parses the toots, filters the
content, and writes them to disk.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  def program[F[_]: Sync: Files]: F[Unit] =
    Files[F].createDirectories(output) >>
    parseToots
      .evalFilter(created[F])
      .evalFilter(topLevel[F])
      .evalFilter(ccsMyFollowers[F])
      .flatMap(handleToot[F])
      .compile
      .drain
#+end_src

**** Main method

This is a functional program.  Nothing has run yet!  Every result is
in a parameterized =F=.  We'll use the traditional =IO=.

Scala CLI has a [[https://typelevel.org/cats-effect/docs/faq#scala-cli][known limitation]] with =unsafeRunSync()=, so the whole
file needs to have a ~*.scala~ suffix and an =IOApp=.

#+begin_src scala :tangle ../../gen/scala/toot-archive.scala
  object Main extends IOApp.Simple {
    def run: IO[Unit] = program[IO]
  }
#+end_src

*** Run it yourself

The entire script is [[https://github.com/rossabaker/cromulent/blob/main/gen/scala/toot-archive.scala][on GitHub]].  You can run it directly, but you'll
want to download it as ~toot-archive.scala~ and and customize at least
the =me= variable.  Get ~outbox.json~ in the same directory, and run:

#+begin_src sh
  scala-cli run toot-archive.scala
#+end_src

Your toots should be in ~./src/hugo/content/notes/toots~.

A nice Hugo layout is a post for another day, but the end result can
be seen in [[/notes][~/notes~]].

*** Next steps

1. Add command line parsing
2. Package it as a Nix package, so users don't need ~scala-cli~.
3. Create similar for Twitter and Facebook.
4. Drop toots that link back to own domain
5. Trim trailing hashtags

** DONE WebFinger                 :@tech:webfinger:mastodon:netlify:redirect:
CLOSED: [2022-11-22 Tue 00:14 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: webfinger
:EXPORT_DATE: [2022-11-22 Tue 00:15 EST]
:EXPORT_HUGO_LASTMOD: [2022-12-01 Thu 20:50 EST]
:END:

#+begin_description
  Set up a WebFinger resource to alias your Mastodon account on
  another server to your own domain.
#+end_description

#+begin_warning
  I was using [[https://indieweb.social/][indieweb.social]] for my Mastodon presence, but wanted
  like to be discoverable on my domain.  I'm now self-hosting, but
  leaving these instructions for others.
#+end_warning

#+begin_warning
Not to be confused with [[*Finger][Finger]].
#+end_warning

*** How it works on your Mastodon server

[[https://docs.joinmastodon.org/spec/webfinger/][Mastodon uses WebFinger]] to look up the inbox and outbox from a
username.  My ~@rossabaker@indieweb.social~ profile can be looked up
with a simple GET call to ~indieweb.social~.

#+begin_details
#+begin_summary
~GET https://indieweb.social/.well-known/webfinger?resource=acct%3Arossabaker%40indieweb.social~
#+end_summary

#+begin_example json
{
  "subject": "acct:rossabaker@indieweb.social",
  "aliases": [
    "https://indieweb.social/@rossabaker",
    "https://indieweb.social/users/rossabaker"
  ],
  "links": [
    {
      "rel": "http://webfinger.net/rel/profile-page",
      "type": "text/html",
      "href": "https://indieweb.social/@rossabaker"
    },
    {
      "rel": "self",
      "type": "application/activity+json",
      "href": "https://indieweb.social/users/rossabaker"
    },
    {
      "rel": "http://ostatus.org/schema/1.0/subscribe",
      "template": "https://indieweb.social/authorize_interaction?uri={uri}"
    }
  ]
}
#+end_example
#+end_details

*** Static solution

We could copy the above JSON response and serve it on our own static
server at the ~/.well-known/webfinger~ path.  It works!
Unfortunately, a static server ignores the query string (i.e.,
~resource=acct:ross@rossabaker.com~).  This becomes effectively a
wildcard address: /any/ username ~@rossabaker.com~ would point to my
indieweb.social account.  This is mostly harmless and works with any
static site generator, but we can do better.

*** Netlify redirect

The resource can also be referenced via HTTP redirect.  Our site
deploys to Netlify, which has [[https://docs.netlify.com/routing/redirects/][redirect support]], including matching
query strings!  A one-liner served up at ~/_redirects~ is sufficient:

#+begin_src text :code-license CC0-1.0
  /.well-known/webfinger resource=acct:ross@rossabaker.com https://indieweb.social/.well-known/webfinger?resource=acct%3Arossabaker%40indieweb.social 301
#+end_src

#+begin_aside
We're not being very good [[https://www.rfc-editor.org/rfc/rfc7033.html][RFC7033]] citizens yet.  Specifically, we are
called to return an HTTP 400 when the ~resource~ parameter is missing.

#+begin_quote
  If the "resource" parameter is absent or malformed, the WebFinger
  resource MUST indicate that the request is bad as per
  Section 10.4.1 of RFC 2616 [2].

  #+begin_cite
  https://www.rfc-editor.org/rfc/rfc7033.html#section-4.2
  #+end_cite
#+end_quote

But that's a problem for another day.
#+end_aside

*** Self-hosting                                                   :noexport:

#+begin_src text :tangle ../../tmp/hugo/static/_redirects
  /.well-known/webfinger* https://social.rossabaker.com/.well-known/webfinger:splat 301
#+end_src

** DONE Finger                                             :finger:nostalgia:
CLOSED: [2023-07-16 Sun 22:51 EDT]
:PROPERTIES:
:EXPORT_TITLE: Finger me
:EXPORT_FILE_NAME: finger
:header-args+: :code-license CC0-1.0
:END:

#+begin_description
A bit of nostalgia about ~finger~, and how to finger me.
#+end_description

Long ago, I stumbled across [[https://www.hilgraeve.com/hyperterminal/][HyperTerminal]] on the family Windows 95
machine.  I figured out how to dial into my mom-and-pop ISP with that,
and had my first shell access on a multi-user machine.  Magical.  A
friendly admin taught me a lot, including how to make a ~.plan~ on one
of the great social networks of the day, [[https://datatracker.ietf.org/doc/html/rfc1288][Finger]].

I can be fingered once again on [[https://happynetbox.com/][Happy Net Box]].  Run this from your own
shell:

#+begin_src sh :eval no-export :results verbatim
  finger rossabaker@happynetbox.com
#+end_src

** DONE Playlists section                                          :playlist:
CLOSED: [2023-08-10 Thu 13:04 EDT]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: playlists
:END:

*** DONE Playlists
CLOSED: [2023-08-10 Thu 13:16 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

#+begin_description
  A nascent collection of playlists.
#+end_description

*** DONE Big Ten Fight Songs    :@sports:big_ten:spotify:fight_songs:midwest:
CLOSED: [2023-08-10 Thu 13:11 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: big-ten-fight-songs
:END:

#+begin_description
A Spotify playlist with the songs of each of the eighteen Big Ten schools.
#+end_description

I am a lifelong Midwesterner.  Fight songs are a big deal in the Big
Ten.  I played the "Minnesota Rouser" in my high school band in
Illinois.  "Indiana Our Indiana" is objectively the best, as measured
by the fact I have two degrees from there and zero degrees from
anywhere else.

The conference isn't as Midwestern as it used to be, but it's nice to
have the +9+ +10+ +11+ +13+ 17 other songs gathered to sing along with
whenever someone scores on Purdue.

[[https://open.spotify.com/playlist/3dA65422KTllJjTFLBdaII?si=77bb31ac91274603][Big Ten Fight Songs on Spotify]]

* Talks section
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: talks
:END:

** Talks
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
** IndyScala                                          :@tech:scala:indyscala:
*** Akka IO and Netty                                            :akka:netty:
:PROPERTIES:
:EXPORT_FILE_NAME: akka-io-and-netty
:EXPORT_DATE: <2013-11-04 Mon>
:EXPORT_PUBLISH_DATE: [2022-08-29 Mon 13:20 EDT]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/) at [E-gineering](https://e-gineering.com), November 2013"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala/akka-io-demo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides /pdf/akka-io-and-netty.pdf
:END:
*** Algebras in Scala                                               :algebra:
:PROPERTIES:
:EXPORT_FILE_NAME: algebras-in-scala
:EXPORT_DATE: <2019-12-02 Mon>
:EXPORT_PUBLISH_DATE: [2022-08-30 Tue 14:51 EDT]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/) at [E-gineering](https://e-gineering.com), December 2019"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala/algebras
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides https://indyscala.org/algebras
:END:

Scala developers like to talk about "algebras".  Or when they're
feeling particularly precious, "algebrae."  Ross gives an overview,
and promises any references to "F-algebra" are not a taunt about your
ninth grade report card.
*** Anorm                                                         :anorm:sql:
:PROPERTIES:
:EXPORT_FILE_NAME: anorm
:EXPORT_DATE: <2012-08-13 Mon>
:EXPORT_PUBLISH_DATE: [2022-08-30 Tue 21:56 EDT]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/), August 2012"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala-anorm/
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides pdf/anorm.pdf
:END:

** Podcasts section                                                 :podcast:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: podcasts
:END:
*** Podcasts
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
*** CoRecursive Episode #017 :@tech:corecursive:scala:http4s:functional_programming:remote_work:
:PROPERTIES:
:EXPORT_FILE_NAME: corecursive-17
:EXPORT_DATE: <2018-07-27 Fri>
:EXPORT_HUGO_PUBLISHDATE: [2022-08-29 Mon 00:10 EDT]
:END:

I was interviewed by Adam Gordon Bell on the [[https://corecursive.com/017-http4s-with-ross-baker/][CoRecursive podcast]].
#+hugo:more

#+begin_quote
The promise of functional programming is code that is easier to reason
about, test and maintain. Referential transparency means there is no
extra context to worry about, we can just focus on inputs and
outputs. Examples of functional programming in the small are
plentiful. Fibonacci is easy to write as a function but what about fp
in the large?

Http4s is a web framework written in scala that takes a pure
functional approach to building http services. Ross Baker is a
contributor to http4s and he explains the benefits of this
approach. We also touch on the benefits of working remotely, since he
and I have both been doing it for some time.
#+end_quote

*** The Scala Logs                   :@tech:http4s:haskell:hockey:scala_logs:
:PROPERTIES:
:EXPORT_FILE_NAME: scala-logs
:EXPORT_DATE: <2020-02-08 Sat>
:EXPORT_HUGO_PUBLISHDATE: [2022-08-29 Mon 00:09 EDT]
:END:

It was my honor to join Zach McCoy on the [[https://open.spotify.com/episode/57RHzk5M7gJjLnV5nfehJo][first full episode of The
Scala Logs]], where we talked http4s, Haskell, and hockey.

* Blog section
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: blog
:END:
** Blog
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
** TODO The AOL of the 2020s :@tech:community:gitter:discord:slack:open_web:aol:
:PROPERTIES:
:EXPORT_FILE_NAME: the-aol-of-the-2020s
:END:

#+begin_aside
This is an edited version of a draft that circulated in February, 2022.
#+end_aside

*** Maybe it's good that I started behind a wall

My online life began in 1995, in AOL's walled garden of chat.  It was
mostly a wasteland of "[[https://en.wikipedia.org/wiki/Age/sex/location][a/s/l]]", but there was ample opportunity for
serious discussion.  I could practice German, with native speakers,
from Middle America!
#+hugo:more
I was not yet a serious person.  With a naughty phrasebook and
sophomoric wit, my friend and I carefully transcribed, "/Hat dir Jemand ins
Gehirn geschissen und vergessen umzurühren?/"[fn:7].  We were abruptly
disconnected and banned.

*** First frolics on the open web

I dusted myself off and ventured onto the public internet.  It was
marvelous.  I learned about the web setting up [[http://www.scriptarchive.com/wwwboard.html][Matt's Script Archive]]
and talking to others on their boards.  We made [[https://en.wikipedia.org/wiki/Webring][web rings]] and
organized ourselves through web directories like [[https://en.wikipedia.org/wiki/DMOZ][dmoz]].  A succession
of search engines began indexing the Web for us, while other services
like [[http://www.searchengineshowdown.com/usenet/deja/][DejaNews]] crawled [[https://en.wikipedia.org/wiki/Usenet][Usenet]].  The golden eras of mailing lists and
blogs came and went, each contributing to the digital commons.

*** The rise and fall of Gitter

In the mid-2010s, [[https://gitter.im/][Gitter]] chat became an important hub for developers.
To this day, its archives serve as a primary source.  Most original
[[https://github.com/typelevel/cats][Cats]] authors have moved on, but we can [[https://gitter.im/typelevel/cats/archives/2015/01/29][observe its Big Bang]].  There
are years of insights there, referenced from the issue trackers and
indexed by Google.  These archives are admittedly precarious — none of
us pay for their upkeep — but it was an open product for an Open Web.

The Gitter UX grew derelict, and many OSS projects withdrew to gated
communities like Discord and Slack.  These apps are fine for
fellowship, but come at an unbearable cost to the project's history
and discoverability.  Questions recur, but the search engines no
longer reference the answers.  Prospective members who have the right
keywords fail to connect with their kindred spirits.  These closed
platforms are the AOL of the 2020s, and are anathema to Open Source.

*** Recommitment to the open web

I have many niche interests, and I'm not attempting to maximize my
following.  I want my efforts to reverberate.

- My current role involves a lot of teaching.  We use Slack,
  which is fair game in private enterprise, but I will expound
  what I can on this [[*Blog][nascent blog]].

- I am slowly republishing my old [[*Talks][talks]] here, with a couple new ones
  to share.

- I will continue to explore [[https://indieweb.social/@rossabaker][Mastodon]] for conversing on technical
  subjects.  You need a login to participate, but not to view.

- [[https://matrix.to/#/@ross:rossabaker.com][Matrix]] is the natural, open successor to Gitter.  I've drastically
  curtailed my chatting, but you might nerdsnipe me into a public room
  there.

# TODO absolute link, because bundle names can't be tag names

- I challenge you to contribute back to the open web.  [[/configs/website][My setup]] is
  arcane, but it's documented and I've recaptured some Joy of
  Computing in building it.  Find yours.

- /Ich werde nicht vergessen umzurühren.[fn:8]/

*** See also

- Alexandru Nedelcu touches on similar subjects in [[https://alexn.org/blog/2022/04/09/scala-gitter-discord-mistake/][Scala's Gitter to
  Discord migration mistake]].

** DONE Running up the score in Scrabble           :@personal:grandma:eulogy:
CLOSED: [2022-09-12 Mon 00:32 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: running-up-the-score-in-scrabble
:END:

#+begin_aside
  My grandmother recently passed away.  A lightly edited version of
  this was read at her memorial service.
#+end_aside

Grandma and I had a tradition of playing Scrabble.  We used her
vintage set.  It still had score pads with games featuring players
further up the family tree.  It was intimidating.  I feared I might
draw a "þ" or "æ", just like Chaucer used to play.  But it was indeed
the Modern English Alphabet Edition.  True to her meticulous nature,
it retained all its original pieces.
#+hugo:more
She won the first several matches.  One time, having sealed another
victory, she remained hunched over the rack, running up the score on
her own grandson.  "Really, Grandma?"  She explained that
it's not worth doing if it's not worth your best.  She also pointed
out I lost when I hung a vowel too close to the triple word score.

Her blood runs in my veins, which means I am also stubborn.  I vowed
to beat her.  I read a strategy book.  When we met again, no more long
words.  Trench warfare!  Both scores were low, but she was prepared.
She was always prepared.  She put me away with a "jo."

"It's a Scottish sweetheart," she said.

"Isn't that a foreign word?" I protested.

"She's been playing that one for years," my aunt sighed.  We didn't
have the official Scrabble Dictionary, but still bitter, I checked
[[https://scrabble.hasbro.com/en-us/tools#dictionary][hasbro.com's dictionary]] this week.  Grandma was right, you know.

She came to one of my softball games.  I didn't play well, but she
asked if I played my best.  She realized that I would not succeed Ryne
Sandberg as the Cubs' second baseman a couple years before I did.  It
was my best.

Another time, she asked me about a poor grade.  "To whom much is
given, much is expected," she said.  I didn't recognize the scriptural
reference[fn:9] at the time, but those words from her faith still hit
me like a truck.  It wasn't my best.  I had disappointed her.

She gave me more tips than I ever got from that Scrabble book.
Eventually, I beat her.  I never got the consistent upper hand in our
series, but she made me better, in so many ways.  She was a gifted
teacher and motivator, and her calling was to bring out the best in
all of us.

All games come to an end.  After 97 years, Grandma played her last
tile, and I can imagine her at the Pearly Gates to tally the final
score.  "I say, hand me the top of the box, would you?" she surely
told St. Peter.  "I want to look at the rules!"  She was such a
stickler for the rules.  But not to worry, Grandma: you /always/ did
your best.

** DONE Imperfectly Indieweb :@personal:indieweb:juvenilia:facebook:twitter:perfectionism:ageing:
CLOSED: [2022-11-01 Tue 23:17 EDT]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: imperfectly-indieweb
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_LASTMOD: [2022-11-02 Wed 00:00 EDT]
:END:

#+begin_description
How the collapse of Twitter and a trip to the Wayback Machine inspired me to go all in on the Indieweb.
#+end_description

#+begin_aside
Updated <2022-11-02 Wed>: some edits for concision
#+end_aside

The [[https://en.wikipedia.org/wiki/Acquisition_of_Twitter_by_Elon_Musk][asteroid hurtling toward Twitter last week]] forced many of us to
look back on our digital lives.  I reflected on my mistakes with
perfectionism and proprietorship, and am looking to Indieweb for
solutions.
*** Portrait of 1990s geekery

#+attr_html: :alt A partially exposed dinosaur fossil :class blog-image
#+caption: [[https://www.flickr.com/photos/nh53/48240721726/in/photolist-2guSiTu-6LsL5L-2k4wB2k-2kcQJkE-2kcLVom-a6svVS-2kcRaCQ-a6q81g-TSWgq4-a6pU5B-7uRNYN-Kb9qkv-TSWgR4-a6pJFD-TSWgMr-a6q8VD-4Lo9uM-a6pFEc-a6sSfC-TSWgCP-7VojVq-ffkmNN-a6sNAj-a6pGnz-a6pQpD-a6pwBi-a6pybc-SN3MTY-U1VuuE-TSWgUR-a6pZgv-SH3igV-a6q3sx-a6sWjq-a6spgJ-SQN6kA-a6p7Ux-a6sbff-a6shtU-REqDbZ-a6s9iN-a6pbgz-a6sQ7W-a6seeh-a6pivn-2kcQLgt-a6peYF-a6pNVe-2k6mwCq-a6pkaT][Dinosaur fossil]] by [[https://www.flickr.com/photos/nh53/][Nigel Holt]], licensed under [[https://creativecommons.org/licenses/by/2.0/][CC BY 2.0]]
[[file:img/dinosaur_fossil.jpg]]

The Wayback Machine has preserved my [[https://web.archive.org/web/19981203135416/http://user.mc.net/%7Eotis/][juvenilia]].  The soft tissue is
gone, but here is the skeleton of a twentieth-century personal web
page, the author not yet twenty.  There was a Perl CGI script to show
football schedules.  Navigation was a Java applet, for crude
animations that JavaScript could not yet render.  There was a boast
about my girlfriend[fn:10].  Ugh, the justified margins!

Unfortunately, it was all hosted at the internet service provider in
the back of the video cassette rental store.  It's incredible we found
any remains of Teenage Ross.

*** A gap in the fossil record

As the 21st Century dawned, the Web and I each got serious.  It was
time to put the applets away and drop the handle "Spanky"[fn:11].  I
had swirling thoughts about:
- aspect-oriented programming
- pairwise comparison algorithms to rank intercollegiate athletic teams
- the inadequacy of ID3 tags for organizing a large MP3 collection
- the urgency of proportional representation
- and so much more

I was also reading too many blogs about blogging, and concluded that
none of these thoughts where polished enough to contribute to my
Personal Brand™.  I didn't develop a brand at all.  Vicenarian Ross
was lost to perfectionism.

*** Social media silos

In 2008, I was cajoled into joining Facebook, and I resumed expressing
myself in its [[https://www.spudart.org/blog/new-art-monday-pieces-flair/][Pieces of Flair]] app.  I'd show you my board, but it's
not mine to share.  It's gone forever, unless Mark Zuckerberg elects
to hang it on the walls of his Metaverse.

A few months later, I joined Twitter.  I tweeted about 9,500 times,
and you can read them all there today.  Will we be able to read them
in 25 years?  Doubtful.  I downloaded my archive before I left, and I
might rerecord the greatest hits, but the original masters belong to
the label.

Facebook and Twitter got me creating again, worry free, in chunks of
10 kilopixels or 280 words.  But if these tech giants seem mighty, so
did the video rental business with the 56kbps dial-up.  Tricenarian
Ross is buried in the rubble.

*** Under Construction

#+attr_html: :class blog-image :alt Pixelated construction sign of a stick figure shoveling on a bezeled gray background, in the style of a late 1990s \"Under Construction\" GIF. :style "height: 100%; width: 100%;"
#+caption: Under construction
[[file:under-construction.gif]]

I'm embracing imperfection and reconstructing myself on the [[https://indieweb.org/][Indieweb]].
I've been in fiddling with the [[/configs/website][site tooling]] for weeks before
announcing a grand opening, but that's a stall tactic: there is no
perfect.  Platforms like Medium and Substack remove the distractions,
but preserve nothing.

So, I am finally [[*Blog][blogging]] here, in my own domain.  I'm assembling an
archive of old [[*Talks][talks]].  I'll have more literate [[/configs/][configurations]] to
share.  I'm thinking about how integrate the old tweets and the new
toots[fn:12].

I cringed while revisiting my old self, but I quickly appreciated the
ways I've grown.  If I get it right, this project will preserve
Quadragenarian Ross as an embarrassment for decades to come.[fn:13]

#+begin_src css :tangle ../../tmp/hugo/assets/css/cromulent.css :exports none
  figure.blog-image {
      float: right;
      max-width: 40%;
      margin: 0 1.5em;
  }

  .blog-image figcaption {
      font-size: smaller;
  }

  .footnotes {
      clear: both;
  }
#+end_src

** TODO Computers are fun again :@personal:indieweb:fediverse:twitter:community:scala:open_source:
:PROPERTIES:
:EXPORT_FILE_NAME: computers-are-fun-again
:END:

#+begin_description
Just a week of detox on the Fediverse brought back all the excitement
of being new on the Internet.
#+end_description

I [[https://twitter.com/rossabaker/status/1585794629529501698][suspended my Twitter]] a week ago today, barely beating rush hour as
~#twexit~ traffic clogged the Information Superhighway.  Today I
exuberated, "[[https://indieweb.social/@rossabaker/109280455333589492][Computers are fun again!]]"

*** Open Source is more than code

For a decade, my online identity has been Scala.  A full community
pathology is best left to another post, but ever since its good parts
[[https://typelevel.org/blog/2021/05/05/discord-migration.html][retreated to Fort Discord]], I have felt adrift.  Open Source is focused
on the license of the code, but it's not (yet) something materialized
from a GPT-3 model.  It springs forth from human collaboration.  That
human history is a complementary and equally valuable artifact, and
deserves more care.

I still enjoy the language.  There are still good people in it.  I
teach it at work to wonderful mentees and still contribute to its
libraries.  But something is missing.

*** A serendipitous blog

Twitter became my primary connection to the tech community.  I wrapped
myself in a mute bubble, but maintaining its community accounts was
corrosive.  Alexandru Nedelcu's [[https://alexn.org/blog/2022/04/01/blogging/][return to blogging]] was fresh as
Twitter destabilized, the right words at the right time.  I decided
then I would follow his lead, even though I'm now months behind.

As I prepared, I discovered the concept of the Indieweb.  Yes!
Gitter, the former chat home of Scala, was public, but it was never
ours.  My Twitter was never mine.  But these people get it.

#+begin_quote
When you post something on the web, it should belong to you, not a
corporation.

#+begin_cite
[[https://indieweb.org/]]
#+end_cite
#+end_quote

*** Choosing an instance

I had been off and on Mastodon since April 2017[fn:14], but never with
this seriousness.  It was time for a move from "the default instance."

The obvious choice is [[https://fosstodon.org/about/more][Fosstodon]], where I have many friends and subject
matter expertise.  Its [[https://hub.fosstodon.org/why-fosstodon-is-english-only/][English-only policy]], while understandable, gave
me pause.  Un dia me gustaria in meiner zweiten und dritten Sprache
tuten.[fn:15] I'm glad it's there, but it's not right for me.

Then I found [[https://indieweb.social/web/home][indieweb.social]].  It's a little less aligned with my
established interests, but it has the nutrients that Scala currently
lacks.  The Indieweb supports the human side of Open Source.  I am
already enriched by the community I've discovered here.  There's even
one intrepid soul trying out my blogging apparatus.

*** What's next

There's a certain irony in putting content on an domain containing
~indieweb~, whose plug could be pulled at any moment.  I'm thinking
about the best way to integrate microblogging into this static site
generator.

I'm also [[https://www.patreon.com/indiewebsocial/about][supporting my friendly admin]].  Wherever you land in the
Fediverse, please consider supporting yours.
** DONE Ox. Hugo. Why not both?                 :@tech:ox_hugo:org_mode:hugo:
CLOSED: [2022-11-22 Tue 15:53 EST]
:PROPERTIES:
:EXPORT_FILE_NAME: ox-hugo-why-not-both
:END:

#+begin_description
  Why I started ripping out [[https://ox-hugo.scripter.co/][ox-hugo]], and why I came back.
#+end_description

This site is built on a static site generator (SSG).  They are a dime
a dozen.  I chose a less mainstream one, [[https://ox-hugo.scripter.co/][ox-hugo]].  After recently
questioning that choice, I have new clarity on why it's right for me.

*** The goal

I want to write and sometimes generate content in a markup language.
The SSG generator should apply a template, create aggregate views
(such as [[/tags][tags]]), and output a directory that can be served off a cloud
CDN, self-hosted with open source like [[https://nginx.org/en/][nginx]], or even out of a local
directory with a [[https://crates.io/crates/simple-http-server][simple Rust binary]].

*** Markup

The first choice is which markup language we use.

**** HTML

Of course, HTML is our target, and the ML even stands for Markup
Language.  But we don't generally want to write HTML directly.

- It's verbose.
- It's subjectively ugly in source form.
- It's not the right level of abstraction for templating.  We can wrap
  a document with ~<main>~, but it still needs metadata for the
  ~<head>~ and aggregate views.  There's [[https://www.w3.org/TR/xslt-30/][XSLT]], which makes hard things
  possible, but easy things hard.

**** Markdown

[[https://daringfireball.net/projects/markdown/][Markdown]] addresses most of these concerns.  It's relatively concise.
It imposes minimal syntax on plain text content.  There are umpteen
generators to export it into HTML.  Its minimalism makes it easy to
generate or collaboratively produce, and its prominence on GitHub
means most engineers in particular can communicate in it.

Why not Markdown?  The umpteen generators mean there are multiple
dialects like [[https://commonmark.org/][CommonMark]] and [[https://github.github.com/gfm/][GitHub Flavored Markdown]] and variable
support for extension for simple needs like tables and definition
lists.

But, eh, it's mostly fine.

**** Org-Mode

[[https://orgmode.org/][Org-Mode]] is a package built into [[https://www.gnu.org/software/emacs/][Emacs]], my editor of choice.  It
defines an [[https://orgmode.org/worg/dev/org-syntax.html][Org syntax]], which is yet another markdown language[fn:16].
The killer feature is [[https://orgmode.org/manual/Working-with-Source-Code.html][Org-Babel]], where we can embed, export, and
execute code snippets in multiple languages, interspersed with prose
in the practice of [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].  For example, [[../../configs/web-key-directory/][Web Key
Directory]] page is not only a tutorial on WKD, but is an executable
document that generates my WKD entry.

It's not /just/ an Emacs tool.  There are [[https://orgmode.org/worg/org-tools/index.html#orgdf545ac][parsers]] for multiple
languages.  But if you propose Org on a team, some Emacs users and
/all/ Emacs infidels will look at you strange.

**** Decision

I chose Markdown when I'm maintaining the [[https://northsidesoccer.com/][youth soccer league's site]]
with simple needs.  Here, where I'm a sole engineer talking tech, I
choose Org.

*** Generator

**** ox-html

Having settled on Org, a natural choice is [[https://orgmode.org/manual/HTML-Export.html][ox-html]], Org's built in
HTML exporter.  It offers a plain experience out of the box, but there
are enough hooks to fully customize the output.  I tried simplifying
to it earlier this week, but there are so many yaks to shave:

- Exported headers get non-deterministic anchors
- No taxonomies out of the box
- No CSS asset pipeline out the box
- No Google sitemap out of the box
- No RSS feeds out of the box

I could solve all those, and it would be fun.  However, there are a
lot of unsolved problems in the world, and these have been solved many
times over.

Even if I made a bespoke ox-html config, it's not fast and it's
single-threaded.  It's plenty adequate for this modest blog and my few
configs, but I'm starting to think about handling [[https://www.w3.org/TR/webmention/][webmentions]],
republishing my Twitter archives, and syndicating content from social
media like Mastodon.  Tens of documents could be come a thousand
quickly.

**** Hugo

[[https://gohugo.io][Hugo]] is a prominent static site generator, written in Go.  I don't
love writing Go, but I appreciate consuming the single static binaries
Go produces.  This puts it ahead of predecessors like [[https://jekyllrb.com/][Jekyll]] and its
Gemfile locks.

Hugo is a mature solution that provides all the features and speed I
miss in ox-html.  It also supports [[https://gohugo.io/content-management/formats/#list-of-content-formats][Org and Markdown]] content.  The
markup is typically prepended with [[https://gohugo.io/content-management/front-matter/][front matter]] to provide metadata
like titles, dates, and tags.

What's wrong?  The Org support is based on [[https://github.com/niklasfasching/go-org][go-org]], which targets a
"reasonable subset of Org mode" and "likes to follow the 80/20 rule".
That's great, but Babel support falls into the 20%.  I still need
Emacs.

**** ox-hugo

Hugo makes a compelling /compilation target/.  What if I could write
my configs in Org-Babel and export with the full power of Emacs, but
also generate and integrate Markdown files for projects like the [[*Archive your toots to Hugo][toot
archive]], and rebuild it all quickly?

This is exactly what ox-hugo does.  The "ox" in ox-hugo and ox-html
refers to [[https://orgmode.org/manual/Exporting.html][Org eXport]].  ox-hugo is just another ox backend, but exports
to markdown with front matter.  Then Hugo, agnostic to Emacs, converts
that into the HTML you're consuming now.

This tool increases the learning curve.  One needs at least a basic
understanding of Org, Emacs, and Hugo.  It sometimes introduces
overlapping ways to do things, like [[https://ox-hugo.scripter.co/doc/shortcodes/][Org special blocks vs. Hugo
shortcodes]].  But I have the power where I need it, and a commodity
platform where a commodity suffices.

I wouldn't want to impose this on the volunteer parent who eventually
takes my spot on the youth soccer board.  But for a personal website
of an Emacs nerd, I highly recommend checking out ox-hugo!

*** TODO                                                           :noexport:

- [ ] Relative link for WKD

** DONE Build your vocabulary with Scala affixes                :@tech:scala:
CLOSED: [2023-04-26 Wed 09:28 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: scala-affixes
:EXPORT_HUGO_LASTMOD: [2023-04-26 Wed 11:33 EDT]
:header-args:scala+: :code-license CC0-1.0
:END:

#+begin_description
  A study of prefixes and suffixes in Scala can help build our
  function vocabulary, just as surely as studying them in a natural
  language.
#+end_description

A powerful way to build one's vocabulary is to study prefixes and
suffixes.  In elementary school, we learn that bi- means two.  We can
see it in common words like bicycle and bilingual.  As we progress
through school into binomials and bivalence, we're ready.  It's not
perfect: is biennial twice a year or once every two years?  Biryani
isn't two helpings of ryani.  Still, they are surely worth studying.

A colleague in our Scala study group asked, "Can we do the same with
Scala?"  Yes!  Some, like "bi-", are familiar from English.  Others
like "semi-" and "sub-" are known in English but not obvious in Scala.
As a newcomer to FP, I was overwhelmed with the cryptic "-T" and "-M"
suffixes I saw everywhere.

This article is not a tutorial on the underlying concepts, but we'll
link to some references or motivating examples.  The hope is that this
is a reference for patterns you've seen but not understood, and
patterns you haven't even realized.  Furthermore, as you begin to
write your own combinators, consider whether these naming conventions
apply and help newcomers understand what you wrote!

*** Prefixes

**** ~bi-~

~bi-~ means two.  It usually generalizes one type parameter to two.
This is useful when you have an error channel, like ~Either~.

[[https://typelevel.org/cats/typeclasses/functor.html][~Functor~]] vs. [[https://typelevel.org/cats/typeclasses/bifunctor.html][~Bifunctor~]].

#+begin_src scala
  trait Functor[F[_]] {
    def map[A, B](fa: F[A])(f: A => B): F[B]
  }

  trait Bifunctor[F[_, _]] {
    def bimap[A, B, C, D](fab: F[A, B])(f: A => C, g: B => D): F[C, D]
  }
#+end_src

[[https://typelevel.org/cats/typeclasses/traverse.html][~Traverse~]] vs. ~Bitraverse~.

#+begin_src scala
  trait Traverse[F[_]] {
    def traverse[G[_]: Applicative, A, B](fa: F[A])(f: A => G[B]): G[F[B]]
  }

  trait Bitraverse[F[_, _]] {
    def bitraverse[G[_]: Applicative, A, B, C, D](fab: F[A, B])(f: A => G[C], g: B => G[D]): G[F[C, D]]
  }
#+end_src

Weirdly, [[https://typelevel.org/cats/typeclasses/bimonad.html][~Bimonad~]] doesn't introduce a second parameter, but rather
unifies a category and its dual.  [[*~co-~][More on duals]] in a bit.

#+begin_src scala
  trait Bimonad[F[_]] extends Monad[F] with Comonad[F]
#+end_src

**** ~co-~

~co-~ represents a [[https://eed3si9n.com/herding-cats/Duality.html][categorical dual]].  The naive way to think about
this is "flipping around the arrows".

~FlatMap~ and ~CoflatMap~.  ~CoflatMap~ is a lesser-known supertype of
[[https://typelevel.org/cats/typeclasses/comonad.html][~Comonad~]].  Rebecca Mark has a great talk on a [[https://www.47deg.com/presentations/2020/03/13/comonads-game-of-life/][game of life with
comonads]].

#+begin_src scala
  trait FlatMap[F[_]] {
    // F[F[A]] → F[A]
    def flatten[A](ffa: F[F[A]]): F[A]
  }

  trait CoflatMap[F[_]] {
    // F[F[A]] ← F[A]
    def coflatten[A](fa: F[A]): F[F[A]]
  }
#+end_src

There's also [[https://typelevel.org/cats/datatypes/kleisli.html][Kleisli]] and Cokleisli.  I don't have a good use case, but
Scalaz used to alias it to [[https://github.com/scalaz/scalaz/blob/v6.0.4/core/src/main/scala/scalaz/Cokleisli.scala#L20][~⋆~]]!

#+begin_src scala
  // A → F[B]
  final case class Kleisli[F[_], -A, B](run: A => F[B])
  // A ← F[B]
  final case class Cokleisli[F[_], B, A](run: F[B] => A)
  // equivalently
  final case class Cokleisli[F[_], A, B](run: F[A] => B)
#+end_src

What about ~Cofunctor~?  Well, ~Functor~ is self-dual.  When we flip
the arrows, we get a structurally equivalent type!

#+begin_src scala
  trait Functor[F[_]] {
    // F[A] → (A → B) → F[B]
    def map[A, B](fa: F[A])(f: A => B): F[B]
  }

  trait Cofunctor[F[_]] {
    // F[A] ← (A ← B) ← F[B]
    def comap[B, A](fb: F[B])(f: B => A): F[A]
    // equivalently
    def comap[A, B](fb: F[A])(f: A => B): F[B]
  }
#+end_src

**** ~contra-~

Covariant ~Functor~ maps outputs. [[https://typelevel.org/cats/typeclasses/contravariant.html][~Contravariant~ functors]] map inputs.
Do you see the difference between ~contramap~ and ~comap~?

#+begin_src scala
  trait Functor[F[_]] {
    def map[A, B](fa: F[A])(f: A => B): F[B]
  }

  trait Contravariant[F[_]] {
    def contramap[A, B](fa: F[A])(f: B => A): F[B]
  }
#+end_src

**** ~di-~

Whereas ~bimap~ maps both sides, ~dimap~ contramaps one side and maps
another.  -argument functions are a simple example of an [[https://typelevel.org/cats/typeclasses/arrow.html][Arrow]].

#+begin_src scala
  trait Arrow[F[_, _]] {
    def dimap[A, B, C, D](fab: F[A, B])(f: C => A)(g: B => D): F[C, D]
  }
#+end_src

**** ~flat-~

~flat-~ flattens things.

#+begin_src scala
  trait FlatMap[F[_]] {
    def     map[A, B](fa: F[A])(f: (A) =>   B ): F[B]
    def flatMap[A, B](fa: F[A])(f: (A) => F[B]): F[B]
    //      tap[A, B](fa: F[A])(f: (A) =>   B ): F[A]
    def flatTap[A, B](fa: F[A])(f: (A) => F[B]): F[A]
  }
#+end_src

Where is ~tap~ in Cats?  If we're discarding the result, and not
capturing an effect, we've left the world of FP.  But the standard
library [[https://www.scala-lang.org/api/2.13.10/scala/util/ChainingOps.html#tap\[U\](f:A=%3EU):A][defines a ~tap~]].

**** ~par-~

~par-~ is for parallel operations.  The standard library used to have
parallel collections, banished to [[https://github.com/scala/scala-parallel-collections][a module]] as of Scala 2.13.

#+begin_src scala
  trait ParIterable[+T]
  trait ParSeq[+T]
  trait ParMap[K, +V]
  trait ParSet[T]
#+end_src

In Cats, we can use the [[https://typelevel.org/cats/typeclasses/parallel.html][Parallel]] type class to "parallelize" some
operations.  For some monads, like ~IO~, this is refers to parallel
execution.  ~Parallel[Either]~ is about error accumulation, and
~Parallel[List]~ is about zipping.  Those cases say nothing about
threading, but delegate to some other ~Applicative~ instance to
escape the sequentiality [[https://typelevel.org/cats/datatypes/validated.html#of-flatmaps-and-eithers][demanded by the monad laws]].

#+begin_src scala
  trait Applicative[F[_]] {
    def productL[A, B](fa: F[A])(fb: F[B]): F[A]
  }

  trait Parallel[M[_]] {
    // Same, but uses the alternate Applicative instance associated with M
    def parProductL[A, B](ma: M[A])(mb: M[B]): M[A]
  }
#+end_src

There's [[https://www.javadoc.io/doc/org.typelevel/cats-docs_2.13/latest/cats/syntax/ParallelSyntax.html?search=parallel][a lot of parallel in Cats]].

**** ~semi-~

~semi-~ is used by various monad transformers for operations that
return a base monad instead of the transformed monad:

#+begin_src scala
  case class OptionT[F[_], A](value: F[Option[A]]) {
    def     flatMap[B](f: (A) => OptionT[F, B])(implicit F: Monad[F]): OptionT[F, B]
    def semiflatMap[B](f: (A) =>         F [B])(implicit F: Monad[F]): OptionT[F, B]
  }
#+end_src

**** ~sub-~

~sub-~ is used by various monad transformers for operations that
return the inner monad instead of the transformed monad:

#+begin_src scala
  case class OptionT[F[_], A](value: F[Option[A]]) {
    def    flatMap[B](f: (A) => OptionT[F, B])(implicit F: Monad[F]):   OptionT[F, B]
    def subflatMap[B](f: (A) => Option [   B])(implicit F: Functor[F]): OptionT[F, B]
  }
#+end_src

*** Suffixes

**** ~-A~

~-A~ is for [[https://typelevel.org/cats/typeclasses/applicative.html][Applicative]] operations.

#+begin_src scala
  trait Applicative[F[_]] {
    def replicateA[A](n: Int, fa: F[A]): F[List[A]]
    def unlessA[A](cond: Boolean)(f: => F[A]): F[Unit]
    def whenA[A](cond: Boolean)(f: => F[A]): F[Unit]
  }
#+end_src

Let us speak of [[https://www.javadoc.io/static/org.typelevel/cats-docs_2.13/2.9.0/cats/Applicative.html#ifA\[A\](fcond:F\[Boolean\])(ifTrue:F\[A\],ifFalse:F\[A\]):F\[A\]][~ifA~]] no more.

**** ~-F~

~-F~ is for [[https://typelevel.org/cats/typeclasses/functor.html][Functor]] operations.

#+begin_src scala
  trait Functor[F[_]] {
    def ifF[A](fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]
  }
#+end_src

It's also used to lift values into a more complicated type.  Sometimes
~Functor~ is all that's needed.  Sometimes more, sometimes less.  In
this case, it's better to think of ~F~ as for "effect".

#+begin_src scala
  object Kleisli {
    def liftF[F[_], A, B](x: F[B]): Kleisli[F, A, B]
  }
  object OptionT {
    def liftF[F[_], A](fa: F[A])(F: Functor[F]): OptionT[F, A]
  }
  object IorT {
    def liftF[F[_], A, B](fb: F[B])(F: Applicative[F]): IorT[F, A, B]
  }
  object ContT {
    def liftF[F[_], A, B](mb: M[B])(M: FlatMap[M]): ContT[M, A, B]
  }
#+end_src

Things called ~eval~ in Cats-Effect and FS2 look a lot like ~liftF~,
but that breaks our etymology.

#+begin_src scala
  object Resource {
    def eval[F[_], A](fa: F[A]): Resource[F, A]
  }

  object Stream {
    def eval[F[_], O](fo: F[O]): Stream[F, O]
  }
#+end_src

**** ~-K~

~-K~ is for "higher kinded" and is typically agnostic to "what's inside the box".

[[https://typelevel.org/cats/typeclasses/monoidk.html][~MonoidK~]] and [[https://typelevel.org/cats/typeclasses/monoid.html][~Monoid~]]:

#+begin_src scala
  trait Monoid[A] {
    def combine(x: A, y: A): A
  }
  trait MonoidK[F[_]] {
    def combineK[A](x: F[A], y: F[A]): F[A]
  }
#+end_src

~FunctionK~ and ~Function~:

#+begin_src scala
  trait Function1[-T1, +R] { // or =>
    def apply(v1: T1): R
  }
  trait FunctionK[F[_], G[_]] { // or ~>
    def apply[A](fa: F[A]): G[A]
  }
#+end_src

**** ~-L~, ~-R~

~-L~ and ~-R~ stand for "left" and "right".

#+begin_src scala
  trait Applicative[F[_]] {
    // Better known as `<*`
    def productL[A, B](fa: F[A])(fb: F[B]): F[A]
    // Better known as `*>`
    def productR[A, B](fa: F[A])(fb: F[B]): F[B]
  }
#+end_src

**** ~-M~

~-M~ is for monadic operations.

#+begin_src scala
  trait Monad[F[_]] {
    def ifM(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]
    def untilM[G[_], A](f: F[A])(cond: => F[Boolean])(implicit G: Alternative[G]): F[G[A]]
    def whileM[G[_], A](p: F[Boolean])(body: => F[A])(implicit G: Alternative[G]): F[G[A]]
  }
#+end_src

**** ~-T~

~-T~ is for monad transformers.

#+begin_src scala
  final case class EitherT[F[_], A, B](value: F[Either[A, B]])
  final case class IdT[F[_], A](value: F[A])
  final case class IorT[F[_], A, B](value: F[Ior[A, B]])
  final case class OptionT[F[_], A](value: F[Option[A]])
  final case class WriterT[F[_], L, V](run: F[(L, V)])
  // And a few aliases as well.
  type ReaderT[F[_], -A, B] = Kleisli[F, A, B]
  type StateT[F[_], S, A] = IndexedStateT[F, S, S, A]
  type StoreT[W[_], S, A] = RepresentableStoreT[W, [β$2$](S) => β$2$, S, A]
#+end_src

**** ~_-~

An underscore suffix is usually how we say "I care about the effect,
not the result inside."  Implementations can be optimized if they know
the caller is just going to ~void~ it out anyway.

#+begin_src scala
  trait Traverse[F[_]] {
    def traverse [G[_]: Applicative, A, B](fa: F[A])(f: A => G[B]): G[F[B]]
    def traverse_[G[_]: Applicative, A, B](fa: F[A])(f: A => G[B]): G[Unit]
  }
#+end_src

*** Did we forget any?

Surely this list isn't complete.  Did I overlook your favorite?
[[file:contact.org][Contact me]], and we'll make this a living post.

* Notes section
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: notes
:END:
** DONE Notes                    :@personal:indieweb:microblog:own_your_data:
CLOSED: [2022-11-07 Mon 09:53 EST]
:PROPERTIES:
:EXPORT_HUGO_TITLE: Notes
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_LASTMOD: [2023-07-03 Mon 00:50 EDT]
:END:

#+begin_description
  The notes section contains Ross's microblog, mostly archived from
  social media.
#+end_description

This is my microblog.  I archive new threads from various social
networks here.  Replies and boosts or retweets are out of scope.
Content is archived here in the Indieweb spirit of [[https://indieweb.org/own_your_data][owning your data]].

Includes:
- [[https://mastodon.social/web/@rossabaker][@rossabaker@mastodon.social]] account (April 2017 — November 2022)
- [[https://indieweb.social/web/@rossabaker][@rossabaker@indieweb.social]] account (November 2022)
- [[https://social.rossabaker.com/@ross][@ross@rossabaker.com]] account (November 2022 — present, periodically synchronized)

* Stashed

** Old home page copy
I came online a little after [[https://en.wikipedia.org/wiki/Eternal_September][The September That Never Ended]], but long
before [[https://en.wikipedia.org/wiki/Web_2.0][Web 2.0]].  I don't feel that old, but my internet age is in the
99th percentile[fn:17].  Analysts rate my curmudgeonhood even
higher.

I still love the ideals of the Open Web, but we are goaded by siloed
apps, follower counts, reaction emoji, and chum boxes.  Today, there
are so many more cool things to discuss, billions more to discuss them
with, and such dreadful mediums we've built to discuss them in.

This project hopes to bring the old wonder to the modern Web.  It
hosts an experiment in [[*Configurations][literate configuration]] and an [[*Blog][inchoate blog]].
Archives of my [[*Talks][talks]], [[/projects][projects]], and [[*Podcasts][podcasts]] are under
construction.  I suggest the [[/categories][categories]] (coarse) or [[/tags][tags]] (fine) to
zoom in on shared interests.

I hope you find something here to enjoy, and I hope it inspires you to
contribute to the open web, too.

* DONE Todo                                                 :indieweb:itches:
CLOSED: [2023-08-06 Sun 21:30 EDT]
:PROPERTIES:
:EXPORT_FILE_NAME: todo
:END:

#+begin_description
Documents the "itches" that I'd like to fix on the site.
#+end_description

On the IndieWeb, we are taught to focus on our own [[https://indieweb.org/itches][itches]].  In Org
Mode, we have [[https://orgmode.org/manual/TODO-Items.html][TODO items]].  They're two sides of the same coin, and
either seems more fun than struggling with JIRA.

These are not yet prioritized.

** TODO Improve typography.
I foolishly started from scratch.

** TODO Finish descriptions on all my pages.
** TODO Post my Twitter and Facebook archives.
** TODO Automate synchronization of notes.
** TODO Clean up tags
Particularly coming out of the social media archives.
** TODO The rendering of TODO headers is ugly
** TODO Integrate the scattered, unexported TODO sections into this list
** TODO web-key-directory has a stray copy button

* Footnotes

[fn:1] Currently implemented with Mastodon

[fn:2]
Note that this license is [[https://creativecommons.org/share-your-work/licensing-considerations/compatible-licenses][one-way compatible]] with the [[https://www.gnu.org/licenses/gpl-3.0-standalone.html][GNU General
Public License, version 3]] (~GPL-3.0-only~), which may be more
convenient for source code.

[fn:3] Though NixOS asymptotically approaches it.

[fn:4] [[http://pgp.mit.edu/faq.html][MIT PGP Public Key Server: Frequently Asked Questions]]

[fn:5] [[https://keys.openpgp.org/about/faq#federation][Is keys.openpgp.org federated?]]

[fn:6] Since I was moving instances, this limitation was fine.  To
update more often from a live Mastodon, it's worth considering the RSS
feed or a [[https://indieweb.org/POSSE][POSSE]] approach.

[fn:7] Did someone shit in your brain and forget to stir?

[fn:8] I won't forget to stir.

[fn:9]
#+begin_quote
From everyone to whom much has been given, much will be required, and from the one to whom much has been entrusted, even more will be demanded.

#+begin_cite
Luke 12:48, NRSV-UE
#+end_cite
#+end_quote

[fn:10] Good news: she's now my wife.

[fn:11] I can't remember where I got that appellation.  I am old, but
I'm not Little Rascals old.

[fn:12] And what we'll think "toots" were in 2050

[fn:13] Also I hope anyone still understands "cringe" is also a verb.

[fn:14] Most of my Scala follows joined that month, and I can't remember why.  Does anyone else?

[fn:15] "One day I'd like to toot in my second and third languages," in Spanish and German.

[fn:16] Today I learned [[https://yaml.org/][YAML]] doesn't stand for Yet Another Markdown
Language, but YAML Ain't Markup Language.

[fn:17] 36 million users online in December 1996, vs. 5,473 million in July 2022, per [[https://www.internetworldstats.com/emarketing.htm][Internet World Stats]].

[fn:18] Most of my Scala friends joined in April 2017, and I can't
remember what we fled from.  Can anybody else?
# Local Variables:
# org-babel-exp-code-template: "#+begin_src %lang%switches%flags :code-license %code-license\n%body\n#+end_src"
# End:
